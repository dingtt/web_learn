import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "js/classic-js.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "js/classic-js.html",
    'title': "手写JS",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>手写JS</h1>\n<h2 id="%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0">模拟实现<a class="anchor" href="#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0">§</a></h2>\n<h3 id="%E5%AE%9E%E7%8E%B0new">实现new<a class="anchor" href="#%E5%AE%9E%E7%8E%B0new">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 手写new</span>\n<span class="token keyword">const</span> <span class="token function-variable function">newByCreate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Fn</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Fn</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">myNew</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token maybe-class-name">Constructor</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Constructor</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Constructor</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Dog</span></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> da <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token maybe-class-name">Dog</span><span class="token punctuation">,</span><span class="token string">\'dahuang\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> xiao <span class="token operator">=</span> <span class="token function">newByCreate</span><span class="token punctuation">(</span><span class="token maybe-class-name">Dog</span><span class="token punctuation">,</span><span class="token string">\'xiaohuang\'</span><span class="token punctuation">)</span>\nda<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nxiao<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0objectcreate">实现Object.create()<a class="anchor" href="#%E5%AE%9E%E7%8E%B0objectcreate">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Object.create()</span>\n<span class="token keyword">const</span> <span class="token function-variable function">myCreate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> obj\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0instanceof">实现<em>instanceof</em><a class="anchor" href="#%E5%AE%9E%E7%8E%B0instanceof">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myInstanceof</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">O</span><span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token constant">O</span><span class="token punctuation">.</span><span class="token property-access">prorotype</span>\n  <span class="token keyword">const</span> right <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token property-access">__proto__</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>right <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    right <span class="token operator">==</span> right<span class="token punctuation">.</span><span class="token property-access">__proto__</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="call">call<a class="anchor" href="#call">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// eval</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">call2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token keyword control-flow">throw</span> <span class="token string">\'caller must be a function\'</span>\n  <span class="token comment">// 没有传参，及window</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token comment">// 调用call的函数</span>\n  context<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 函数参数</span>\n  <span class="token keyword">var</span> argsArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> \n  <span class="token keyword">var</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span>argsArr<span class="token punctuation">)</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n<span class="token comment">// object隐式绑定</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 测试一下</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> name<span class="token punctuation">,</span>\n    age<span class="token operator">:</span> age<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nbar<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token method function property-access">call2</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"kevin"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="apply">apply<a class="anchor" href="#apply">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">apply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token dom variable">window</span>\n <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr <span class="token operator">===</span> <span class="token string">\'undefined\'</span> <span class="token operator">||</span> arr <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n  context<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span> <span class="token operator">=</span> fn\n  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token spread operator">...</span>arr<span class="token punctuation">)</span>\n  <span class="token comment">// Reflect.deleteproperty(context.fn)</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试Symbol</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>\nobj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 测试一下</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> name <span class="token operator">||</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> age <span class="token operator">||</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n <span class="token comment">// console.log(bar.apply(window)) // 2</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"kevin"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n</code></pre>\n<h3 id="bind"><em>bind</em><a class="anchor" href="#bind">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// bind() 方法会创建一个新函数</span>\n<span class="token comment">// bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">bind2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">FNOP</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fbound</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> bindArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n    self<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">self</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>bindArgs<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token class-name">FNOP</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">prorotype</span>\n  fbound<span class="token punctuation">.</span><span class="token property-access">prorotype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// fbound.prototype = this.prototype;</span>\n  <span class="token keyword control-flow">return</span> fbound\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E6%96%B9%E6%B3%95">方法<a class="anchor" href="#%E6%96%B9%E6%B3%95">§</a></h2>\n<h3 id="%E6%8B%B7%E8%B4%9D">拷贝<a class="anchor" href="#%E6%8B%B7%E8%B4%9D">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 深拷贝与浅拷贝</span>\n<span class="token comment">// 浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</span>\n<span class="token comment">// 浅 Object.assgin() lodash 展开运输算符 Array.prototype.concat() Array.prototype.slice()</span>\n<span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> newObj\n<span class="token punctuation">}</span>\n<span class="token comment">// 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</span>\n<span class="token comment">// JSON.parse(JSON.stringify()) loadsh query.extend() 手写递归</span>\n<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> obj\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> obj\n  <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token method function property-access">hasOwnproperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> newObj\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81">防抖与节流<a class="anchor" href="#%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 定时器防抖</span>\n<span class="token comment">// 指触发事件后函数不会立即执行 </span>\n<span class="token comment">// 第一次触发创建定时器delay，如果这段时间（delay）内又触发了事件，则会删除定时器重新定时</span>\n<span class="token comment">// 最后一次触发事件，在 delay 时间后执行</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n   <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n     <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n     <span class="token punctuation">}</span>\n     timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n     <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 测试</span>\n<span class="token keyword">let</span> beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">requestAnimationFrame</span> <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'实际执行\'</span><span class="token punctuation">)</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span>\n     beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 防抖  立即执行 callNow</span>\n<span class="token comment">// 指触发事件后函数会立即执行，然后一定时间（秒）内不触发事件才能继续执行函数的效果</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounceImmediate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timer\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      timer <span class="token operator">=</span> <span class="token keyword null nil">null</span> <span class="token comment">// timer 只起到锁定作用</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// flag</span>\n  <span class="token function">immediateDebounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            flag <span class="token operator">=</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            flag <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 合并防抖</span>\n      <span class="token function">commonDebounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>immediate <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            flag <span class="token operator">=</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              flag <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n              fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 定时器节流</span>\n<span class="token comment">// 定时器实现的节流函数在第一次触发时【不会执行】，而是在 intervel 秒之后才执行，</span>\n<span class="token comment">// 当最后一次停止触发后，还会再执行一次函数。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> intervel</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> intervel<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 时间戳节流</span>\n<span class="token comment">// 时间戳实现的节流函数会在第一次触发事件时【立即执行】，以后每过 intervel 秒之后才执行一次</span>\n<span class="token comment">// 缺点：最后一次触发事件可能不会被执行</span>\n<span class="token keyword">const</span> <span class="token function-variable function">throttle2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> intervel</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> last <span class="token operator">></span> intervel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      last <span class="token operator">=</span> now\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// resize scroll keypress mousedown</span>\n<span class="token comment">// 防抖  搜索请求</span>\n<span class="token comment">// 节流 </span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"> <span class="token comment">// 合并节流防抖  解决防抖频率太快，一直没响应的问题, 防抖配合的是时间戳节流</span>\n\n      <span class="token function">debounceThrottle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n        <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n          <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token comment">// 节流时间内  防抖</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> last <span class="token operator">&lt;</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n              fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            last <span class="token operator">=</span> now\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<h3 id="todo%E5%BC%82%E6%AD%A5%E9%98%B2%E6%8A%96-">todo异步防抖 ?<a class="anchor" href="#todo%E5%BC%82%E6%AD%A5%E9%98%B2%E6%8A%96-">§</a></h3>\n<h3 id="%E5%87%BD%E6%95%B0%E7%9A%84-compose">函数的 compose<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%9A%84-compose">§</a></h3>\n<h3 id="%E6%9F%AF%E9%87%8C%E5%8C%96">柯里化<a class="anchor" href="#%E6%9F%AF%E9%87%8C%E5%8C%96">§</a></h3>\n<p>实现<code>add(1)(2)(3)(4)=10;</code> 、 <code>add(1)(1,2,3)(2)=9;</code></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// `add(1)(2)(3)(4)=10;` 、 `add(1)(1,2,3)(2)=9;`</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">let</span> _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span>  <span class="token comment">// 箭头函数没有arguments 不能用new</span>\n    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      _args <span class="token operator">=</span>  _args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword control-flow">return</span> fn\n    <span class="token punctuation">}</span>\n    fn<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword control-flow">return</span>  _args<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> sum <span class="token operator">+</span> cur<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> fn\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curry</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>newArgs<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;</span> fn<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> curry<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>newArgs<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E7%BB%A7%E6%89%BF">继承<a class="anchor" href="#%E7%BB%A7%E6%89%BF">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 原型继承  继承自同一个实例，指向同一个内存地址，一改全改</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Parent</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Child</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 构造函数继承</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Parent</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Child</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Parent</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// 继承父类的属性</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 寄生组合继承</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Parent</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'parent\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Child</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Parent</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// 继承父类的属性</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span> <span class="token comment">// 继承父类原型</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">setPrototypeOf</span><span class="token punctuation">(</span><span class="token maybe-class-name">Child</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Parent</span><span class="token punctuation">)</span> <span class="token comment">// 继承父类的静态方法</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token maybe-class-name">Child</span> <span class="token comment">// 重新指向Child</span>\n\n</code></pre>\n<h3 id="objectis"><a href="http://Object.is">Object.is</a><a class="anchor" href="#objectis">§</a></h3>\n<p>主要用来解决</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token boolean">true</span>\nNaN <span class="token operator">==</span><span class="token operator">=</span> NaN <span class="token boolean">false</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">is</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>x <span class="token operator">===</span> y <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> x <span class="token operator">!==</span><span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token operator">/</span>x <span class="token operator">===</span> <span class="token number">1</span><span class="token operator">/</span>y\n  <span class="token punctuation">}</span><span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> x <span class="token operator">!==</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> y\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%B3%E4%BA%8Easync%E7%9A%84%E7%AC%94%E8%AF%95%E9%A2%98">常见的关于<code>async</code>的笔试题<a class="anchor" href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%B3%E4%BA%8Easync%E7%9A%84%E7%AC%94%E8%AF%95%E9%A2%98">§</a></h2>\n<p><a href="https://mp.weixin.qq.com/s/eCkVvW_3iyqM_MtEYYtP-A"><code>async</code> 函数原理</a>就是 <code>Generator</code>函数 和 自动执行器包装了一下。</p>\n<ul>\n<li>\n<p>实现一个<code>sleep</code></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">interval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 用法</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n</li>\n<li>\n<p>实现一个红绿灯：红灯2秒，黄灯1秒，绿灯3秒</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token parameter">color<span class="token punctuation">,</span> duration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'当前颜色\'</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">\'红色\'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">\'黄色\'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">\'绿色\'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n</li>\n<li>\n<p>使用 <code>async</code> 实现<code>Promise.all()</code>的效果</p>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n</li>\n</ul>\n<pre class="language-js"><code class="language-js">\n\n<span class="token keyword">const</span> <span class="token constant">PENDDING</span> <span class="token operator">=</span> <span class="token string">\'pendding\'</span>\n<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">\'fulfilled\'</span>\n<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">\'rejected\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token constant">PENDDING</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">reason</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onFulfilledCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onRejectedCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n        <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">PENDDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token constant">FULFILLED</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> value\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onFulfilledCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">PENDDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">reason</span> <span class="token operator">=</span> reason\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onRejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token function">cb</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">try</span><span class="token punctuation">{</span>\n            <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token arrow operator">=></span> value\n        onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span> reason <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> reason<span class="token punctuation">.</span><span class="token property-access">message</span> <span class="token operator">:</span>reason<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">PENDDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                self<span class="token punctuation">.</span><span class="token property-access">onFulfilledCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token keyword control-flow">try</span><span class="token punctuation">{</span>\n                        <span class="token comment">// 模拟微任务</span>\n                        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n                            <span class="token comment">// 回调函数返回值是Promise,执行then操作</span>\n                            <span class="token comment">// 如果不是Promise, 调用新的promise.resolve</span>\n                            result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">:</span>\n                            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                slef<span class="token punctuation">.</span><span class="token property-access">onRejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    \n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword control-flow">try</span><span class="token punctuation">{</span>\n                   <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n                 result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>  <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    \n                <span class="token punctuation">}</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token comment">// rejected</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> value\n        <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// static reject</span>\n   \n<span class="token punctuation">}</span>\n<span class="token class-name">Promise</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">finally</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise<span class="token punctuation">.</span>resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise<span class="token punctuation">.</span>resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> error\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 存储结果</span>\n            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 计数</span>\n            len <span class="token operator">=</span> promises<span class="token punctuation">.</span><span class="token property-access">length</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n            <span class="token keyword control-flow">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data\n                index<span class="token operator">++</span>\n                <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">race</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span><span class="token property-access">length</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>setTimeout实现setInterval</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">timerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    <span class="token function">timerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">timerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>setInterval准时执行</p>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n<p>es5实现私有变量</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Person</span></span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">\'xiaoliu\'</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Vue2响应式原理</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// walk </span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineproperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>\n        enumerable<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n        configurable<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            dep<span class="token punctuation">.</span><span class="token method function property-access">addSub</span><span class="token punctuation">(</span><span class="token maybe-class-name">Dep</span><span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">)</span>\n            <span class="token keyword control-flow">return</span> val\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            dep<span class="token punctuation">.</span><span class="token method function property-access">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dep</span><span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">subs</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">watcher</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">subs</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">subs</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            sub<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>let const 的es5实现</p>\n<pre class="language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">_const</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token dom variable">window</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>\n      configurable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n      enumerable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> value\n      <span class="token punctuation">}</span>\n      <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>newValue <span class="token operator">!==</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'只读变量\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n          <span class="token keyword control-flow">return</span> value\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>获取页面最大嵌套深度，最大子元素个数</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMaxNestLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sel <span class="token operator">=</span> <span class="token string">\'* > *\'</span><span class="token punctuation">;</span> <span class="token comment">/* html > body is always present */</span>\n    <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword control-flow">while</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            max <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">></span> max <span class="token operator">?</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">:</span> max\n        <span class="token punctuation">}</span>\n        sel <span class="token operator">+=</span> <span class="token string">\' > *\'</span><span class="token punctuation">;</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> i <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> max<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">getMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">var</span> allNodes <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">\'html\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">function</span> <span class="token function">tra</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       \n      max <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> max <span class="token operator">?</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">:</span> max\n      <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">tra</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">tra</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u624B\u5199JS"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0">模拟实现<a class="anchor" href="#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0">§</a></h2>\n<h3 id="%E5%AE%9E%E7%8E%B0new">实现new<a class="anchor" href="#%E5%AE%9E%E7%8E%B0new">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 手写new</span>\n<span class="token keyword">const</span> <span class="token function-variable function">newByCreate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Fn</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Fn</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">myNew</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token maybe-class-name">Constructor</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Constructor</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Constructor</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Dog</span></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> da <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token maybe-class-name">Dog</span><span class="token punctuation">,</span><span class="token string">\'dahuang\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> xiao <span class="token operator">=</span> <span class="token function">newByCreate</span><span class="token punctuation">(</span><span class="token maybe-class-name">Dog</span><span class="token punctuation">,</span><span class="token string">\'xiaohuang\'</span><span class="token punctuation">)</span>\nda<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nxiao<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0objectcreate">实现Object.create()<a class="anchor" href="#%E5%AE%9E%E7%8E%B0objectcreate">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Object.create()</span>\n<span class="token keyword">const</span> <span class="token function-variable function">myCreate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> obj\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0instanceof">实现<em>instanceof</em><a class="anchor" href="#%E5%AE%9E%E7%8E%B0instanceof">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myInstanceof</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">O</span><span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token constant">O</span><span class="token punctuation">.</span><span class="token property-access">prorotype</span>\n  <span class="token keyword">const</span> right <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token property-access">__proto__</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>right <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    right <span class="token operator">==</span> right<span class="token punctuation">.</span><span class="token property-access">__proto__</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="call">call<a class="anchor" href="#call">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// eval</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">call2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token keyword control-flow">throw</span> <span class="token string">\'caller must be a function\'</span>\n  <span class="token comment">// 没有传参，及window</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token comment">// 调用call的函数</span>\n  context<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 函数参数</span>\n  <span class="token keyword">var</span> argsArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> \n  <span class="token keyword">var</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span>argsArr<span class="token punctuation">)</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n<span class="token comment">// object隐式绑定</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 测试一下</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> name<span class="token punctuation">,</span>\n    age<span class="token operator">:</span> age<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nbar<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token method function property-access">call2</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"kevin"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="apply">apply<a class="anchor" href="#apply">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">apply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token dom variable">window</span>\n <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr <span class="token operator">===</span> <span class="token string">\'undefined\'</span> <span class="token operator">||</span> arr <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n  context<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span> <span class="token operator">=</span> fn\n  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token spread operator">...</span>arr<span class="token punctuation">)</span>\n  <span class="token comment">// Reflect.deleteproperty(context.fn)</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试Symbol</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>\nobj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 测试一下</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> name <span class="token operator">||</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> age <span class="token operator">||</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n <span class="token comment">// console.log(bar.apply(window)) // 2</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"kevin"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n</code></pre>\n<h3 id="bind"><em>bind</em><a class="anchor" href="#bind">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// bind() 方法会创建一个新函数</span>\n<span class="token comment">// bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">bind2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">FNOP</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fbound</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> bindArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n    self<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">self</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>bindArgs<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token class-name">FNOP</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">prorotype</span>\n  fbound<span class="token punctuation">.</span><span class="token property-access">prorotype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// fbound.prototype = this.prototype;</span>\n  <span class="token keyword control-flow">return</span> fbound\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E6%96%B9%E6%B3%95">方法<a class="anchor" href="#%E6%96%B9%E6%B3%95">§</a></h2>\n<h3 id="%E6%8B%B7%E8%B4%9D">拷贝<a class="anchor" href="#%E6%8B%B7%E8%B4%9D">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 深拷贝与浅拷贝</span>\n<span class="token comment">// 浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</span>\n<span class="token comment">// 浅 Object.assgin() lodash 展开运输算符 Array.prototype.concat() Array.prototype.slice()</span>\n<span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> newObj\n<span class="token punctuation">}</span>\n<span class="token comment">// 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</span>\n<span class="token comment">// JSON.parse(JSON.stringify()) loadsh query.extend() 手写递归</span>\n<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> obj\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> obj\n  <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token method function property-access">hasOwnproperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> newObj\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81">防抖与节流<a class="anchor" href="#%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 定时器防抖</span>\n<span class="token comment">// 指触发事件后函数不会立即执行 </span>\n<span class="token comment">// 第一次触发创建定时器delay，如果这段时间（delay）内又触发了事件，则会删除定时器重新定时</span>\n<span class="token comment">// 最后一次触发事件，在 delay 时间后执行</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n   <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n     <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n     <span class="token punctuation">}</span>\n     timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n     <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 测试</span>\n<span class="token keyword">let</span> beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">requestAnimationFrame</span> <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'实际执行\'</span><span class="token punctuation">)</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span>\n     beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 防抖  立即执行 callNow</span>\n<span class="token comment">// 指触发事件后函数会立即执行，然后一定时间（秒）内不触发事件才能继续执行函数的效果</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounceImmediate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timer\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      timer <span class="token operator">=</span> <span class="token keyword null nil">null</span> <span class="token comment">// timer 只起到锁定作用</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// flag</span>\n  <span class="token function">immediateDebounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            flag <span class="token operator">=</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            flag <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 合并防抖</span>\n      <span class="token function">commonDebounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>immediate <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            flag <span class="token operator">=</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              flag <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n              fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 定时器节流</span>\n<span class="token comment">// 定时器实现的节流函数在第一次触发时【不会执行】，而是在 intervel 秒之后才执行，</span>\n<span class="token comment">// 当最后一次停止触发后，还会再执行一次函数。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> intervel</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> intervel<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 时间戳节流</span>\n<span class="token comment">// 时间戳实现的节流函数会在第一次触发事件时【立即执行】，以后每过 intervel 秒之后才执行一次</span>\n<span class="token comment">// 缺点：最后一次触发事件可能不会被执行</span>\n<span class="token keyword">const</span> <span class="token function-variable function">throttle2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> intervel</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> last <span class="token operator">></span> intervel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      last <span class="token operator">=</span> now\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// resize scroll keypress mousedown</span>\n<span class="token comment">// 防抖  搜索请求</span>\n<span class="token comment">// 节流 </span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"> <span class="token comment">// 合并节流防抖  解决防抖频率太快，一直没响应的问题, 防抖配合的是时间戳节流</span>\n\n      <span class="token function">debounceThrottle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n        <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>\n          <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token comment">// 节流时间内  防抖</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> last <span class="token operator">&lt;</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n              fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n            last <span class="token operator">=</span> now\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<h3 id="todo%E5%BC%82%E6%AD%A5%E9%98%B2%E6%8A%96-">todo异步防抖 ?<a class="anchor" href="#todo%E5%BC%82%E6%AD%A5%E9%98%B2%E6%8A%96-">§</a></h3>\n<h3 id="%E5%87%BD%E6%95%B0%E7%9A%84-compose">函数的 compose<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%9A%84-compose">§</a></h3>\n<h3 id="%E6%9F%AF%E9%87%8C%E5%8C%96">柯里化<a class="anchor" href="#%E6%9F%AF%E9%87%8C%E5%8C%96">§</a></h3>\n<p>实现<code>add(1)(2)(3)(4)=10;</code> 、 <code>add(1)(1,2,3)(2)=9;</code></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// `add(1)(2)(3)(4)=10;` 、 `add(1)(1,2,3)(2)=9;`</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">let</span> _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span>  <span class="token comment">// 箭头函数没有arguments 不能用new</span>\n    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      _args <span class="token operator">=</span>  _args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword control-flow">return</span> fn\n    <span class="token punctuation">}</span>\n    fn<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword control-flow">return</span>  _args<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> sum <span class="token operator">+</span> cur<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> fn\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curry</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>newArgs<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;</span> fn<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> curry<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>newArgs<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E7%BB%A7%E6%89%BF">继承<a class="anchor" href="#%E7%BB%A7%E6%89%BF">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 原型继承  继承自同一个实例，指向同一个内存地址，一改全改</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Parent</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Child</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 构造函数继承</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Parent</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Child</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Parent</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// 继承父类的属性</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 寄生组合继承</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Parent</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'parent\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Child</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Parent</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// 继承父类的属性</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span> <span class="token comment">// 继承父类原型</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">setPrototypeOf</span><span class="token punctuation">(</span><span class="token maybe-class-name">Child</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Parent</span><span class="token punctuation">)</span> <span class="token comment">// 继承父类的静态方法</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token maybe-class-name">Child</span> <span class="token comment">// 重新指向Child</span>\n\n</code></pre>\n<h3 id="objectis"><a href="http://Object.is">Object.is</a><a class="anchor" href="#objectis">§</a></h3>\n<p>主要用来解决</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token boolean">true</span>\nNaN <span class="token operator">==</span><span class="token operator">=</span> NaN <span class="token boolean">false</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">is</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>x <span class="token operator">===</span> y <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> x <span class="token operator">!==</span><span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token operator">/</span>x <span class="token operator">===</span> <span class="token number">1</span><span class="token operator">/</span>y\n  <span class="token punctuation">}</span><span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> x <span class="token operator">!==</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> y\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%B3%E4%BA%8Easync%E7%9A%84%E7%AC%94%E8%AF%95%E9%A2%98">常见的关于<code>async</code>的笔试题<a class="anchor" href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%B3%E4%BA%8Easync%E7%9A%84%E7%AC%94%E8%AF%95%E9%A2%98">§</a></h2>\n<p><a href="https://mp.weixin.qq.com/s/eCkVvW_3iyqM_MtEYYtP-A"><code>async</code> 函数原理</a>就是 <code>Generator</code>函数 和 自动执行器包装了一下。</p>\n<ul>\n<li>\n<p>实现一个<code>sleep</code></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">interval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 用法</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n</li>\n<li>\n<p>实现一个红绿灯：红灯2秒，黄灯1秒，绿灯3秒</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token parameter">color<span class="token punctuation">,</span> duration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'当前颜色\'</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">\'红色\'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">\'黄色\'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">await</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">\'绿色\'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n</li>\n<li>\n<p>使用 <code>async</code> 实现<code>Promise.all()</code>的效果</p>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n</li>\n</ul>\n<pre class="language-js"><code class="language-js">\n\n<span class="token keyword">const</span> <span class="token constant">PENDDING</span> <span class="token operator">=</span> <span class="token string">\'pendding\'</span>\n<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">\'fulfilled\'</span>\n<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">\'rejected\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token constant">PENDDING</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">reason</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onFulfilledCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onRejectedCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n        <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">PENDDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token constant">FULFILLED</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> value\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onFulfilledCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">PENDDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">reason</span> <span class="token operator">=</span> reason\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onRejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token function">cb</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">try</span><span class="token punctuation">{</span>\n            <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token arrow operator">=></span> value\n        onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span> reason <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> reason<span class="token punctuation">.</span><span class="token property-access">message</span> <span class="token operator">:</span>reason<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">PENDDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                self<span class="token punctuation">.</span><span class="token property-access">onFulfilledCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token keyword control-flow">try</span><span class="token punctuation">{</span>\n                        <span class="token comment">// 模拟微任务</span>\n                        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n                            <span class="token comment">// 回调函数返回值是Promise,执行then操作</span>\n                            <span class="token comment">// 如果不是Promise, 调用新的promise.resolve</span>\n                            result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">:</span>\n                            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                slef<span class="token punctuation">.</span><span class="token property-access">onRejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    \n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword control-flow">try</span><span class="token punctuation">{</span>\n                   <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n                 result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>  <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    \n                <span class="token punctuation">}</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token comment">// rejected</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> value\n        <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// static reject</span>\n   \n<span class="token punctuation">}</span>\n<span class="token class-name">Promise</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">finally</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise<span class="token punctuation">.</span>resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise<span class="token punctuation">.</span>resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> error\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 存储结果</span>\n            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 计数</span>\n            len <span class="token operator">=</span> promises<span class="token punctuation">.</span><span class="token property-access">length</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n            <span class="token keyword control-flow">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data\n                index<span class="token operator">++</span>\n                <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">race</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span><span class="token property-access">length</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>setTimeout实现setInterval</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">timerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    <span class="token function">timerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">timerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>setInterval准时执行</p>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n<p>es5实现私有变量</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Person</span></span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">\'xiaoliu\'</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Vue2响应式原理</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// walk </span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineproperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>\n        enumerable<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n        configurable<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            dep<span class="token punctuation">.</span><span class="token method function property-access">addSub</span><span class="token punctuation">(</span><span class="token maybe-class-name">Dep</span><span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">)</span>\n            <span class="token keyword control-flow">return</span> val\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            dep<span class="token punctuation">.</span><span class="token method function property-access">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dep</span><span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">subs</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">watcher</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">subs</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">subs</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            sub<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>let const 的es5实现</p>\n<pre class="language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">_const</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token dom variable">window</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>\n      configurable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n      enumerable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> value\n      <span class="token punctuation">}</span>\n      <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>newValue <span class="token operator">!==</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'只读变量\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n          <span class="token keyword control-flow">return</span> value\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>获取页面最大嵌套深度，最大子元素个数</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMaxNestLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sel <span class="token operator">=</span> <span class="token string">\'* > *\'</span><span class="token punctuation">;</span> <span class="token comment">/* html > body is always present */</span>\n    <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword control-flow">while</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            max <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">></span> max <span class="token operator">?</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">:</span> max\n        <span class="token punctuation">}</span>\n        sel <span class="token operator">+=</span> <span class="token string">\' > *\'</span><span class="token punctuation">;</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> i <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> max<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">getMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">var</span> allNodes <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">\'html\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">function</span> <span class="token function">tra</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       \n      max <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> max <span class="token operator">?</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">:</span> max\n      <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">tra</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">tra</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0" }, "\u6A21\u62DF\u5B9E\u73B0"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AE%9E%E7%8E%B0new" }, "\u5B9E\u73B0new")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AE%9E%E7%8E%B0objectcreate" }, "\u5B9E\u73B0Object.create()")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AE%9E%E7%8E%B0instanceof" }, "\u5B9E\u73B0instanceof")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#call" }, "call")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#apply" }, "apply")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#bind" }, "bind")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%96%B9%E6%B3%95" }, "\u65B9\u6CD5"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%8B%B7%E8%B4%9D" }, "\u62F7\u8D1D")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81" }, "\u9632\u6296\u4E0E\u8282\u6D41")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#todo%E5%BC%82%E6%AD%A5%E9%98%B2%E6%8A%96-" }, "todo\u5F02\u6B65\u9632\u6296 ?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%87%BD%E6%95%B0%E7%9A%84-compose" }, "\u51FD\u6570\u7684 compose")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%9F%AF%E9%87%8C%E5%8C%96" }, "\u67EF\u91CC\u5316")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%BB%A7%E6%89%BF" }, "\u7EE7\u627F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#objectis" }, "Object.is")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%B3%E4%BA%8Easync%E7%9A%84%E7%AC%94%E8%AF%95%E9%A2%98" }, "\u5E38\u89C1\u7684\u5173\u4E8Easync\u7684\u7B14\u8BD5\u9898")))),
    'author': "dingtt",
    'contributors': [
        "dingtt"
    ],
    'date': "2021-05-02T08:22:31.000Z",
    'updated': null,
    'excerpt': "模拟实现 实现new // 手写new const newByCreate = function (Fn, ...args) { const obj = Object.create(Fn.prototype) const res = Fn.apply(obj,args) return res instanceof Fn ? res : obj } const myNew = function () {...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
