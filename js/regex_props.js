import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "闭包和面向对象",
        "link": "js/closure.html"
    },
    'next': {
        "text": "算法",
        "link": "js/algo.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "js/regex.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "js/regex.html",
    'title': "正则",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>正则</h1>\n<p>string.match()</p>\n<p>regex.test()</p>\n<h3 id="%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D">字符匹配<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D">§</a></h3>\n<h4 id="%E4%B8%A4%E7%A7%8D%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D">两种模糊匹配<a class="anchor" href="#%E4%B8%A4%E7%A7%8D%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D">§</a></h4>\n<p>横向模糊匹配  {m,n} ，出现次数数量</p>\n<p>纵向模糊匹配 [a, b, c] 任一个</p>\n<h4 id="%E5%AD%97%E7%AC%A6%E7%BB%84"><strong>字符组</strong><a class="anchor" href="#%E5%AD%97%E7%AC%A6%E7%BB%84">§</a></h4>\n<p>范围表示法 [a-z] ，如果要匹配 - ，需要放到开头或结尾，或加 \</p>\n<p>排除[ ^ abc] 除 &quot;a&quot; &quot;b&quot; &quot;c&quot;</p>\n<p>大写为排除</p>\n<p>\d 数字 ； \D 非数字； \s 空白符，包括各种符号； \S 非空白符，即通配符</p>\n<p>\w \W ， \w是字符组 [0-9a-zA-Z_] 的简写形式，即 \w 是<em>字母 数字</em>或者<em>下划线</em>的中任何一个字符</p>\n<p>\W   [ ^0-9a-zA-Z_]</p>\n<p>匹配任意字符，可以使用 [\d\D]、[\w\W]、[\s\S] 和 [^] 中任何的一个。</p>\n<h4 id="%E9%87%8F%E8%AF%8D"><strong>量词</strong><a class="anchor" href="#%E9%87%8F%E8%AF%8D">§</a></h4>\n<p>{m,}  至少m次</p>\n<p>{m} m次</p>\n<p>？ {0,1} 出现不出现</p>\n<p>+, {1,} 至少出现一次</p>\n<p>*, {0,}  任意次，可为0   量词 * 是贪婪的</p>\n<p>惰性量词  加 ?  表示从最少的开始匹配，匹配到了就行了，m个就够了，就不再尝试了</p>\n<p>{m,n}?    {m,}?    ??    +?     *?</p>\n<h4 id="%E5%A4%9A%E9%80%89%E5%88%86%E6%94%AF"><strong>多选分支</strong><a class="anchor" href="#%E5%A4%9A%E9%80%89%E5%88%86%E6%94%AF">§</a></h4>\n<p>/1| 2/    (|)</p>\n<p>/goodbye|good/ 分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了</p>\n<h4 id="%E6%A1%88%E4%BE%8B"><strong>案例</strong><a class="anchor" href="#%E6%A1%88%E4%BE%8B">§</a></h4>\n<p>匹配颜色值</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> c1 <span class="token operator">=</span>  <span class="token string">\'#ffbbad #Fc01DF #FFF #ffE\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 注意顺序，分支结构是惰性的，3在前头，6就被截断了</span>\n</code></pre>\n<p>匹配时间</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([01][0-9]|[2][1-4]):[0-5][0-9]$</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">const</span> regexp2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0?[0-9]|1[0-9]|[2][1-4]):(0?[0-9]|[1-5][0-9])$</span><span class="token regex-delimiter">/</span></span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'23:59\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'02:07\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexp2<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'7:9\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>{1}可以省略</p>\n<p>匹配日期</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> regexpDate <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{4}-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span></span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexpDate<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'2017-06-10\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexpDate<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'2017-6-10\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexpDate<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'2017-6-9\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>window 操作系统文件路径  ???</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">\'D:\wwwroot\hellouni\store\'</span>\n</code></pre>\n<p>匹配属性</p>\n<p>因为 . 是通配符，本身就匹配双引号的，而量词 * 又是贪婪的，当遇到 container 后面双引号时，是不会</p>\n<p>停下来，会继续匹配，直到遇到最后一个双引号为止。 解决之道，可以使用惰性匹配：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=".*?"</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">\'&lt;div id="container" class="main">&lt;/div>\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// 优化方案</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id="[^"]*"</span><span class="token regex-delimiter">/</span></span>\n</code></pre>\n<h3 id="%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D">位置匹配<a class="anchor" href="#%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D">§</a></h3>\n<p>在ES5中共有6个锚</p>\n<p>^    $   \b  \B  (?=p)  (?|p)</p>\n<p><strong>^ $</strong></p>\n<p>^（脱字符）匹配开头，在多行匹配中匹配行开头。\n$（美元符号）匹配结尾，在多行匹配中匹配行结尾。  //gm</p>\n<pre class="language-js"><code class="language-js"> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'*\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// *id*</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id\nname\nclass\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span><span class="token string">\'*\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// *id*</span>\n<span class="token comment">// *name*</span>\n<span class="token comment">// *class*</span>\n</code></pre>\n<p><strong>单词边界 \b 和 \B</strong>    非单词边界</p>\n<p>\w 与 \W，\w 与 ^ $ 的之间位置</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id name class data.key\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'#\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  #id# #name# #class# #data#.#key#</span>\n</code></pre>\n<p>\B 就是 \b 的反面的意思，非单词边界。  \w与\w \W与\W</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id name class data.key\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'#\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// i#d n#a#m#e c#l#a#s#s d#a#t#a.k#e#y</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id name class data....key\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'#\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  i#d n#a#m#e c#l#a#s#s d#a#t#a.#.#.#.k#e#y</span>\n</code></pre>\n<p><strong>(?=p) 和 (?!p)</strong></p>\n<p>p前面的位置  （后面是p）， (?!p) 后面不是p，即不在p的前面</p>\n<p><strong>案例</strong></p>\n<p>不匹配任何东西的正则   /.^/</p>\n<p><strong>字符串数字分割</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'123456789\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// (?1^)不能是开头   （?=(\d{3}+$)） //不带$ 1,2,345</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"12345678 123456789"</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!\b)(?=(\d{3})+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 12,345,678 123,456,789  (?!\b)|\B</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"1888"</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'.00\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'$ \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// $ 1888.00</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span><span class="token number">1888</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B(?=(\d{3})+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$ "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p><em><strong>货币格式化问题</strong></em></p>\n<p><em><strong>密码校验</strong></em></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 必须数字或字母 </span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">// 必须包含数字 位置匹配，接下来的字符，必须包含个数字。</span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">// 同时包含数字 小写字母</span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])(?=.*[a-z])^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">//  至少两种，用分支结构</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[AZ]))^[0-9A-Za-z]{6,12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 反向思维  不能全部都是数字  </span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]{6,12}$)^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">//不能全部都是小写字母 ...</span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n</code></pre>\n<h4 id="%E5%88%86%E7%BB%84%E5%92%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84">分组和分支结构<a class="anchor" href="#%E5%88%86%E7%BB%84%E5%92%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84">§</a></h4>\n<p>分组  （ab）</p>\n<p>分支结构 （p1|p2）</p>\n<p><strong>提取数据</strong></p>\n<p>分组引用   string.match(regexp)   返回整体匹配 分组</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 匹配</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// ["2020-11-01", "2020", "11", "01", index: 0, input: "2020-11-01", groups: undefined]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>\nregex<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正则操作即可，例如</span>\n<span class="token comment">//regex.exec(string);</span>\n<span class="token comment">//string.match(regex);</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "2017"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "06"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12"</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 替换 排序</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">\'$3-$2-$1\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 01-11-2020</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 全局变量</span>\n    <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'* \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// args 是同上的一大长串，RegExp.$1 才是分组</span>\n</code></pre>\n<p>//  RegExp.$1   \'$1\'  横杠转驼峰</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'border-right-width\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-([a-z]{1})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// -r, w</span>\n<span class="token comment">// -w, w</span>\n<span class="token comment">// borderWightWidth</span>\n</code></pre>\n<h5 id="%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8">反向引用<a class="anchor" href="#%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8">§</a></h5>\n<p>在正则本身中引用分组，只能引用前面的分组。 \1 \2 \3</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{4}(-|\/|\.)\d{2}(-|\/|\.)\d{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token string">"2020-11-06"</span> <span class="token string">"2020/11/06"</span> <span class="token string">"2020.11.06"</span>  <span class="token string">"2020/11-06"</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{4}(-|\/|\.)\d{2}\1\d{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 后面引用前面的符号，保持一致  \1 \2 \3</span>\n</code></pre>\n<h5 id="%E6%8B%AC%E5%8F%B7%E5%B5%8C%E5%A5%97">括号嵌套<a class="anchor" href="#%E6%8B%AC%E5%8F%B7%E5%B5%8C%E5%A5%97">§</a></h5>\n<p>以左括号为准   /1 /2 /3 /4 第 1 2 3 4 个</p>\n<p>\10 表示第10个分组，匹配 \1 和 0 的话，使用 (?:\1)0 或者 \1(?:0)。</p>\n<p><strong>引用不存在</strong></p>\n<p>引用不存在, \2 就表示 “\2” 对2 进行转义</p>\n<p><strong>分组后面有量词</strong></p>\n<p>分组捕获到的数据是最后一次匹配</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'1234\'</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// ["1234", "4", index: 0, input: "1234", groups: undefined]</span>\n</code></pre>\n<p><strong>非捕获括号</strong></p>\n<p>(?:p) 和 (?:p1|p2|p3)</p>\n<p><strong>案例</strong></p>\n<p>去除字符串首尾空格</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'  1234  \'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>首字母大写</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'hello world hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^|\s)\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'hello world hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\s)\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>驼峰化   （.）表示首字母</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'-hello-world-hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[_-\s](.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'hello-world-hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[_-\s]+(.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>中划线化</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'BorderRightWidth\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'-$1\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -border-right-width</span>\n</code></pre>\n<p>html转义与反转义</p>\n<p>匹配成对标签   （引用 加 + ）， 反向引用</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 匹配一个开标签，可以使用正则 &lt;[^>]+>，  ^> 表示非></span>\n<span class="token comment">// 匹配一个闭标签，可以使用 &lt;\/[^>]+>，</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;([^>]+)>[\d\D]*&lt;\/\1></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%8E%9F%E7%90%86">回溯法原理<a class="anchor" href="#%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%8E%9F%E7%90%86">§</a></h4>\n<p>回溯法也称试探法（判断回文字符串）（深度优先搜索算法  ）（撞南墙回头）</p>\n<p>没有回溯的匹配</p>\n<p>有回溯的匹配</p>\n<p>贪婪量词  {1,3} 先按照3个去匹配，匹配不到减掉一个，按2去匹配</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'12345\'</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{1,3})(\d{1,3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 多个贪婪量词，前面的优先</span>\n<span class="token punctuation">[</span><span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span> groups<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">]</span>\n</code></pre>\n<p>惰性量词</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{1,3}?)(\d{1,3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => ["1234", "1", "234", index: 0, input: "12345"]</span>\n</code></pre>\n<p>分支结构也是惰性的，比如 /can|candy/，去匹配字符串 &quot;candy&quot;，得到的结果是 &quot;can&quot;</p>\n<h4 id="%E6%AD%A3%E5%88%99%E7%9A%84%E6%8B%86%E5%88%86">正则的拆分<a class="anchor" href="#%E6%AD%A3%E5%88%99%E7%9A%84%E6%8B%86%E5%88%86">§</a></h4>\n<p><strong>结构和操作符</strong></p>\n<p>字符字面量、字符组 []、量词{} ?  * + 、锚 ^ $ \b、分组 () (?:ab)、选择分支 | 、反向引用。</p>\n<p>优先级  转义符  括号/方括号 量词  位置和序列  管道符竖杠</p>\n<p><strong>元字符转义</strong></p>\n<p>^、$、.、*、+、?、|、\、/、(、)、[、]、{、}、=、!、:、- ,     匹配这些字符本身，可以一律转义</p>\n<p>[abc]   /\ [abc]/   /\ [abc ]/    {1,3}  /\ {1,3}/  /\ {1,3\ }/    第一个括号被转义了，第二个括号自然也无法成对，可以不转移</p>\n<p>/(123)/   括号需要前后都转义</p>\n<p>=、!、:、-、, 等符号，只要不在特殊结构中，并不需要转义。</p>\n<p>^、$、.、*、+、?、|、\、/ 等字符，只要不在字符组内，都需要转义的 ，都是正则会用到的符号。</p>\n<p><strong>案例</strong></p>\n<p><em><strong>匹配身份证号</strong></em></p>\n<pre class="language-autoit"><code class="language-autoit"> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span>\d{<span class="token number">15</span>}|\d{<span class="token number">17</span>}<span class="token punctuation">[</span>\dxX<span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token operator">/</span>\n</code></pre>\n<p><em><strong>匹配ip地址（）</strong></em></p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">255.111</span><span class="token punctuation">.</span><span class="token number">111.0</span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">)</span>{<span class="token number">3</span>}<span class="token punctuation">(</span>…<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>内涵五个小分支\n<span class="token operator">/</span><span class="token operator">/</span>  <span class="token number">1</span> <span class="token number">01</span> <span class="token number">001</span> <span class="token punctuation">,</span>  <span class="token number">11</span> <span class="token number">011</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token number">199</span> <span class="token number">200</span> <span class="token number">255</span>\n（<span class="token number">0</span>{<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span>}\d）<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span>\d{<span class="token number">2</span>}<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span>\d{<span class="token number">2</span>}<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">/</span>d<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>string.search(/?/)  判断是否有问号</p>\n<p>拆分支</p>\n<p>不需要使用分组引用和反向引用时，此时可以使用非捕获分组。   （?: ...）</p>\n<h4 id="%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%93%8D%E4%BD%9C">正则表达式的四种操作<a class="anchor" href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%93%8D%E4%BD%9C">§</a></h4>\n<p>验证、</p>\n<p>reg.test rer.exec  string.match()  string.serach()</p>\n<p>切分、</p>\n<p>string.spilt(regexp) // 正则</p>\n<p>提取、</p>\n<p>regex.match  数组</p>\n<p>regex.exec()  数组</p>\n<p>regex.test(string);     RegExp.$1</p>\n<p>regex.search()  RegExp.$1</p>\n<p>regex.replace()   第二个参数可为 function(){}</p>\n<p>替换</p>\n<p>replace</p>\n<pre class="language-autoit"><code class="language-autoit">String#search <span class="token operator">/</span><span class="token operator">/</span> 会把字符串参数修成正则 <span class="token string">"."</span>  <span class="token string">"\\."</span>  <span class="token operator">/</span>\<span class="token punctuation">.</span><span class="token operator">/</span>\nString#split\nString#match <span class="token operator">/</span><span class="token operator">/</span> 会把字符串参数修成正则  没有g返回标准格式，整体<span class="token operator">+</span>分组，下一个目标，目标字符串，有g返回的是所有匹配的内容，没有匹配时，不管有无g，都返回<span class="token keyword">null</span>\nString#replace\nRegExp#test  test 整体匹配时需要使用 <span class="token operator">^</span> 和 $  \nRegExp#exec  能接着上一次匹配的内容继续匹配\n</code></pre>\n<p>使用构造函数需要写\ 反斜杠</p>\n<h2 id="regexp-%E5%AF%B9%E8%B1%A1%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99">RegExp 对象用于存储检索规则<a class="anchor" href="#regexp-%E5%AF%B9%E8%B1%A1%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99">§</a></h2>\n<ul>\n<li>\n<p>test()</p>\n<ul>\n<li>test() 方法检索字符串中的指定值。返回值是 true 或 false。</li>\n</ul>\n</li>\n<li>\n<p>exec()</p>\n<ul>\n<li>exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。</li>\n</ul>\n</li>\n<li>\n<p>compile()</p>\n<ul>\n<li>既可以改变检索规则，也可以添加或删除第二个参数</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F">创建方式<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F">§</a></h2>\n<ul>\n<li>\n<p>字面量语法</p>\n<ul>\n<li>/pattern/attributes</li>\n</ul>\n</li>\n<li>\n<p>创建 RegExp 对象的语法</p>\n<ul>\n<li>\n<p>new RegExp(pattern, attributes);</p>\n<ul>\n<li>参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。</li>\n<li>参数 attributes 是一个可选的字符串，包含属性 &quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;，分别用于指定全局匹配、区分大小写的匹配和多行匹配。</li>\n<li>如果 pattern 是正则表达式，而不是字符串，则必须省略该参数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>实战</p>\n<ul>\n<li>\n<p>把一个字符串中所有的英文,都给删除</p>\n<ul>\n<li>\n<p>制定英文匹配规则</p>\n<ul>\n<li>\n<p>一个或者多个英文字母</p>\n</li>\n<li>\n<p>[A-Za-z]+</p>\n<ul>\n<li>[A-z]+</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>doc = doc.replace(/[A-Za-z]+/g, \'\');</p>\n</li>\n</ul>\n</li>\n<li>\n<p>验证一个字符串是否是电话号码</p>\n<ul>\n<li>\n<p>指定电话号码匹配规则</p>\n<ul>\n<li>首位1, 次位358, 其余9位纯数字</li>\n<li>/^[1][358][0-9]{9}$/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>检索出一个字符串中的电话号码</p>\n<ul>\n<li>\n<p>var reg = /[1][358][0-9]{9}/g;</p>\n</li>\n<li>\n<p>调用方法</p>\n<ul>\n<li>do {</li>\n<li>var result = reg.exec(str);</li>\n<li>console.log(result);</li>\n<li>}while (result != null);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u6B63\u5219"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>string.match()</p>\n<p>regex.test()</p>\n<h3 id="%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D">字符匹配<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D">§</a></h3>\n<h4 id="%E4%B8%A4%E7%A7%8D%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D">两种模糊匹配<a class="anchor" href="#%E4%B8%A4%E7%A7%8D%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D">§</a></h4>\n<p>横向模糊匹配  {m,n} ，出现次数数量</p>\n<p>纵向模糊匹配 [a, b, c] 任一个</p>\n<h4 id="%E5%AD%97%E7%AC%A6%E7%BB%84"><strong>字符组</strong><a class="anchor" href="#%E5%AD%97%E7%AC%A6%E7%BB%84">§</a></h4>\n<p>范围表示法 [a-z] ，如果要匹配 - ，需要放到开头或结尾，或加 \</p>\n<p>排除[ ^ abc] 除 &quot;a&quot; &quot;b&quot; &quot;c&quot;</p>\n<p>大写为排除</p>\n<p>\d 数字 ； \D 非数字； \s 空白符，包括各种符号； \S 非空白符，即通配符</p>\n<p>\w \W ， \w是字符组 [0-9a-zA-Z_] 的简写形式，即 \w 是<em>字母 数字</em>或者<em>下划线</em>的中任何一个字符</p>\n<p>\W   [ ^0-9a-zA-Z_]</p>\n<p>匹配任意字符，可以使用 [\d\D]、[\w\W]、[\s\S] 和 [^] 中任何的一个。</p>\n<h4 id="%E9%87%8F%E8%AF%8D"><strong>量词</strong><a class="anchor" href="#%E9%87%8F%E8%AF%8D">§</a></h4>\n<p>{m,}  至少m次</p>\n<p>{m} m次</p>\n<p>？ {0,1} 出现不出现</p>\n<p>+, {1,} 至少出现一次</p>\n<p>*, {0,}  任意次，可为0   量词 * 是贪婪的</p>\n<p>惰性量词  加 ?  表示从最少的开始匹配，匹配到了就行了，m个就够了，就不再尝试了</p>\n<p>{m,n}?    {m,}?    ??    +?     *?</p>\n<h4 id="%E5%A4%9A%E9%80%89%E5%88%86%E6%94%AF"><strong>多选分支</strong><a class="anchor" href="#%E5%A4%9A%E9%80%89%E5%88%86%E6%94%AF">§</a></h4>\n<p>/1| 2/    (|)</p>\n<p>/goodbye|good/ 分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了</p>\n<h4 id="%E6%A1%88%E4%BE%8B"><strong>案例</strong><a class="anchor" href="#%E6%A1%88%E4%BE%8B">§</a></h4>\n<p>匹配颜色值</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> c1 <span class="token operator">=</span>  <span class="token string">\'#ffbbad #Fc01DF #FFF #ffE\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 注意顺序，分支结构是惰性的，3在前头，6就被截断了</span>\n</code></pre>\n<p>匹配时间</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([01][0-9]|[2][1-4]):[0-5][0-9]$</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">const</span> regexp2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0?[0-9]|1[0-9]|[2][1-4]):(0?[0-9]|[1-5][0-9])$</span><span class="token regex-delimiter">/</span></span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'23:59\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'02:07\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexp2<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'7:9\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>{1}可以省略</p>\n<p>匹配日期</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> regexpDate <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{4}-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span></span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexpDate<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'2017-06-10\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexpDate<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'2017-6-10\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>regexpDate<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'2017-6-9\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>window 操作系统文件路径  ???</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">\'D:\wwwroot\hellouni\store\'</span>\n</code></pre>\n<p>匹配属性</p>\n<p>因为 . 是通配符，本身就匹配双引号的，而量词 * 又是贪婪的，当遇到 container 后面双引号时，是不会</p>\n<p>停下来，会继续匹配，直到遇到最后一个双引号为止。 解决之道，可以使用惰性匹配：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=".*?"</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">\'&lt;div id="container" class="main">&lt;/div>\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// 优化方案</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id="[^"]*"</span><span class="token regex-delimiter">/</span></span>\n</code></pre>\n<h3 id="%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D">位置匹配<a class="anchor" href="#%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D">§</a></h3>\n<p>在ES5中共有6个锚</p>\n<p>^    $   \b  \B  (?=p)  (?|p)</p>\n<p><strong>^ $</strong></p>\n<p>^（脱字符）匹配开头，在多行匹配中匹配行开头。\n$（美元符号）匹配结尾，在多行匹配中匹配行结尾。  //gm</p>\n<pre class="language-js"><code class="language-js"> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'*\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// *id*</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id\nname\nclass\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span><span class="token string">\'*\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// *id*</span>\n<span class="token comment">// *name*</span>\n<span class="token comment">// *class*</span>\n</code></pre>\n<p><strong>单词边界 \b 和 \B</strong>    非单词边界</p>\n<p>\w 与 \W，\w 与 ^ $ 的之间位置</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id name class data.key\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'#\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  #id# #name# #class# #data#.#key#</span>\n</code></pre>\n<p>\B 就是 \b 的反面的意思，非单词边界。  \w与\w \W与\W</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id name class data.key\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'#\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// i#d n#a#m#e c#l#a#s#s d#a#t#a.k#e#y</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'id name class data....key\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'#\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  i#d n#a#m#e c#l#a#s#s d#a#t#a.#.#.#.k#e#y</span>\n</code></pre>\n<p><strong>(?=p) 和 (?!p)</strong></p>\n<p>p前面的位置  （后面是p）， (?!p) 后面不是p，即不在p的前面</p>\n<p><strong>案例</strong></p>\n<p>不匹配任何东西的正则   /.^/</p>\n<p><strong>字符串数字分割</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'123456789\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// (?1^)不能是开头   （?=(\d{3}+$)） //不带$ 1,2,345</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"12345678 123456789"</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!\b)(?=(\d{3})+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 12,345,678 123,456,789  (?!\b)|\B</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"1888"</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'.00\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'$ \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// $ 1888.00</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span><span class="token number">1888</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B(?=(\d{3})+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$ "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p><em><strong>货币格式化问题</strong></em></p>\n<p><em><strong>密码校验</strong></em></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 必须数字或字母 </span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">// 必须包含数字 位置匹配，接下来的字符，必须包含个数字。</span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">// 同时包含数字 小写字母</span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])(?=.*[a-z])^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">//  至少两种，用分支结构</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[AZ]))^[0-9A-Za-z]{6,12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 反向思维  不能全部都是数字  </span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]{6,12}$)^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n<span class="token comment">//不能全部都是小写字母 ...</span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9a-zA-Z]{6,12}$</span><span class="token regex-delimiter">/</span></span>\n</code></pre>\n<h4 id="%E5%88%86%E7%BB%84%E5%92%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84">分组和分支结构<a class="anchor" href="#%E5%88%86%E7%BB%84%E5%92%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84">§</a></h4>\n<p>分组  （ab）</p>\n<p>分支结构 （p1|p2）</p>\n<p><strong>提取数据</strong></p>\n<p>分组引用   string.match(regexp)   返回整体匹配 分组</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 匹配</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// ["2020-11-01", "2020", "11", "01", index: 0, input: "2020-11-01", groups: undefined]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>\nregex<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正则操作即可，例如</span>\n<span class="token comment">//regex.exec(string);</span>\n<span class="token comment">//string.match(regex);</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "2017"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "06"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12"</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 替换 排序</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">\'$3-$2-$1\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 01-11-2020</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2020-11-01\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 全局变量</span>\n    <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'* \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// args 是同上的一大长串，RegExp.$1 才是分组</span>\n</code></pre>\n<p>//  RegExp.$1   \'$1\'  横杠转驼峰</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'border-right-width\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-([a-z]{1})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">$</span><span class="token number">1.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// -r, w</span>\n<span class="token comment">// -w, w</span>\n<span class="token comment">// borderWightWidth</span>\n</code></pre>\n<h5 id="%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8">反向引用<a class="anchor" href="#%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8">§</a></h5>\n<p>在正则本身中引用分组，只能引用前面的分组。 \1 \2 \3</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{4}(-|\/|\.)\d{2}(-|\/|\.)\d{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token string">"2020-11-06"</span> <span class="token string">"2020/11/06"</span> <span class="token string">"2020.11.06"</span>  <span class="token string">"2020/11-06"</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{4}(-|\/|\.)\d{2}\1\d{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 后面引用前面的符号，保持一致  \1 \2 \3</span>\n</code></pre>\n<h5 id="%E6%8B%AC%E5%8F%B7%E5%B5%8C%E5%A5%97">括号嵌套<a class="anchor" href="#%E6%8B%AC%E5%8F%B7%E5%B5%8C%E5%A5%97">§</a></h5>\n<p>以左括号为准   /1 /2 /3 /4 第 1 2 3 4 个</p>\n<p>\10 表示第10个分组，匹配 \1 和 0 的话，使用 (?:\1)0 或者 \1(?:0)。</p>\n<p><strong>引用不存在</strong></p>\n<p>引用不存在, \2 就表示 “\2” 对2 进行转义</p>\n<p><strong>分组后面有量词</strong></p>\n<p>分组捕获到的数据是最后一次匹配</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'1234\'</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// ["1234", "4", index: 0, input: "1234", groups: undefined]</span>\n</code></pre>\n<p><strong>非捕获括号</strong></p>\n<p>(?:p) 和 (?:p1|p2|p3)</p>\n<p><strong>案例</strong></p>\n<p>去除字符串首尾空格</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'  1234  \'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>首字母大写</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'hello world hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^|\s)\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'hello world hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\s)\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>驼峰化   （.）表示首字母</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'-hello-world-hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[_-\s](.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'hello-world-hei\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[_-\s]+(.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>中划线化</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'BorderRightWidth\'</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'-$1\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -border-right-width</span>\n</code></pre>\n<p>html转义与反转义</p>\n<p>匹配成对标签   （引用 加 + ）， 反向引用</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 匹配一个开标签，可以使用正则 &lt;[^>]+>，  ^> 表示非></span>\n<span class="token comment">// 匹配一个闭标签，可以使用 &lt;\/[^>]+>，</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;([^>]+)>[\d\D]*&lt;\/\1></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%8E%9F%E7%90%86">回溯法原理<a class="anchor" href="#%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%8E%9F%E7%90%86">§</a></h4>\n<p>回溯法也称试探法（判断回文字符串）（深度优先搜索算法  ）（撞南墙回头）</p>\n<p>没有回溯的匹配</p>\n<p>有回溯的匹配</p>\n<p>贪婪量词  {1,3} 先按照3个去匹配，匹配不到减掉一个，按2去匹配</p>\n<pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'12345\'</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{1,3})(\d{1,3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 多个贪婪量词，前面的优先</span>\n<span class="token punctuation">[</span><span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span> groups<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">]</span>\n</code></pre>\n<p>惰性量词</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{1,3}?)(\d{1,3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => ["1234", "1", "234", index: 0, input: "12345"]</span>\n</code></pre>\n<p>分支结构也是惰性的，比如 /can|candy/，去匹配字符串 &quot;candy&quot;，得到的结果是 &quot;can&quot;</p>\n<h4 id="%E6%AD%A3%E5%88%99%E7%9A%84%E6%8B%86%E5%88%86">正则的拆分<a class="anchor" href="#%E6%AD%A3%E5%88%99%E7%9A%84%E6%8B%86%E5%88%86">§</a></h4>\n<p><strong>结构和操作符</strong></p>\n<p>字符字面量、字符组 []、量词{} ?  * + 、锚 ^ $ \b、分组 () (?:ab)、选择分支 | 、反向引用。</p>\n<p>优先级  转义符  括号/方括号 量词  位置和序列  管道符竖杠</p>\n<p><strong>元字符转义</strong></p>\n<p>^、$、.、*、+、?、|、\、/、(、)、[、]、{、}、=、!、:、- ,     匹配这些字符本身，可以一律转义</p>\n<p>[abc]   /\ [abc]/   /\ [abc ]/    {1,3}  /\ {1,3}/  /\ {1,3\ }/    第一个括号被转义了，第二个括号自然也无法成对，可以不转移</p>\n<p>/(123)/   括号需要前后都转义</p>\n<p>=、!、:、-、, 等符号，只要不在特殊结构中，并不需要转义。</p>\n<p>^、$、.、*、+、?、|、\、/ 等字符，只要不在字符组内，都需要转义的 ，都是正则会用到的符号。</p>\n<p><strong>案例</strong></p>\n<p><em><strong>匹配身份证号</strong></em></p>\n<pre class="language-autoit"><code class="language-autoit"> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span>\d{<span class="token number">15</span>}|\d{<span class="token number">17</span>}<span class="token punctuation">[</span>\dxX<span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token operator">/</span>\n</code></pre>\n<p><em><strong>匹配ip地址（）</strong></em></p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">255.111</span><span class="token punctuation">.</span><span class="token number">111.0</span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">)</span>{<span class="token number">3</span>}<span class="token punctuation">(</span>…<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>内涵五个小分支\n<span class="token operator">/</span><span class="token operator">/</span>  <span class="token number">1</span> <span class="token number">01</span> <span class="token number">001</span> <span class="token punctuation">,</span>  <span class="token number">11</span> <span class="token number">011</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token number">199</span> <span class="token number">200</span> <span class="token number">255</span>\n（<span class="token number">0</span>{<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span>}\d）<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span>\d{<span class="token number">2</span>}<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span>\d{<span class="token number">2</span>}<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">/</span>d<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>string.search(/?/)  判断是否有问号</p>\n<p>拆分支</p>\n<p>不需要使用分组引用和反向引用时，此时可以使用非捕获分组。   （?: ...）</p>\n<h4 id="%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%93%8D%E4%BD%9C">正则表达式的四种操作<a class="anchor" href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%93%8D%E4%BD%9C">§</a></h4>\n<p>验证、</p>\n<p>reg.test rer.exec  string.match()  string.serach()</p>\n<p>切分、</p>\n<p>string.spilt(regexp) // 正则</p>\n<p>提取、</p>\n<p>regex.match  数组</p>\n<p>regex.exec()  数组</p>\n<p>regex.test(string);     RegExp.$1</p>\n<p>regex.search()  RegExp.$1</p>\n<p>regex.replace()   第二个参数可为 function(){}</p>\n<p>替换</p>\n<p>replace</p>\n<pre class="language-autoit"><code class="language-autoit">String#search <span class="token operator">/</span><span class="token operator">/</span> 会把字符串参数修成正则 <span class="token string">"."</span>  <span class="token string">"\\."</span>  <span class="token operator">/</span>\<span class="token punctuation">.</span><span class="token operator">/</span>\nString#split\nString#match <span class="token operator">/</span><span class="token operator">/</span> 会把字符串参数修成正则  没有g返回标准格式，整体<span class="token operator">+</span>分组，下一个目标，目标字符串，有g返回的是所有匹配的内容，没有匹配时，不管有无g，都返回<span class="token keyword">null</span>\nString#replace\nRegExp#test  test 整体匹配时需要使用 <span class="token operator">^</span> 和 $  \nRegExp#exec  能接着上一次匹配的内容继续匹配\n</code></pre>\n<p>使用构造函数需要写\ 反斜杠</p>\n<h2 id="regexp-%E5%AF%B9%E8%B1%A1%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99">RegExp 对象用于存储检索规则<a class="anchor" href="#regexp-%E5%AF%B9%E8%B1%A1%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99">§</a></h2>\n<ul>\n<li>\n<p>test()</p>\n<ul>\n<li>test() 方法检索字符串中的指定值。返回值是 true 或 false。</li>\n</ul>\n</li>\n<li>\n<p>exec()</p>\n<ul>\n<li>exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。</li>\n</ul>\n</li>\n<li>\n<p>compile()</p>\n<ul>\n<li>既可以改变检索规则，也可以添加或删除第二个参数</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F">创建方式<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F">§</a></h2>\n<ul>\n<li>\n<p>字面量语法</p>\n<ul>\n<li>/pattern/attributes</li>\n</ul>\n</li>\n<li>\n<p>创建 RegExp 对象的语法</p>\n<ul>\n<li>\n<p>new RegExp(pattern, attributes);</p>\n<ul>\n<li>参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。</li>\n<li>参数 attributes 是一个可选的字符串，包含属性 &quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;，分别用于指定全局匹配、区分大小写的匹配和多行匹配。</li>\n<li>如果 pattern 是正则表达式，而不是字符串，则必须省略该参数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>实战</p>\n<ul>\n<li>\n<p>把一个字符串中所有的英文,都给删除</p>\n<ul>\n<li>\n<p>制定英文匹配规则</p>\n<ul>\n<li>\n<p>一个或者多个英文字母</p>\n</li>\n<li>\n<p>[A-Za-z]+</p>\n<ul>\n<li>[A-z]+</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>doc = doc.replace(/[A-Za-z]+/g, \'\');</p>\n</li>\n</ul>\n</li>\n<li>\n<p>验证一个字符串是否是电话号码</p>\n<ul>\n<li>\n<p>指定电话号码匹配规则</p>\n<ul>\n<li>首位1, 次位358, 其余9位纯数字</li>\n<li>/^[1][358][0-9]{9}$/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>检索出一个字符串中的电话号码</p>\n<ul>\n<li>\n<p>var reg = /[1][358][0-9]{9}/g;</p>\n</li>\n<li>\n<p>调用方法</p>\n<ul>\n<li>do {</li>\n<li>var result = reg.exec(str);</li>\n<li>console.log(result);</li>\n<li>}while (result != null);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D" }, "\u5B57\u7B26\u5339\u914D"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D" }, "\u4F4D\u7F6E\u5339\u914D"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#regexp-%E5%AF%B9%E8%B1%A1%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99" }, "RegExp \u5BF9\u8C61\u7528\u4E8E\u5B58\u50A8\u68C0\u7D22\u89C4\u5219")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F" }, "\u521B\u5EFA\u65B9\u5F0F")))),
    'author': "dingtt",
    'contributors': [
        "dingtt"
    ],
    'date': "2021-05-02T08:22:31.000Z",
    'updated': null,
    'excerpt': "string.match() regex.test() 字符匹配 两种模糊匹配 横向模糊匹配 {m,n} ，出现次数数量 纵向模糊匹配 [a, b, c] 任一个 字符组 范围表示法 [a-z] ，如果要匹配 - ，需要放到开头或结尾，或加 \\ 排除[ ^ abc] 除 \"a\" \"b\" \"c\" ...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
