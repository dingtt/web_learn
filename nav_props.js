import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "nav.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "nav.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%8E%98%E9%87%91%E6%94%B6%E8%97%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86">掘金收藏知识点整理<a class="anchor" href="#%E6%8E%98%E9%87%91%E6%94%B6%E8%97%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86">§</a></h2>\n<h3 id="2021-%E5%8D%83%E5%AD%97%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F--%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB"><a href="https://juejin.cn/post/6922290178836922381">2021 千字大厂面经 &amp; 个人成长经验分享</a><a class="anchor" href="#2021-%E5%8D%83%E5%AD%97%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F--%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB">§</a></h3>\n<h4 id="%E9%98%BF%E9%87%8C">阿里<a class="anchor" href="#%E9%98%BF%E9%87%8C">§</a></h4>\n<h5 id="vue-%E5%92%8C-react-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB"><strong>vue 和 react 的区别和联系</strong><a class="anchor" href="#vue-%E5%92%8C-react-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB">§</a></h5>\n<p>两者的模板渲染、两者的虚拟 dom、diff 差异（vue2、vue3、react 16）、react fiber 能解决什么问题、vue2 的响应式原理和 vue3 的响应式原理；vue 关于 Proxy 与 Object.defineProperty 的区别；两者的批量更新，还有路由差异、常用的优化手段、怎么进行数据通信、讲点新鲜的内容：新发布的 vue3 有什么特性、最后总结，谈谈两者的如今的生态</p>\n<h5 id="%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化<a class="anchor" href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">§</a></h5>\n<p>项目技术栈的性能优化，比如使用 react 可以讲避免重复渲染的一些手段，比如 electron 可以将如何更接近原生；针对浏览器做的优化（你需要了解浏览器相关原理，比如缓存/存储、代理、SSR 等，针对渲染引擎的工作内容想到的优化，比如解析 css 解析会影响 dom 渲染、合成优化减少回流重绘、web worker、Event Loop 等）；打包工具提供的优化，特指 webpack；针对具体的页面做的优化，比如首页该做什么，首页最新指标；最后讲讲应用场景、我的项目里用到了哪些方法，针对中等项目、大型项目的性能选择。</p>\n<h5 id="%E6%9D%83%E9%99%90%E9%A1%B5%E9%9D%A2">权限页面<a class="anchor" href="#%E6%9D%83%E9%99%90%E9%A1%B5%E9%9D%A2">§</a></h5>\n<p>各个模块按钮权限设计，分角色、分地域设计，localStorage在各浏览器、移动端浏览器size大小是否一致</p>\n<h5 id="%E8%AE%A1%E7%AE%97%E5%A4%9A%E4%B8%AA%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%99%85">计算多个区间交际<a class="anchor" href="#%E8%AE%A1%E7%AE%97%E5%A4%9A%E4%B8%AA%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%99%85">§</a></h5>\n<h5 id="%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E6%80%BB%E5%92%8C%E6%9C%80%E5%A4%A7%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6%E4%BB%A5%E5%8F%8A%E6%9C%80%E5%A4%A7%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0">元素节点数量总和，最大嵌套深度以及最大子元素个数<a class="anchor" href="#%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E6%80%BB%E5%92%8C%E6%9C%80%E5%A4%A7%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6%E4%BB%A5%E5%8F%8A%E6%9C%80%E5%A4%A7%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0">§</a></h5>\n<h5 id="%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAevents%E6%A8%A1%E5%9D%97%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%AE%A2%E9%98%85%E5%88%86%E5%8F%91%E7%A7%BB%E9%99%A4%E5%8A%9F%E8%83%BD">原生代码实现一个Events模块，可以实现自定义事件的订阅、分发、移除功能<a class="anchor" href="#%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAevents%E6%A8%A1%E5%9D%97%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%AE%A2%E9%98%85%E5%88%86%E5%8F%91%E7%A7%BB%E9%99%A4%E5%8A%9F%E8%83%BD">§</a></h5>\n<p><strong>跨端的原理</strong>， taro  uniapp flutter  reactnative  小程序</p>\n<h5 id="%E5%8A%A8%E6%80%81%E8%A1%A8%E5%8D%95%E7%9A%84%E8%BF%90%E7%94%A8%E5%9C%BA%E6%99%AF">动态表单的运用场景<a class="anchor" href="#%E5%8A%A8%E6%80%81%E8%A1%A8%E5%8D%95%E7%9A%84%E8%BF%90%E7%94%A8%E5%9C%BA%E6%99%AF">§</a></h5>\n<h5 id="%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D">移动端适配<a class="anchor" href="#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D">§</a></h5>\n<h4 id="%E5%BF%AB%E6%89%8B">快手<a class="anchor" href="#%E5%BF%AB%E6%89%8B">§</a></h4>\n<h5 id="%E4%B8%80">一<a class="anchor" href="#%E4%B8%80">§</a></h5>\n<ul>\n<li>react与vue技术栈对比，同上</li>\n<li>B端遇到的最复杂的数据结构</li>\n<li>数据展示的优化、数据截取和处理</li>\n<li>实际场景中，哪些地方应用到了堆、链表、多叉树</li>\n<li>GC 相关问题： es6+ ，eventloop 中涉及 GC 的部分。</li>\n<li>省市区拼接查字段，要求 O(n) 内解出</li>\n</ul>\n<p>二</p>\n<ul>\n<li>node 限流算法</li>\n</ul>\n<h4 id="%E7%8C%8E%E8%B1%B9">猎豹<a class="anchor" href="#%E7%8C%8E%E8%B1%B9">§</a></h4>\n<p>一</p>\n<ul>\n<li>在一个未知宽度的父元素内如何创建一个等边正方形</li>\n<li>异步加载 js 会阻塞什么</li>\n<li>如何优化 vue 框架，注意是优化框架</li>\n<li>vue 和 react 的 jsx 使用</li>\n<li>id key 真的能使列表比对更高效吗？举个反例？</li>\n<li>electron 和小程序遇到什么坑？</li>\n<li>说下微信自动化测试</li>\n<li>weakMap 和 Map 的区别，weakMap 原理，为什么能被 GC？</li>\n<li>如何干扰 GC ？</li>\n<li>知道 webpack 中的 devTool 吗？</li>\n<li>如何进行错误定位和数据上报，线上异常的处理</li>\n<li>为什么有时候配置了 webpack caching，chunk 还是更新了？</li>\n<li>讲讲浏览器和 node 的 eventloop</li>\n<li>微任务后面还有哪些？requestAnimationFrame 是怎么调用的？requestAnimationFrame 帧内总是有任务吗？分情况说下。</li>\n<li>帧数怎么计算？</li>\n<li>如何避免数据被 iframe 截获</li>\n</ul>\n<h4 id="%E5%A4%B4%E6%9D%A1">头条<a class="anchor" href="#%E5%A4%B4%E6%9D%A1">§</a></h4>\n<p>一</p>\n<ul>\n<li>webpack 提高构建速度的方式</li>\n<li>loader 输入什么产出什么 ？</li>\n<li>如何写一个 webpack plugin</li>\n<li>AST 的应用</li>\n<li>如何解析一个 html 文本，还是考 AST  （三元的文章，浏览器部分有）</li>\n<li>babel 原理，怎么写 babel 插件</li>\n<li>如何设计一个沙盒 sandbox ？</li>\n<li>小程序的 API 做了什么处理，能够做到全局变量的隐藏，如果是你，怎么设计 ？</li>\n<li>基础题考闭包的，我讲对了思路，结果没做对。</li>\n<li>实现颜色转换 \'rgb(255, 255, 255)\' -&gt; \'#FFFFFF\' 的多种思路。</li>\n<li>提供一个数字 n，生成一组 0~n-1 的整数，打乱顺序组成数组，打乱几次，如何能够看起来平衡，说出你能想到的所有方法。</li>\n<li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">leetcode 239</a></li>\n</ul>\n<p>二</p>\n<ul>\n<li>如何处理一个重大事故 bug</li>\n<li>监控体系</li>\n<li>虚拟 dom 有什么好的地方？ 框架为什么要设计虚拟 dom？</li>\n<li>webpack 的缺点，让你设计一个新的构建打包工具，你会怎么设计？</li>\n<li>在线文档编辑，如何处理两人的冲突，如何展示，考虑各种场景</li>\n<li>excel 文档冲突高级处理，文章冲突呢？是上个问题的深化。</li>\n<li>基础题，直接写出答案：</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">let x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">; </span>\nlet y <span class="token operator">=</span> x<span class="token comment">; </span>\nlet z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">; </span>\ny<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">; </span>\ny <span class="token operator">=</span> z<span class="token comment">; </span>\nz<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token comment">; </span>\nx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> z <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">; </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%B1%B1%E6%9C%88%E6%9C%80%E8%BF%91%E7%9A%84%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93"><a href="https://juejin.cn/post/6922229465468633095">山月最近的面试总结</a><a class="anchor" href="#%E5%B1%B1%E6%9C%88%E6%9C%80%E8%BF%91%E7%9A%84%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93">§</a></h3>\n<h3 id="%E4%B8%A4%E5%B9%B4%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E6%88%90%E5%8A%9F%E9%9D%A2%E8%AF%95%E9%98%BF%E9%87%8Cp6%E6%80%BB%E7%BB%93"><a href="https://juejin.im/post/6844903928442667015">两年工作经验成功面试阿里P6总结</a><a class="anchor" href="#%E4%B8%A4%E5%B9%B4%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E6%88%90%E5%8A%9F%E9%9D%A2%E8%AF%95%E9%98%BF%E9%87%8Cp6%E6%80%BB%E7%BB%93">§</a></h3>\n<h3 id="%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%92%8C%E9%85%B7%E5%AE%B6%E4%B9%90%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93"><a href="https://juejin.cn/post/6844904151013392398">拼多多和酷家乐面试经历总结</a><a class="anchor" href="#%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%92%8C%E9%85%B7%E5%AE%B6%E4%B9%90%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93">§</a></h3>\n<h4 id="%E9%85%B7%E4%B9%90%E5%AE%B6">酷乐家<a class="anchor" href="#%E9%85%B7%E4%B9%90%E5%AE%B6">§</a></h4>\n<ul>\n<li>React事件机制  <a href="https://toutiao.io/posts/28of14w/preview">一文吃透 React 事件机制原理</a></li>\n<li>盒子模型和 <code>box-sizing</code> 属性，判断元素的尺寸和颜色。</li>\n<li>算法题，怎么找到第一个相交的节点。</li>\n</ul>\n<h4 id="%E6%8B%BC%E5%A4%9A%E5%A4%9A">拼多多<a class="anchor" href="#%E6%8B%BC%E5%A4%9A%E5%A4%9A">§</a></h4>\n<ul>\n<li>\n<p>react 16 生命周期有什么改变</p>\n</li>\n<li>\n<p>详细的介绍一下 <code>getDerivedStateFromProps</code></p>\n</li>\n<li>\n<p>class 组件与函数式组件的区别  <a href="https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/">函数式组件与类组件有何不同？</a></p>\n</li>\n<li>\n<p>避免 css 全局污染。</p>\n</li>\n<li>\n<p>webpack 如何实现动态加载  <a href="https://juejin.im/post/6844903888319954952">webpack是如何实现动态导入的</a></p>\n</li>\n<li>\n<p>react 里有动态加载的 api 吗？</p>\n</li>\n<li>\n<blockquote>\n<p>React.lazy</p>\n</blockquote>\n</li>\n<li>\n<p>React.lazy 的原理是啥？</p>\n</li>\n<li>\n<p>webpack 能动态加载 require 引入的模块吗？</p>\n</li>\n<li>\n<blockquote>\n<p>应该是不能的，前面说了，webpack 支持动态导入基本上只能用<code>import()</code> 和<code>require.ensure</code>。</p>\n</blockquote>\n</li>\n<li>\n<p>require 引入的模块 webpack 能做 Tree Shaking 吗？</p>\n</li>\n<li>\n<blockquote>\n<p>不能，Tree Shaking 需要静态分析，只有 ES6 的模块才支持。</p>\n</blockquote>\n</li>\n<li>\n<p>设计一个input 组件需要哪些属性。我说了 value 、defaultValue、onChange</p>\n</li>\n<li>\n<p>value 的类型是什么？</p>\n</li>\n<li>\n<p>onChange 怎么规定 value 的类型</p>\n</li>\n<li>\n<p>写一个 promise 重试函数，可以设置时间间隔和次数。<code>function foo(fn, interval, times) {}</code></p>\n</li>\n<li>\n<p>实现一个 redux</p>\n<blockquote>\n<p>实现 <code>createStore</code> 的功能，关键点发布订阅的功能，以及取消订阅的功能。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id="%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E4%B8%AD%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E5%8F%8A2%E5%B9%B4%E5%89%8D%E7%AB%AF%E8%96%AA%E8%B5%84%E5%AF%B9%E6%AF%94%E9%99%84%E8%B5%A0%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95"><a href="https://juejin.cn/post/6844904181627781128">霖呆呆的中大厂面试记录及2年前端薪资对比(附赠学习方法)</a><a class="anchor" href="#%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E4%B8%AD%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E5%8F%8A2%E5%B9%B4%E5%89%8D%E7%AB%AF%E8%96%AA%E8%B5%84%E5%AF%B9%E6%AF%94%E9%99%84%E8%B5%A0%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95">§</a></h3>\n<h4 id="yy">YY<a class="anchor" href="#yy">§</a></h4>\n<ul>\n<li>HTTP/2对比HTTP1.1</li>\n<li>HTTP请求的什么时候用的对称加密什么时候非对称加密</li>\n<li>如何实现if(a===1&amp;&amp;a===2&amp;&amp;a===3)</li>\n<li>使用jsonp的话会有什么安全问题吗？</li>\n<li>requestAnimationFrame属于宏任务还是微任务</li>\n<li>HTTP/2中的多路复用</li>\n</ul>\n<h4 id="%E9%98%BF%E9%87%8C-1">阿里<a class="anchor" href="#%E9%98%BF%E9%87%8C-1">§</a></h4>\n<h3 id="%E4%B8%80%E5%B9%B4%E5%8D%8A%E7%BB%8F%E9%AA%8C%E5%89%8D%E7%AB%AF%E7%A4%BE%E6%8B%9B7%E5%AE%B6%E5%A4%A7%E5%8E%82%E7%8B%AC%E8%A7%92%E5%85%BD%E5%85%A8%E8%BF%87%E7%BB%8F%E5%8E%86--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87"><a href="https://juejin.cn/post/6844904137495150599">一年半经验前端社招7家大厂&amp;独角兽全过经历 | 掘金技术征文</a><a class="anchor" href="#%E4%B8%80%E5%B9%B4%E5%8D%8A%E7%BB%8F%E9%AA%8C%E5%89%8D%E7%AB%AF%E7%A4%BE%E6%8B%9B7%E5%AE%B6%E5%A4%A7%E5%8E%82%E7%8B%AC%E8%A7%92%E5%85%BD%E5%85%A8%E8%BF%87%E7%BB%8F%E5%8E%86--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87">§</a></h3>\n<h4 id="%E6%8B%BC%E5%A4%9A%E5%A4%9A-1">拼多多<a class="anchor" href="#%E6%8B%BC%E5%A4%9A%E5%A4%9A-1">§</a></h4>\n<p>一</p>\n<ol>\n<li>react16新生命周期，有什么变化【描述】</li>\n</ol>\n<blockquote>\n<p>两个static、一个didcatch捕获错误的、一个getsnapshot</p>\n</blockquote>\n<ol>\n<li>react16之前的那些不好的生命周期怎么过度到react16的新生命周期【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>getDriverStateFromProps替代componentWillReceiveProps，加上逻辑对比上次state和props来决定state。willupdate换成getSnapshotBeforeUpdate，willmount直接写成初始state（react16的state不先写出来是null，你需要先在class组件里面写一下state = {...}）</p>\n</blockquote>\n<ol>\n<li>componentWillReceiveProps用到了this，getDriverStateFromProps也要用，怎么办【伪代码】</li>\n</ol>\n<blockquote>\n<p>把this.xxx存到state里面，第二个参数是state，里面有xxx（有点挫，懂的人应该都有同样的感受吧，如果是函数组件，一个useRef保存一下即可）。另外的方法，如果和内部变量无关，把它抠到class组件外面去2</p>\n</blockquote>\n<ol>\n<li>ssr怎么实现，你们怎么做【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>将动态渲染逻辑做到后端去，并把最终html结果直接返回。我们这边是数据动静分离+部分ssr直出，重要的数据ssr，比较慢的接口还是放前端</p>\n</blockquote>\n<ol>\n<li>你们有没有统一构建的cli，怎么实现【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>基于react全家桶，ts、eslint、埋点上报、sw都可配置，根据配置生成代码模版，开箱即用</p>\n</blockquote>\n<ol>\n<li>你们项目有ci吗，怎么做，提交的时候会做什么事情【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>通过接入公司内部某ci，配置yaml文件，每次监听git hook，并作出对应的行为如安装、lint、部署、搬运、生成change log等等。提交的时候，检查lint、修复autofixable的问题，存在修不了的问题报错，提交失败</p>\n</blockquote>\n<ol>\n<li>e2e测试、自动化测试【描述】</li>\n</ol>\n<blockquote>\n<p>概念性问题，网上容易搜到。端对端测试，模拟用户行为对网页进行全流程测试；自动化测试，包含很多了，范围更高一个维度</p>\n</blockquote>\n<ol>\n<li>git rebase什么作用【描述】</li>\n</ol>\n<blockquote>\n<p>概念性问题</p>\n</blockquote>\n<p>二</p>\n<ol>\n<li><strong>实现一个redux【编程】</strong></li>\n</ol>\n<blockquote>\n<p>还是那10几行经典redux，途中会顺便问一下函数式编程、纯函数、副作用这些，网上搜“函数式编程”即可知道这些概念了</p>\n</blockquote>\n<ol>\n<li><strong>如果是用ts写，怎么写【编程】</strong></li>\n</ol>\n<blockquote>\n<p>改成ts版本，如果比较熟悉redux+ts的，很快写出来。如果不太熟，熟悉泛型也可以根据表现，很快写出近似的。我说我没有ide提示，不能保证裸写没问题。面试官说没事，只是看看你ts熟悉程度</p>\n</blockquote>\n<h4 id="%E8%99%BE%E7%9A%AE">虾皮<a class="anchor" href="#%E8%99%BE%E7%9A%AE">§</a></h4>\n<ol>\n<li>各种情况下的proto指向，多道问答题【描述】</li>\n</ol>\n<blockquote>\n<p>有一个class A {},问他的实例a的<code>__proto__</code>和<code>A.prototype</code>的关系，<code>a.__proto__.__proto__</code>是什么，<code>a.__proto__.__proto__.__proto__</code>是什么。然后再问普通对象、function的。这里需要注意一下<code>Function.prototype === Function.__proto__</code>和a的三次proto是null。一开始就问三次取a的proto，其实潜意识是null的，但刚刚下班赶车回家，心跳都没有恢复正常就进入面试，没什么状态，“em～”了10秒钟，面试官说：哎，你别打开控制台喔，别偷偷的运行哦。我说这肯定是原型链终点了，我想想，确认一下——null！犹豫就会败北，开门一波丢脸</p>\n</blockquote>\n<ol>\n<li>react性能优化【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>scu生命周期、memo；usememo &amp; usecallback记住一些值不用重新计算；虚拟列表；immutable+scu/memo；原生js；（这块聊了很久了）</p>\n</blockquote>\n<ol>\n<li>长列表优化，多种方案及对比【举例】</li>\n</ol>\n<blockquote>\n<p>虚拟列表、intersectionobserver、监听滚动长列表+raf（经验之谈，聊了很久）</p>\n</blockquote>\n<ol>\n<li>diff算法、key作用，不要key会怎样【描述】</li>\n</ol>\n<blockquote>\n<p>树diff、组件diff、元素diff；key可以原地复用，没有key无脑会更新（此时你可以发现，index做key其实会形同虚设）</p>\n</blockquote>\n<ol>\n<li>react的usememo原理【描述】</li>\n</ol>\n<blockquote>\n<p>闭包、缓存、memorize</p>\n</blockquote>\n<ol>\n<li>编程题：对象扁平化【编程】(30min)  pick</li>\n</ol>\n<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  <span class="token string">"a"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"b"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">"c"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"d"</span><span class="token operator">:</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"aa"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token string">"c"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token number">2</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span> <span class="token arrow operator">=></span>\n<span class="token punctuation">{</span> <span class="token string">\'a.b.c.d\'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> aa<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">\'c[0]\'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'c[1]\'</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n</code></pre>\n<ol>\n<li>为什么浏览器不用cjs而用了esm【举例】</li>\n</ol>\n<blockquote>\n<p>个人观点类问题。cjs都是require系统本地文件，时间不用考虑。如果在浏览器使用类似cjs的require，实现过程无非就是创建script标签、发请求。这个发请求的过程就无法保证同步了，你要写成<code>callback/promise/async-await</code>，这样子写页面门槛又高了</p>\n</blockquote>\n<h3 id="%E4%BD%9C%E4%B8%9A%E5%B8%AE">作业帮<a class="anchor" href="#%E4%BD%9C%E4%B8%9A%E5%B8%AE">§</a></h3>\n<ul>\n<li>settimeout实现interval(注意和普通的要无差别体验)</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"><span class="token comment">;(() => {</span>\n  <span class="token keyword">const</span> list <span class="token operator">=</span> new <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n  function <span class="token function">myInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> ms<span class="token punctuation">)</span> {\n    <span class="token keyword">const</span> ref <span class="token operator">=</span> {}<span class="token comment">;</span>\n    <span class="token keyword">const</span> exec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n      return <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        ref<span class="token punctuation">.</span>current <span class="token operator">=</span> timer<span class="token comment">;</span>\n      }<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token comment">;</span>\n    }<span class="token comment">;</span>\n    ref<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token comment">;</span>\n    return ref<span class="token comment">;</span>\n  }\n\n  function <span class="token function">myClearInterval</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> {\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token comment">;</span>\n    list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n  window<span class="token punctuation">.</span>myInterval <span class="token operator">=</span> myInterval<span class="token comment">;</span>\n  window<span class="token punctuation">.</span>myClearInterval <span class="token operator">=</span> myClearInterval<span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>节点是不是属于某个节点下(当时我写了一个不带parentid的版本，要自己一层层搜。如果带parentid的，就简单很多了，测试用例你自己写，他们也没有给出)</li>\n<li>合并数组[\'a\', \'b\'], [1, 2, 3] =&gt; [\'a\', 1, \'b\', 2, 3] (送分)</li>\n<li>一堆数字字符串组成最大数是多少[50, 2, 5, 9] =&gt; 95502 (字典序+贪心)</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">getMaxNumber</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> {\n  return arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">+</span>`${acc}${cur}`<span class="token punctuation">,</span> <span class="token operator">+</span>`${cur}${acc}`<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n}\n</code></pre>\n<ul>\n<li>如何判断链表有没有环，快慢指针。</li>\n</ul>\n<h4 id="%E7%8C%BF%E8%BE%85%E5%AF%BC">猿辅导<a class="anchor" href="#%E7%8C%BF%E8%BE%85%E5%AF%BC">§</a></h4>\n<p>一</p>\n<ol>\n<li>react生命周期介绍，怎么执行。说一下下面的组件生命周期执行顺序【描述】有<code>&lt;A&gt; &lt;B /&gt; &lt;/A&gt;</code>这样的组件：</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">a<span class="token punctuation">.</span>willMount <span class="token number">3</span>\nb<span class="token punctuation">.</span>willMount <span class="token number">1</span>\na<span class="token punctuation">.</span>didMount <span class="token number">4</span>\nb<span class="token punctuation">.</span>didMount <span class="token number">2</span>\n复制代码\n</code></pre>\n<blockquote>\n<p>react16前是递归的，是这个顺序。react16后改成fiber架构，是反过来的了，没有像栈那样fifo</p>\n</blockquote>\n<ol>\n<li>redux vs context，为什么不用context【描述】</li>\n</ol>\n<blockquote>\n<p>随意修改，莫名其妙的bug。redux将这个过程规范化，单向数据流</p>\n</blockquote>\n<ol>\n<li>react 17要做什么规划，concurrent mode【描述】</li>\n</ol>\n<blockquote>\n<p>concurrent mode、去掉危险的生命周期。concurrent mode是react重点面试题了，基于requestidlecallback实现(考虑兼容性，官方自己实现了一个)——浏览器空闲的时候做事情</p>\n</blockquote>\n<ol>\n<li>SSR，打开你们的SSR页面看看，具体逻辑、实现方式【描述】</li>\n</ol>\n<blockquote>\n<p>发了一个我们的链接给他，并描述了流程</p>\n</blockquote>\n<ol>\n<li><code>promise.then(f1, f2)``和promise.then(f1).catch(f2)</code>区别【描述】</li>\n</ol>\n<blockquote>\n<p>捕获全部上游和捕获本次then</p>\n</blockquote>\n<ol>\n<li>() =&gt; {} vs function () {}【描述】</li>\n</ol>\n<blockquote>\n<p>送分。无argument、this是定义那一层、箭头可以指向返回值</p>\n</blockquote>\n<ol>\n<li>说输出【描述】</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> obj <span class="token operator">=</span> {\n  f1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> { console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span> }<span class="token punctuation">,</span>\n}<span class="token comment">;</span>\nobj<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">global</span>\nobj<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> obj\nnew obj<span class="token punctuation">.</span>f1<span class="token comment">; // instance</span>\nnew obj<span class="token punctuation">.</span>f2<span class="token comment">; // instance</span>\n复制代码\n</code></pre>\n<ol>\n<li>用setTimeout实现setInterval【编程】</li>\n</ol>\n<blockquote>\n<p>又问到了，频率有点高</p>\n</blockquote>\n<ol>\n<li>Node { value: number; children: Node[] }，算出树每一层节点和，输出数组【编程】</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">     <span class="token number">2</span>         <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span>\n\n<span class="token number">2</span>      <span class="token number">3</span>      <span class="token number">5</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span>\n\n<span class="token number">1</span>   <span class="token number">2</span>  <span class="token number">3</span>   <span class="token number">4</span>   <span class="token number">7</span> <span class="token number">8</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">25</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> 每一层的和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>；\n复制代码\n</code></pre>\n<p>使用bfs可秒杀</p>\n<p>二</p>\n<p>1.节流、和防抖的区别，均匀的节流怎么实现【编程】</p>\n<blockquote>\n<p>一下子写了最简单的出来，然后他要各种改需求，加功能。要支持配置马上执行、要防抖节流两个结合起来、要均匀</p>\n</blockquote>\n<ol>\n<li>http缓存、强制缓存里面expire和cache-control作用，什么坑【描述】</li>\n</ol>\n<blockquote>\n<p>重点题，频率很高。expire需要保证时间准确</p>\n</blockquote>\n<ol>\n<li>前端路由实现。history什么坑，怎么解决【描述】</li>\n</ol>\n<blockquote>\n<p>哈希和history，监听事件、切换元素。history会导致一些新路径404，nginx重定向到首页走js逻辑</p>\n</blockquote>\n<ol>\n<li>\n<p>var、let、const区别，() =&gt; {} vs function () {}【描述】</p>\n</li>\n<li>\n<p>ES5 实现 B 继承 A【编程】</p>\n</li>\n</ol>\n<blockquote>\n<p>为了表现，肯定是直接写寄生组合继承啦</p>\n</blockquote>\n<ul>\n<li>rbac</li>\n<li>http3的quic</li>\n<li>数组和链表优点缺点</li>\n</ul>\n<p>商汤</p>\n<ol>\n<li>websocket和http协议区别【描述】</li>\n</ol>\n<blockquote>\n<p>http无状态、被动；ws一次握手，知道状态，可以双向通信</p>\n</blockquote>\n<ol>\n<li>完全不同的域名共享localstorage的方案【描述】</li>\n</ol>\n<blockquote>\n<p>公共服务器双工通信(比较简单暴力)、嵌套iframe并双向通信(只要一个变了，马上通知另一方，保证他们的localstorage一模一样)</p>\n</blockquote>\n<ul>\n<li>数据mock的时候，如果有鉴权逻辑怎么办。</li>\n<li>settimeout(a, 3000); ...同步代码执行很久 settimeout(b, 1000)多少种情况，临界值【描述】【举例】</li>\n</ul>\n<blockquote>\n<p>同步代码执行时间 &lt;= 3000，顺序。&gt; 3000先b再a</p>\n</blockquote>\n<ol>\n<li>浏览器底层对线程冲突的实现【描述】</li>\n</ol>\n<h4 id="%E5%BF%AB%E6%89%8B-1">快手<a class="anchor" href="#%E5%BF%AB%E6%89%8B-1">§</a></h4>\n<p>一</p>\n<ul>\n<li>react升到16，有什么坑需要解决【描述】</li>\n<li>16后性能好多少，测过吗，你怎么测的。顺便问一下各种测速上报【描述】</li>\n<li>为什么16的性能好，fiber流程是怎样的【描述】</li>\n<li>为什么两个will生命周期要被标记为danger【描述】</li>\n<li>用了react的哪些新特性，带来什么收益【举例】</li>\n<li>浏览器http缓存那一套【描述】</li>\n<li>from memory cache、from dist cache什么区别，性能对比【描述】</li>\n<li>根据什么而选from memory cache、from dist cache这两种缓存方案【描述】</li>\n<li>service worker怎么理解【举例】</li>\n<li>输出一个字符串全排列【编程】</li>\n</ul>\n<p>二</p>\n<ul>\n<li>项目深挖，反问一些问题【描述】【举例】</li>\n<li>react的setstate过程【描述】</li>\n<li>说一下几种情况的setstate的输出，为什么【描述】</li>\n<li>react的合成事件【描述】</li>\n<li>收到新state怎么更新，发生了什么事情【描述】</li>\n<li>ssr太久，你觉得什么原因导致【举例】</li>\n<li>ssr优化措施【举例】</li>\n<li>react的ssr和传统的模版引擎渲染对比【描述】</li>\n<li>ssr兜底容灾措施、降级措施【举例】</li>\n<li>如何选择csr还是ssr，设计一套方案切换，让尽量多的用户得到最好的体验【举例】</li>\n<li>有一个请求函数request，封装一下这个函数，使得多个相同的请求过来的时候不发请求，直接读取第一个的结果【编程】</li>\n<li>有一个排序数组，返回第一个比目标数字小的数，要求log(n)【编程】</li>\n</ul>\n<p>三</p>\n<ul>\n<li>4个砝码，一个天平，问能称出多少种重量（砝码可以两边都放，砝码重量自己随便定）【写出运算过程】</li>\n</ul>\n<h3 id="%E8%9A%82%E8%9A%81%E5%AD%97%E8%8A%82%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93"><a href="https://juejin.cn/post/6844904161830502407">蚂蚁、字节、滴滴面试经历总结</a><a class="anchor" href="#%E8%9A%82%E8%9A%81%E5%AD%97%E8%8A%82%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93">§</a></h3>\n<p>字节</p>\n<p><strong>一</strong></p>\n<blockquote>\n<p>webpack 如何做性能优化</p>\n</blockquote>\n<p>webpack 做性能优化主要是考虑打包体积和打包速度。</p>\n<p>体积分析用 <code>webpack-bundle-analyzer</code> 插件，速度分析用：<code>speed-measure-webpack-plugin</code> 插件。</p>\n<blockquote>\n<p>笔试题：写一个处理加法可能产生精度的函数，比如 0.1 + 0.2 = 0.3</p>\n</blockquote>\n<p>思路：对于浮点数在底层处理是有问题的，所以目的就是想办法将所以的浮点数转化为整数进行处理，同时乘以一个倍数(A)，然后加起来后再除以这个倍数(A)，这个倍数应该是两个数中最小的那个数的倍数，比如 0.1 + 0.02 ,那么应该同时乘以 100，变为 10 + 2，然后再将值除以 100。</p>\n<blockquote>\n<p>1000000000 + 1000000000 允许返回字符串 处理大数</p>\n</blockquote>\n<p>大数问题就是通过字符串来处理，从后往前加，然后处理进位的问题。</p>\n<p><strong>二</strong></p>\n<ul>\n<li>写一个 es6 的继承过程</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 这个是要实现的方法</span>\ncreateClass <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">sons<span class="token punctuation">,</span> <span class="token keyword">super</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// TODO</span>\n  <span class="token keyword control-flow">return</span> fn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 这是个 es6 的一个例子，要实现 extends 的功能。</span>\n<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>\n  <span class="token function">cons</span> <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n    <span class="token comment">// xxxxx</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>写一个大数相乘的解决方案。传两个字符串进来，返回一个字符串</li>\n</ul>\n<p>这道题跟一面的时候思路差不多，只是进位的时候不一定是 1。</p>\n<p><strong>三</strong></p>\n<p>算法题:<a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">leetcode-cn.com/problems/bu…</a></p>\n<h4 id="%E6%BB%B4%E6%BB%B4">滴滴<a class="anchor" href="#%E6%BB%B4%E6%BB%B4">§</a></h4>\n<ul>\n<li>webpack 原理</li>\n</ul>\n<p>大致就是：</p>\n<ol>\n<li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li>\n<li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li>\n<li>确定入口：根据配置中的 entry 找出所有的入口文件；</li>\n<li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li>\n<li>完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li>\n<li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li>\n<li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li>\n</ol>\n<p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>\n<ul>\n<li>babel 原理</li>\n</ul>\n<p>babel的转译过程分为三个阶段：<strong>parsing、transforming、generating</strong>，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：</p>\n<ol>\n<li>ES6代码输入</li>\n<li>babylon 进行解析得到 AST</li>\n<li>plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树</li>\n<li>用 babel-generator 通过 AST 树生成 ES5 代码</li>\n</ol>\n<p><strong>二</strong></p>\n<ul>\n<li>redux 做状态管理和发布订阅模式有什么区别</li>\n</ul>\n<p>redux 其实也是一个发布订阅，但是 redux 可以做到数据的可预测和可回溯。</p>\n<ul>\n<li>react-redux 的原理，是怎么跟 react 关联起来的</li>\n</ul>\n<p>react-redux 的核心组件只有两个，Provider 和 connect，Provider 存放 Redux 里 store 的数据到 context 里，通过 connect 从 context 拿数据，通过 props 传递给 connect 所包裹的组件。</p>\n<ul>\n<li>多端原理</li>\n<li>babel插件  通过代码生成文档的 babel 插件</li>\n<li>AST</li>\n</ul>\n<h4 id="%E8%9A%82%E8%9A%81">蚂蚁<a class="anchor" href="#%E8%9A%82%E8%9A%81">§</a></h4>\n<p><strong>一</strong></p>\n<ul>\n<li>\n<p>hooks原理</p>\n</li>\n<li>\n<p>vue3 的 类似 hooks 的原理是怎么样的</p>\n</li>\n<li>\n<p>组件升级怎么让使用这个组件的人都知道。</p>\n</li>\n</ul>\n<h3 id="%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95128%E9%A2%98%E6%B1%87%E6%80%BB%E5%90%AB%E8%B6%85%E8%AF%A6%E7%BB%86%E7%AD%94%E6%A1%88--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87"><a href="https://juejin.cn/post/6844904151369908232">霖呆呆的近期面试128题汇总(含超详细答案) | 掘金技术征文</a><a class="anchor" href="#%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95128%E9%A2%98%E6%B1%87%E6%80%BB%E5%90%AB%E8%B6%85%E8%AF%A6%E7%BB%86%E7%AD%94%E6%A1%88--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87">§</a></h3>\n<h4 id="%E5%A4%9Ajs%E5%9F%BA%E7%A1%80%E9%A2%98"><strong>多JS基础题</strong><a class="anchor" href="#%E5%A4%9Ajs%E5%9F%BA%E7%A1%80%E9%A2%98">§</a></h4>\n<ul>\n<li>\n<p>如何解决a标点击后hover事件失效的问题</p>\n<p>只需要记住<code>LoVe HAte</code>原则就可以了：link→visited→hover→active</p>\n</li>\n<li>\n<p>点击一个input依次触发的事件</p>\n<p>\'onmouseenter\' \'onmousedown\' \'onfocus\' \'onclick\'</p>\n</li>\n<li>\n<p>react的控制组件和非控制组件</p>\n</li>\n<li>\n<p>原生的自定义事件 customEvent</p>\n</li>\n<li>\n<p>冒泡和捕获的具体过程</p>\n</li>\n<li>\n<p>所有的事件都有冒泡吗</p>\n</li>\n<li>\n<p>typeof为什么对null错误的显示</p>\n<p>这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object</p>\n</li>\n<li>\n<p>手写JSONP ？？？</p>\n</li>\n<li>\n<p>CommonJS和ES6模块的区别   <em><strong>多几条</strong></em></p>\n<p><a href="https://juejin.im/post/6844904145443356680">一篇不是标题党的CommonJS和ES6模块规范讲解</a></p>\n</li>\n</ul>\n<h3 id="75-%E9%81%93-javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-25-%E4%B8%87%E5%AD%97%E5%88%B7%E4%B8%AA%E5%A4%9F"><a href="http://mp.weixin.qq.com/s?__biz=MzI3ODU4MzQ1MA==&amp;mid=2247487859&amp;idx=1&amp;sn=8b639a364d1d71f26853537f28f299d1&amp;scene=21#wechat_redirect">75 道 JavaScript 面试题， 2.5 万字刷个够</a><a class="anchor" href="#75-%E9%81%93-javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-25-%E4%B8%87%E5%AD%97%E5%88%B7%E4%B8%AA%E5%A4%9F">§</a></h3>\n<ul>\n<li>\n<p>undefined与null区别</p>\n<p>同属基本类型，布尔值转换；undefined，未指定特定值的变量的默认值，没有显示返回的函数，对象中不存在的属性。null，不代表任何值的值，已明确定义给变量的值， == 与=== 结果</p>\n</li>\n<li>\n<p>&amp;&amp;能做什么</p>\n<p>逻辑与，找到第一个虚值表达式并返回它，如果没有找到任何虚值表达式，则返回最后一个真值表达式。它采用短路来防止不必要的工作。</p>\n</li>\n<li>\n<p>|| 能做什么</p>\n<p>逻辑或，在其操作数中找到第一个真值表达式并返回它。用于参数默认值。</p>\n</li>\n<li>\n<p><code>+</code>是将字符串转换为数字的最快方法，因为如果值已经是数字，它不会执行任何操作。</p>\n</li>\n<li>\n<p><code>event.currentTarget</code>是附加事件处理程序的元素。</p>\n</li>\n<li>\n<p><code>toPrimitive</code>首先在对象中使用<code>valueOf</code>方法，然后使用<code>toString</code>方法来获取该对象的原始值</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>\'1,2\'</th>\n<th>[1,2]</th>\n<th>== true</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\'[object Object]\'</td>\n<td>{}</td>\n<td>== true</td>\n</tr>\n</tbody>\n</table></div>\n</li>\n</ul>\n<h3 id="chocolate1999"><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues">Chocolate1999</a><a class="anchor" href="#chocolate1999">§</a></h3>\n<p>class定义类和function定义类的区别</p>\n<p>点击事件是宏任务还是微任务</p>\n<p>BOM和DOM的区别,BOM的方法讲完整一点</p>\n<p><a href="https://segmentfault.com/a/1190000021231422">全局变量为什么不会被垃圾处理</a></p>\n<p>怎么判断一个元素有没有被引用</p>\n<p>内存泄漏</p>\n<p>promise中不声明async，可以用await吗</p>\n<p>promise的api：如果有10个调用请求，那么哪个api能查到最快调用的请求</p>\n<p>阻塞、非阻塞和异步同步是对应的吗？一样的吗？</p>\n<p>事件机制，捕获和冒泡，如何阻止冒泡？</p>\n<p>fetch的使用，考察通信是否了解</p>\n<p>let const, babel 中的实现</p>\n<p>怎么判断一个空数组</p>\n<p>怎么创建一个Promise，参数是什么，怎么中断一个promise，除了抛异常和return new Promise()还有什么</p>\n<p>cookie的几个字段的功能  expires  httponly samesite</p>\n<p>js怎么删除cookie</p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/194">try…catch…中如果异步代码出错怎么办？</a></p>\n<p>ES5实现继承的方法，构造继承，原型链继承，组合继承，寄生组合继承</p>\n<p><a href="https://juejin.cn/post/6881894768117284878">如何实现私有的方法/属性</a></p>\n<p>js溢出怎么解决</p>\n<p><a href="https://juejin.cn/post/6906106922605543432">callback的缺点，Promise的状态有哪些，generator，async和await</a></p>\n<p><a href="https://juejin.cn/post/6881241853258104839">require和import的区别？AMD、CMD、ES6</a></p>\n<p>手动实现一个ajax，这样实现的方法叫什么</p>\n<p>ajax有哪些状态，每个状态分别对应什么</p>\n<p>async是什么的语法糖，generator怎么用</p>\n<p>构造继承里 Function.call(argu)里传进来的参数argu是什么</p>\n<p>bind(object).bind(windows) 后的this指向</p>\n<p>链表的实现</p>\n<p>深拷贝/浅拷贝</p>\n<p>如果要同时启动两个异步任务，怎么做</p>\n<p><a href="https://www.zhangxinxu.com/wordpress/2018/04/known-es6-symbol-function/">简单说一下es6的symbol属性</a></p>\n<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this指向</a></p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/174">new操作符之后的操作</a></p>\n<p><a href="https://juejin.cn/post/6844903618999500808">js里堆和栈的区别</a></p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/172">setTimeout第二个参数为0时和匿名自执行函数区别</a></p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/218">问如何改造，才能实现打印0 1 2 3，闭包可以吗，然后用闭包实现一下这个效果</a></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// resolve(\'123\')</span>\n    <span class="token comment">// return new Error(\'message\')</span>\n   <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'before error\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'fater error\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>420</p>\n<p>hash history模式区别</p>\n<p>各种传递引用   页面  ES6</p>\n<p>如何深拷贝  递归</p>\n<p>判断对象在数组中  findindex  find</p>\n<p>性能优化功能</p>\n<p>按钮延迟分析</p>\n<p>锚点分析工具</p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%8E%98%E9%87%91%E6%94%B6%E8%97%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86">掘金收藏知识点整理<a class="anchor" href="#%E6%8E%98%E9%87%91%E6%94%B6%E8%97%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86">§</a></h2>\n<h3 id="2021-%E5%8D%83%E5%AD%97%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F--%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB"><a href="https://juejin.cn/post/6922290178836922381">2021 千字大厂面经 &amp; 个人成长经验分享</a><a class="anchor" href="#2021-%E5%8D%83%E5%AD%97%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F--%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB">§</a></h3>\n<h4 id="%E9%98%BF%E9%87%8C">阿里<a class="anchor" href="#%E9%98%BF%E9%87%8C">§</a></h4>\n<h5 id="vue-%E5%92%8C-react-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB"><strong>vue 和 react 的区别和联系</strong><a class="anchor" href="#vue-%E5%92%8C-react-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB">§</a></h5>\n<p>两者的模板渲染、两者的虚拟 dom、diff 差异（vue2、vue3、react 16）、react fiber 能解决什么问题、vue2 的响应式原理和 vue3 的响应式原理；vue 关于 Proxy 与 Object.defineProperty 的区别；两者的批量更新，还有路由差异、常用的优化手段、怎么进行数据通信、讲点新鲜的内容：新发布的 vue3 有什么特性、最后总结，谈谈两者的如今的生态</p>\n<h5 id="%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化<a class="anchor" href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">§</a></h5>\n<p>项目技术栈的性能优化，比如使用 react 可以讲避免重复渲染的一些手段，比如 electron 可以将如何更接近原生；针对浏览器做的优化（你需要了解浏览器相关原理，比如缓存/存储、代理、SSR 等，针对渲染引擎的工作内容想到的优化，比如解析 css 解析会影响 dom 渲染、合成优化减少回流重绘、web worker、Event Loop 等）；打包工具提供的优化，特指 webpack；针对具体的页面做的优化，比如首页该做什么，首页最新指标；最后讲讲应用场景、我的项目里用到了哪些方法，针对中等项目、大型项目的性能选择。</p>\n<h5 id="%E6%9D%83%E9%99%90%E9%A1%B5%E9%9D%A2">权限页面<a class="anchor" href="#%E6%9D%83%E9%99%90%E9%A1%B5%E9%9D%A2">§</a></h5>\n<p>各个模块按钮权限设计，分角色、分地域设计，localStorage在各浏览器、移动端浏览器size大小是否一致</p>\n<h5 id="%E8%AE%A1%E7%AE%97%E5%A4%9A%E4%B8%AA%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%99%85">计算多个区间交际<a class="anchor" href="#%E8%AE%A1%E7%AE%97%E5%A4%9A%E4%B8%AA%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%99%85">§</a></h5>\n<h5 id="%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E6%80%BB%E5%92%8C%E6%9C%80%E5%A4%A7%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6%E4%BB%A5%E5%8F%8A%E6%9C%80%E5%A4%A7%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0">元素节点数量总和，最大嵌套深度以及最大子元素个数<a class="anchor" href="#%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E6%80%BB%E5%92%8C%E6%9C%80%E5%A4%A7%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6%E4%BB%A5%E5%8F%8A%E6%9C%80%E5%A4%A7%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0">§</a></h5>\n<h5 id="%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAevents%E6%A8%A1%E5%9D%97%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%AE%A2%E9%98%85%E5%88%86%E5%8F%91%E7%A7%BB%E9%99%A4%E5%8A%9F%E8%83%BD">原生代码实现一个Events模块，可以实现自定义事件的订阅、分发、移除功能<a class="anchor" href="#%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAevents%E6%A8%A1%E5%9D%97%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%AE%A2%E9%98%85%E5%88%86%E5%8F%91%E7%A7%BB%E9%99%A4%E5%8A%9F%E8%83%BD">§</a></h5>\n<p><strong>跨端的原理</strong>， taro  uniapp flutter  reactnative  小程序</p>\n<h5 id="%E5%8A%A8%E6%80%81%E8%A1%A8%E5%8D%95%E7%9A%84%E8%BF%90%E7%94%A8%E5%9C%BA%E6%99%AF">动态表单的运用场景<a class="anchor" href="#%E5%8A%A8%E6%80%81%E8%A1%A8%E5%8D%95%E7%9A%84%E8%BF%90%E7%94%A8%E5%9C%BA%E6%99%AF">§</a></h5>\n<h5 id="%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D">移动端适配<a class="anchor" href="#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D">§</a></h5>\n<h4 id="%E5%BF%AB%E6%89%8B">快手<a class="anchor" href="#%E5%BF%AB%E6%89%8B">§</a></h4>\n<h5 id="%E4%B8%80">一<a class="anchor" href="#%E4%B8%80">§</a></h5>\n<ul>\n<li>react与vue技术栈对比，同上</li>\n<li>B端遇到的最复杂的数据结构</li>\n<li>数据展示的优化、数据截取和处理</li>\n<li>实际场景中，哪些地方应用到了堆、链表、多叉树</li>\n<li>GC 相关问题： es6+ ，eventloop 中涉及 GC 的部分。</li>\n<li>省市区拼接查字段，要求 O(n) 内解出</li>\n</ul>\n<p>二</p>\n<ul>\n<li>node 限流算法</li>\n</ul>\n<h4 id="%E7%8C%8E%E8%B1%B9">猎豹<a class="anchor" href="#%E7%8C%8E%E8%B1%B9">§</a></h4>\n<p>一</p>\n<ul>\n<li>在一个未知宽度的父元素内如何创建一个等边正方形</li>\n<li>异步加载 js 会阻塞什么</li>\n<li>如何优化 vue 框架，注意是优化框架</li>\n<li>vue 和 react 的 jsx 使用</li>\n<li>id key 真的能使列表比对更高效吗？举个反例？</li>\n<li>electron 和小程序遇到什么坑？</li>\n<li>说下微信自动化测试</li>\n<li>weakMap 和 Map 的区别，weakMap 原理，为什么能被 GC？</li>\n<li>如何干扰 GC ？</li>\n<li>知道 webpack 中的 devTool 吗？</li>\n<li>如何进行错误定位和数据上报，线上异常的处理</li>\n<li>为什么有时候配置了 webpack caching，chunk 还是更新了？</li>\n<li>讲讲浏览器和 node 的 eventloop</li>\n<li>微任务后面还有哪些？requestAnimationFrame 是怎么调用的？requestAnimationFrame 帧内总是有任务吗？分情况说下。</li>\n<li>帧数怎么计算？</li>\n<li>如何避免数据被 iframe 截获</li>\n</ul>\n<h4 id="%E5%A4%B4%E6%9D%A1">头条<a class="anchor" href="#%E5%A4%B4%E6%9D%A1">§</a></h4>\n<p>一</p>\n<ul>\n<li>webpack 提高构建速度的方式</li>\n<li>loader 输入什么产出什么 ？</li>\n<li>如何写一个 webpack plugin</li>\n<li>AST 的应用</li>\n<li>如何解析一个 html 文本，还是考 AST  （三元的文章，浏览器部分有）</li>\n<li>babel 原理，怎么写 babel 插件</li>\n<li>如何设计一个沙盒 sandbox ？</li>\n<li>小程序的 API 做了什么处理，能够做到全局变量的隐藏，如果是你，怎么设计 ？</li>\n<li>基础题考闭包的，我讲对了思路，结果没做对。</li>\n<li>实现颜色转换 \'rgb(255, 255, 255)\' -&gt; \'#FFFFFF\' 的多种思路。</li>\n<li>提供一个数字 n，生成一组 0~n-1 的整数，打乱顺序组成数组，打乱几次，如何能够看起来平衡，说出你能想到的所有方法。</li>\n<li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">leetcode 239</a></li>\n</ul>\n<p>二</p>\n<ul>\n<li>如何处理一个重大事故 bug</li>\n<li>监控体系</li>\n<li>虚拟 dom 有什么好的地方？ 框架为什么要设计虚拟 dom？</li>\n<li>webpack 的缺点，让你设计一个新的构建打包工具，你会怎么设计？</li>\n<li>在线文档编辑，如何处理两人的冲突，如何展示，考虑各种场景</li>\n<li>excel 文档冲突高级处理，文章冲突呢？是上个问题的深化。</li>\n<li>基础题，直接写出答案：</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">let x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">; </span>\nlet y <span class="token operator">=</span> x<span class="token comment">; </span>\nlet z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">; </span>\ny<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">; </span>\ny <span class="token operator">=</span> z<span class="token comment">; </span>\nz<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token comment">; </span>\nx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> z <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">; </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%B1%B1%E6%9C%88%E6%9C%80%E8%BF%91%E7%9A%84%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93"><a href="https://juejin.cn/post/6922229465468633095">山月最近的面试总结</a><a class="anchor" href="#%E5%B1%B1%E6%9C%88%E6%9C%80%E8%BF%91%E7%9A%84%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93">§</a></h3>\n<h3 id="%E4%B8%A4%E5%B9%B4%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E6%88%90%E5%8A%9F%E9%9D%A2%E8%AF%95%E9%98%BF%E9%87%8Cp6%E6%80%BB%E7%BB%93"><a href="https://juejin.im/post/6844903928442667015">两年工作经验成功面试阿里P6总结</a><a class="anchor" href="#%E4%B8%A4%E5%B9%B4%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E6%88%90%E5%8A%9F%E9%9D%A2%E8%AF%95%E9%98%BF%E9%87%8Cp6%E6%80%BB%E7%BB%93">§</a></h3>\n<h3 id="%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%92%8C%E9%85%B7%E5%AE%B6%E4%B9%90%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93"><a href="https://juejin.cn/post/6844904151013392398">拼多多和酷家乐面试经历总结</a><a class="anchor" href="#%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%92%8C%E9%85%B7%E5%AE%B6%E4%B9%90%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93">§</a></h3>\n<h4 id="%E9%85%B7%E4%B9%90%E5%AE%B6">酷乐家<a class="anchor" href="#%E9%85%B7%E4%B9%90%E5%AE%B6">§</a></h4>\n<ul>\n<li>React事件机制  <a href="https://toutiao.io/posts/28of14w/preview">一文吃透 React 事件机制原理</a></li>\n<li>盒子模型和 <code>box-sizing</code> 属性，判断元素的尺寸和颜色。</li>\n<li>算法题，怎么找到第一个相交的节点。</li>\n</ul>\n<h4 id="%E6%8B%BC%E5%A4%9A%E5%A4%9A">拼多多<a class="anchor" href="#%E6%8B%BC%E5%A4%9A%E5%A4%9A">§</a></h4>\n<ul>\n<li>\n<p>react 16 生命周期有什么改变</p>\n</li>\n<li>\n<p>详细的介绍一下 <code>getDerivedStateFromProps</code></p>\n</li>\n<li>\n<p>class 组件与函数式组件的区别  <a href="https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/">函数式组件与类组件有何不同？</a></p>\n</li>\n<li>\n<p>避免 css 全局污染。</p>\n</li>\n<li>\n<p>webpack 如何实现动态加载  <a href="https://juejin.im/post/6844903888319954952">webpack是如何实现动态导入的</a></p>\n</li>\n<li>\n<p>react 里有动态加载的 api 吗？</p>\n</li>\n<li>\n<blockquote>\n<p>React.lazy</p>\n</blockquote>\n</li>\n<li>\n<p>React.lazy 的原理是啥？</p>\n</li>\n<li>\n<p>webpack 能动态加载 require 引入的模块吗？</p>\n</li>\n<li>\n<blockquote>\n<p>应该是不能的，前面说了，webpack 支持动态导入基本上只能用<code>import()</code> 和<code>require.ensure</code>。</p>\n</blockquote>\n</li>\n<li>\n<p>require 引入的模块 webpack 能做 Tree Shaking 吗？</p>\n</li>\n<li>\n<blockquote>\n<p>不能，Tree Shaking 需要静态分析，只有 ES6 的模块才支持。</p>\n</blockquote>\n</li>\n<li>\n<p>设计一个input 组件需要哪些属性。我说了 value 、defaultValue、onChange</p>\n</li>\n<li>\n<p>value 的类型是什么？</p>\n</li>\n<li>\n<p>onChange 怎么规定 value 的类型</p>\n</li>\n<li>\n<p>写一个 promise 重试函数，可以设置时间间隔和次数。<code>function foo(fn, interval, times) {}</code></p>\n</li>\n<li>\n<p>实现一个 redux</p>\n<blockquote>\n<p>实现 <code>createStore</code> 的功能，关键点发布订阅的功能，以及取消订阅的功能。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id="%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E4%B8%AD%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E5%8F%8A2%E5%B9%B4%E5%89%8D%E7%AB%AF%E8%96%AA%E8%B5%84%E5%AF%B9%E6%AF%94%E9%99%84%E8%B5%A0%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95"><a href="https://juejin.cn/post/6844904181627781128">霖呆呆的中大厂面试记录及2年前端薪资对比(附赠学习方法)</a><a class="anchor" href="#%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E4%B8%AD%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E5%8F%8A2%E5%B9%B4%E5%89%8D%E7%AB%AF%E8%96%AA%E8%B5%84%E5%AF%B9%E6%AF%94%E9%99%84%E8%B5%A0%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95">§</a></h3>\n<h4 id="yy">YY<a class="anchor" href="#yy">§</a></h4>\n<ul>\n<li>HTTP/2对比HTTP1.1</li>\n<li>HTTP请求的什么时候用的对称加密什么时候非对称加密</li>\n<li>如何实现if(a===1&amp;&amp;a===2&amp;&amp;a===3)</li>\n<li>使用jsonp的话会有什么安全问题吗？</li>\n<li>requestAnimationFrame属于宏任务还是微任务</li>\n<li>HTTP/2中的多路复用</li>\n</ul>\n<h4 id="%E9%98%BF%E9%87%8C-1">阿里<a class="anchor" href="#%E9%98%BF%E9%87%8C-1">§</a></h4>\n<h3 id="%E4%B8%80%E5%B9%B4%E5%8D%8A%E7%BB%8F%E9%AA%8C%E5%89%8D%E7%AB%AF%E7%A4%BE%E6%8B%9B7%E5%AE%B6%E5%A4%A7%E5%8E%82%E7%8B%AC%E8%A7%92%E5%85%BD%E5%85%A8%E8%BF%87%E7%BB%8F%E5%8E%86--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87"><a href="https://juejin.cn/post/6844904137495150599">一年半经验前端社招7家大厂&amp;独角兽全过经历 | 掘金技术征文</a><a class="anchor" href="#%E4%B8%80%E5%B9%B4%E5%8D%8A%E7%BB%8F%E9%AA%8C%E5%89%8D%E7%AB%AF%E7%A4%BE%E6%8B%9B7%E5%AE%B6%E5%A4%A7%E5%8E%82%E7%8B%AC%E8%A7%92%E5%85%BD%E5%85%A8%E8%BF%87%E7%BB%8F%E5%8E%86--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87">§</a></h3>\n<h4 id="%E6%8B%BC%E5%A4%9A%E5%A4%9A-1">拼多多<a class="anchor" href="#%E6%8B%BC%E5%A4%9A%E5%A4%9A-1">§</a></h4>\n<p>一</p>\n<ol>\n<li>react16新生命周期，有什么变化【描述】</li>\n</ol>\n<blockquote>\n<p>两个static、一个didcatch捕获错误的、一个getsnapshot</p>\n</blockquote>\n<ol>\n<li>react16之前的那些不好的生命周期怎么过度到react16的新生命周期【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>getDriverStateFromProps替代componentWillReceiveProps，加上逻辑对比上次state和props来决定state。willupdate换成getSnapshotBeforeUpdate，willmount直接写成初始state（react16的state不先写出来是null，你需要先在class组件里面写一下state = {...}）</p>\n</blockquote>\n<ol>\n<li>componentWillReceiveProps用到了this，getDriverStateFromProps也要用，怎么办【伪代码】</li>\n</ol>\n<blockquote>\n<p>把this.xxx存到state里面，第二个参数是state，里面有xxx（有点挫，懂的人应该都有同样的感受吧，如果是函数组件，一个useRef保存一下即可）。另外的方法，如果和内部变量无关，把它抠到class组件外面去2</p>\n</blockquote>\n<ol>\n<li>ssr怎么实现，你们怎么做【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>将动态渲染逻辑做到后端去，并把最终html结果直接返回。我们这边是数据动静分离+部分ssr直出，重要的数据ssr，比较慢的接口还是放前端</p>\n</blockquote>\n<ol>\n<li>你们有没有统一构建的cli，怎么实现【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>基于react全家桶，ts、eslint、埋点上报、sw都可配置，根据配置生成代码模版，开箱即用</p>\n</blockquote>\n<ol>\n<li>你们项目有ci吗，怎么做，提交的时候会做什么事情【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>通过接入公司内部某ci，配置yaml文件，每次监听git hook，并作出对应的行为如安装、lint、部署、搬运、生成change log等等。提交的时候，检查lint、修复autofixable的问题，存在修不了的问题报错，提交失败</p>\n</blockquote>\n<ol>\n<li>e2e测试、自动化测试【描述】</li>\n</ol>\n<blockquote>\n<p>概念性问题，网上容易搜到。端对端测试，模拟用户行为对网页进行全流程测试；自动化测试，包含很多了，范围更高一个维度</p>\n</blockquote>\n<ol>\n<li>git rebase什么作用【描述】</li>\n</ol>\n<blockquote>\n<p>概念性问题</p>\n</blockquote>\n<p>二</p>\n<ol>\n<li><strong>实现一个redux【编程】</strong></li>\n</ol>\n<blockquote>\n<p>还是那10几行经典redux，途中会顺便问一下函数式编程、纯函数、副作用这些，网上搜“函数式编程”即可知道这些概念了</p>\n</blockquote>\n<ol>\n<li><strong>如果是用ts写，怎么写【编程】</strong></li>\n</ol>\n<blockquote>\n<p>改成ts版本，如果比较熟悉redux+ts的，很快写出来。如果不太熟，熟悉泛型也可以根据表现，很快写出近似的。我说我没有ide提示，不能保证裸写没问题。面试官说没事，只是看看你ts熟悉程度</p>\n</blockquote>\n<h4 id="%E8%99%BE%E7%9A%AE">虾皮<a class="anchor" href="#%E8%99%BE%E7%9A%AE">§</a></h4>\n<ol>\n<li>各种情况下的proto指向，多道问答题【描述】</li>\n</ol>\n<blockquote>\n<p>有一个class A {},问他的实例a的<code>__proto__</code>和<code>A.prototype</code>的关系，<code>a.__proto__.__proto__</code>是什么，<code>a.__proto__.__proto__.__proto__</code>是什么。然后再问普通对象、function的。这里需要注意一下<code>Function.prototype === Function.__proto__</code>和a的三次proto是null。一开始就问三次取a的proto，其实潜意识是null的，但刚刚下班赶车回家，心跳都没有恢复正常就进入面试，没什么状态，“em～”了10秒钟，面试官说：哎，你别打开控制台喔，别偷偷的运行哦。我说这肯定是原型链终点了，我想想，确认一下——null！犹豫就会败北，开门一波丢脸</p>\n</blockquote>\n<ol>\n<li>react性能优化【描述】【举例】</li>\n</ol>\n<blockquote>\n<p>scu生命周期、memo；usememo &amp; usecallback记住一些值不用重新计算；虚拟列表；immutable+scu/memo；原生js；（这块聊了很久了）</p>\n</blockquote>\n<ol>\n<li>长列表优化，多种方案及对比【举例】</li>\n</ol>\n<blockquote>\n<p>虚拟列表、intersectionobserver、监听滚动长列表+raf（经验之谈，聊了很久）</p>\n</blockquote>\n<ol>\n<li>diff算法、key作用，不要key会怎样【描述】</li>\n</ol>\n<blockquote>\n<p>树diff、组件diff、元素diff；key可以原地复用，没有key无脑会更新（此时你可以发现，index做key其实会形同虚设）</p>\n</blockquote>\n<ol>\n<li>react的usememo原理【描述】</li>\n</ol>\n<blockquote>\n<p>闭包、缓存、memorize</p>\n</blockquote>\n<ol>\n<li>编程题：对象扁平化【编程】(30min)  pick</li>\n</ol>\n<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  <span class="token string">"a"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"b"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">"c"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"d"</span><span class="token operator">:</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"aa"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token string">"c"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token number">2</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span> <span class="token arrow operator">=></span>\n<span class="token punctuation">{</span> <span class="token string">\'a.b.c.d\'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> aa<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">\'c[0]\'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'c[1]\'</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n</code></pre>\n<ol>\n<li>为什么浏览器不用cjs而用了esm【举例】</li>\n</ol>\n<blockquote>\n<p>个人观点类问题。cjs都是require系统本地文件，时间不用考虑。如果在浏览器使用类似cjs的require，实现过程无非就是创建script标签、发请求。这个发请求的过程就无法保证同步了，你要写成<code>callback/promise/async-await</code>，这样子写页面门槛又高了</p>\n</blockquote>\n<h3 id="%E4%BD%9C%E4%B8%9A%E5%B8%AE">作业帮<a class="anchor" href="#%E4%BD%9C%E4%B8%9A%E5%B8%AE">§</a></h3>\n<ul>\n<li>settimeout实现interval(注意和普通的要无差别体验)</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"><span class="token comment">;(() => {</span>\n  <span class="token keyword">const</span> list <span class="token operator">=</span> new <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n  function <span class="token function">myInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> ms<span class="token punctuation">)</span> {\n    <span class="token keyword">const</span> ref <span class="token operator">=</span> {}<span class="token comment">;</span>\n    <span class="token keyword">const</span> exec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n      return <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        ref<span class="token punctuation">.</span>current <span class="token operator">=</span> timer<span class="token comment">;</span>\n      }<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token comment">;</span>\n    }<span class="token comment">;</span>\n    ref<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token comment">;</span>\n    return ref<span class="token comment">;</span>\n  }\n\n  function <span class="token function">myClearInterval</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> {\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token comment">;</span>\n    list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n  window<span class="token punctuation">.</span>myInterval <span class="token operator">=</span> myInterval<span class="token comment">;</span>\n  window<span class="token punctuation">.</span>myClearInterval <span class="token operator">=</span> myClearInterval<span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>节点是不是属于某个节点下(当时我写了一个不带parentid的版本，要自己一层层搜。如果带parentid的，就简单很多了，测试用例你自己写，他们也没有给出)</li>\n<li>合并数组[\'a\', \'b\'], [1, 2, 3] =&gt; [\'a\', 1, \'b\', 2, 3] (送分)</li>\n<li>一堆数字字符串组成最大数是多少[50, 2, 5, 9] =&gt; 95502 (字典序+贪心)</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">getMaxNumber</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> {\n  return arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">+</span>`${acc}${cur}`<span class="token punctuation">,</span> <span class="token operator">+</span>`${cur}${acc}`<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n}\n</code></pre>\n<ul>\n<li>如何判断链表有没有环，快慢指针。</li>\n</ul>\n<h4 id="%E7%8C%BF%E8%BE%85%E5%AF%BC">猿辅导<a class="anchor" href="#%E7%8C%BF%E8%BE%85%E5%AF%BC">§</a></h4>\n<p>一</p>\n<ol>\n<li>react生命周期介绍，怎么执行。说一下下面的组件生命周期执行顺序【描述】有<code>&lt;A&gt; &lt;B /&gt; &lt;/A&gt;</code>这样的组件：</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">a<span class="token punctuation">.</span>willMount <span class="token number">3</span>\nb<span class="token punctuation">.</span>willMount <span class="token number">1</span>\na<span class="token punctuation">.</span>didMount <span class="token number">4</span>\nb<span class="token punctuation">.</span>didMount <span class="token number">2</span>\n复制代码\n</code></pre>\n<blockquote>\n<p>react16前是递归的，是这个顺序。react16后改成fiber架构，是反过来的了，没有像栈那样fifo</p>\n</blockquote>\n<ol>\n<li>redux vs context，为什么不用context【描述】</li>\n</ol>\n<blockquote>\n<p>随意修改，莫名其妙的bug。redux将这个过程规范化，单向数据流</p>\n</blockquote>\n<ol>\n<li>react 17要做什么规划，concurrent mode【描述】</li>\n</ol>\n<blockquote>\n<p>concurrent mode、去掉危险的生命周期。concurrent mode是react重点面试题了，基于requestidlecallback实现(考虑兼容性，官方自己实现了一个)——浏览器空闲的时候做事情</p>\n</blockquote>\n<ol>\n<li>SSR，打开你们的SSR页面看看，具体逻辑、实现方式【描述】</li>\n</ol>\n<blockquote>\n<p>发了一个我们的链接给他，并描述了流程</p>\n</blockquote>\n<ol>\n<li><code>promise.then(f1, f2)``和promise.then(f1).catch(f2)</code>区别【描述】</li>\n</ol>\n<blockquote>\n<p>捕获全部上游和捕获本次then</p>\n</blockquote>\n<ol>\n<li>() =&gt; {} vs function () {}【描述】</li>\n</ol>\n<blockquote>\n<p>送分。无argument、this是定义那一层、箭头可以指向返回值</p>\n</blockquote>\n<ol>\n<li>说输出【描述】</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> obj <span class="token operator">=</span> {\n  f1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> { console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span> }<span class="token punctuation">,</span>\n}<span class="token comment">;</span>\nobj<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">global</span>\nobj<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> obj\nnew obj<span class="token punctuation">.</span>f1<span class="token comment">; // instance</span>\nnew obj<span class="token punctuation">.</span>f2<span class="token comment">; // instance</span>\n复制代码\n</code></pre>\n<ol>\n<li>用setTimeout实现setInterval【编程】</li>\n</ol>\n<blockquote>\n<p>又问到了，频率有点高</p>\n</blockquote>\n<ol>\n<li>Node { value: number; children: Node[] }，算出树每一层节点和，输出数组【编程】</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">     <span class="token number">2</span>         <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span>\n\n<span class="token number">2</span>      <span class="token number">3</span>      <span class="token number">5</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span>\n\n<span class="token number">1</span>   <span class="token number">2</span>  <span class="token number">3</span>   <span class="token number">4</span>   <span class="token number">7</span> <span class="token number">8</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">25</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> 每一层的和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>；\n复制代码\n</code></pre>\n<p>使用bfs可秒杀</p>\n<p>二</p>\n<p>1.节流、和防抖的区别，均匀的节流怎么实现【编程】</p>\n<blockquote>\n<p>一下子写了最简单的出来，然后他要各种改需求，加功能。要支持配置马上执行、要防抖节流两个结合起来、要均匀</p>\n</blockquote>\n<ol>\n<li>http缓存、强制缓存里面expire和cache-control作用，什么坑【描述】</li>\n</ol>\n<blockquote>\n<p>重点题，频率很高。expire需要保证时间准确</p>\n</blockquote>\n<ol>\n<li>前端路由实现。history什么坑，怎么解决【描述】</li>\n</ol>\n<blockquote>\n<p>哈希和history，监听事件、切换元素。history会导致一些新路径404，nginx重定向到首页走js逻辑</p>\n</blockquote>\n<ol>\n<li>\n<p>var、let、const区别，() =&gt; {} vs function () {}【描述】</p>\n</li>\n<li>\n<p>ES5 实现 B 继承 A【编程】</p>\n</li>\n</ol>\n<blockquote>\n<p>为了表现，肯定是直接写寄生组合继承啦</p>\n</blockquote>\n<ul>\n<li>rbac</li>\n<li>http3的quic</li>\n<li>数组和链表优点缺点</li>\n</ul>\n<p>商汤</p>\n<ol>\n<li>websocket和http协议区别【描述】</li>\n</ol>\n<blockquote>\n<p>http无状态、被动；ws一次握手，知道状态，可以双向通信</p>\n</blockquote>\n<ol>\n<li>完全不同的域名共享localstorage的方案【描述】</li>\n</ol>\n<blockquote>\n<p>公共服务器双工通信(比较简单暴力)、嵌套iframe并双向通信(只要一个变了，马上通知另一方，保证他们的localstorage一模一样)</p>\n</blockquote>\n<ul>\n<li>数据mock的时候，如果有鉴权逻辑怎么办。</li>\n<li>settimeout(a, 3000); ...同步代码执行很久 settimeout(b, 1000)多少种情况，临界值【描述】【举例】</li>\n</ul>\n<blockquote>\n<p>同步代码执行时间 &lt;= 3000，顺序。&gt; 3000先b再a</p>\n</blockquote>\n<ol>\n<li>浏览器底层对线程冲突的实现【描述】</li>\n</ol>\n<h4 id="%E5%BF%AB%E6%89%8B-1">快手<a class="anchor" href="#%E5%BF%AB%E6%89%8B-1">§</a></h4>\n<p>一</p>\n<ul>\n<li>react升到16，有什么坑需要解决【描述】</li>\n<li>16后性能好多少，测过吗，你怎么测的。顺便问一下各种测速上报【描述】</li>\n<li>为什么16的性能好，fiber流程是怎样的【描述】</li>\n<li>为什么两个will生命周期要被标记为danger【描述】</li>\n<li>用了react的哪些新特性，带来什么收益【举例】</li>\n<li>浏览器http缓存那一套【描述】</li>\n<li>from memory cache、from dist cache什么区别，性能对比【描述】</li>\n<li>根据什么而选from memory cache、from dist cache这两种缓存方案【描述】</li>\n<li>service worker怎么理解【举例】</li>\n<li>输出一个字符串全排列【编程】</li>\n</ul>\n<p>二</p>\n<ul>\n<li>项目深挖，反问一些问题【描述】【举例】</li>\n<li>react的setstate过程【描述】</li>\n<li>说一下几种情况的setstate的输出，为什么【描述】</li>\n<li>react的合成事件【描述】</li>\n<li>收到新state怎么更新，发生了什么事情【描述】</li>\n<li>ssr太久，你觉得什么原因导致【举例】</li>\n<li>ssr优化措施【举例】</li>\n<li>react的ssr和传统的模版引擎渲染对比【描述】</li>\n<li>ssr兜底容灾措施、降级措施【举例】</li>\n<li>如何选择csr还是ssr，设计一套方案切换，让尽量多的用户得到最好的体验【举例】</li>\n<li>有一个请求函数request，封装一下这个函数，使得多个相同的请求过来的时候不发请求，直接读取第一个的结果【编程】</li>\n<li>有一个排序数组，返回第一个比目标数字小的数，要求log(n)【编程】</li>\n</ul>\n<p>三</p>\n<ul>\n<li>4个砝码，一个天平，问能称出多少种重量（砝码可以两边都放，砝码重量自己随便定）【写出运算过程】</li>\n</ul>\n<h3 id="%E8%9A%82%E8%9A%81%E5%AD%97%E8%8A%82%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93"><a href="https://juejin.cn/post/6844904161830502407">蚂蚁、字节、滴滴面试经历总结</a><a class="anchor" href="#%E8%9A%82%E8%9A%81%E5%AD%97%E8%8A%82%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93">§</a></h3>\n<p>字节</p>\n<p><strong>一</strong></p>\n<blockquote>\n<p>webpack 如何做性能优化</p>\n</blockquote>\n<p>webpack 做性能优化主要是考虑打包体积和打包速度。</p>\n<p>体积分析用 <code>webpack-bundle-analyzer</code> 插件，速度分析用：<code>speed-measure-webpack-plugin</code> 插件。</p>\n<blockquote>\n<p>笔试题：写一个处理加法可能产生精度的函数，比如 0.1 + 0.2 = 0.3</p>\n</blockquote>\n<p>思路：对于浮点数在底层处理是有问题的，所以目的就是想办法将所以的浮点数转化为整数进行处理，同时乘以一个倍数(A)，然后加起来后再除以这个倍数(A)，这个倍数应该是两个数中最小的那个数的倍数，比如 0.1 + 0.02 ,那么应该同时乘以 100，变为 10 + 2，然后再将值除以 100。</p>\n<blockquote>\n<p>1000000000 + 1000000000 允许返回字符串 处理大数</p>\n</blockquote>\n<p>大数问题就是通过字符串来处理，从后往前加，然后处理进位的问题。</p>\n<p><strong>二</strong></p>\n<ul>\n<li>写一个 es6 的继承过程</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 这个是要实现的方法</span>\ncreateClass <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">sons<span class="token punctuation">,</span> <span class="token keyword">super</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// TODO</span>\n  <span class="token keyword control-flow">return</span> fn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 这是个 es6 的一个例子，要实现 extends 的功能。</span>\n<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>\n  <span class="token function">cons</span> <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n    <span class="token comment">// xxxxx</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>写一个大数相乘的解决方案。传两个字符串进来，返回一个字符串</li>\n</ul>\n<p>这道题跟一面的时候思路差不多，只是进位的时候不一定是 1。</p>\n<p><strong>三</strong></p>\n<p>算法题:<a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">leetcode-cn.com/problems/bu…</a></p>\n<h4 id="%E6%BB%B4%E6%BB%B4">滴滴<a class="anchor" href="#%E6%BB%B4%E6%BB%B4">§</a></h4>\n<ul>\n<li>webpack 原理</li>\n</ul>\n<p>大致就是：</p>\n<ol>\n<li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li>\n<li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li>\n<li>确定入口：根据配置中的 entry 找出所有的入口文件；</li>\n<li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li>\n<li>完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li>\n<li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li>\n<li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li>\n</ol>\n<p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>\n<ul>\n<li>babel 原理</li>\n</ul>\n<p>babel的转译过程分为三个阶段：<strong>parsing、transforming、generating</strong>，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：</p>\n<ol>\n<li>ES6代码输入</li>\n<li>babylon 进行解析得到 AST</li>\n<li>plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树</li>\n<li>用 babel-generator 通过 AST 树生成 ES5 代码</li>\n</ol>\n<p><strong>二</strong></p>\n<ul>\n<li>redux 做状态管理和发布订阅模式有什么区别</li>\n</ul>\n<p>redux 其实也是一个发布订阅，但是 redux 可以做到数据的可预测和可回溯。</p>\n<ul>\n<li>react-redux 的原理，是怎么跟 react 关联起来的</li>\n</ul>\n<p>react-redux 的核心组件只有两个，Provider 和 connect，Provider 存放 Redux 里 store 的数据到 context 里，通过 connect 从 context 拿数据，通过 props 传递给 connect 所包裹的组件。</p>\n<ul>\n<li>多端原理</li>\n<li>babel插件  通过代码生成文档的 babel 插件</li>\n<li>AST</li>\n</ul>\n<h4 id="%E8%9A%82%E8%9A%81">蚂蚁<a class="anchor" href="#%E8%9A%82%E8%9A%81">§</a></h4>\n<p><strong>一</strong></p>\n<ul>\n<li>\n<p>hooks原理</p>\n</li>\n<li>\n<p>vue3 的 类似 hooks 的原理是怎么样的</p>\n</li>\n<li>\n<p>组件升级怎么让使用这个组件的人都知道。</p>\n</li>\n</ul>\n<h3 id="%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95128%E9%A2%98%E6%B1%87%E6%80%BB%E5%90%AB%E8%B6%85%E8%AF%A6%E7%BB%86%E7%AD%94%E6%A1%88--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87"><a href="https://juejin.cn/post/6844904151369908232">霖呆呆的近期面试128题汇总(含超详细答案) | 掘金技术征文</a><a class="anchor" href="#%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95128%E9%A2%98%E6%B1%87%E6%80%BB%E5%90%AB%E8%B6%85%E8%AF%A6%E7%BB%86%E7%AD%94%E6%A1%88--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87">§</a></h3>\n<h4 id="%E5%A4%9Ajs%E5%9F%BA%E7%A1%80%E9%A2%98"><strong>多JS基础题</strong><a class="anchor" href="#%E5%A4%9Ajs%E5%9F%BA%E7%A1%80%E9%A2%98">§</a></h4>\n<ul>\n<li>\n<p>如何解决a标点击后hover事件失效的问题</p>\n<p>只需要记住<code>LoVe HAte</code>原则就可以了：link→visited→hover→active</p>\n</li>\n<li>\n<p>点击一个input依次触发的事件</p>\n<p>\'onmouseenter\' \'onmousedown\' \'onfocus\' \'onclick\'</p>\n</li>\n<li>\n<p>react的控制组件和非控制组件</p>\n</li>\n<li>\n<p>原生的自定义事件 customEvent</p>\n</li>\n<li>\n<p>冒泡和捕获的具体过程</p>\n</li>\n<li>\n<p>所有的事件都有冒泡吗</p>\n</li>\n<li>\n<p>typeof为什么对null错误的显示</p>\n<p>这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object</p>\n</li>\n<li>\n<p>手写JSONP ？？？</p>\n</li>\n<li>\n<p>CommonJS和ES6模块的区别   <em><strong>多几条</strong></em></p>\n<p><a href="https://juejin.im/post/6844904145443356680">一篇不是标题党的CommonJS和ES6模块规范讲解</a></p>\n</li>\n</ul>\n<h3 id="75-%E9%81%93-javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-25-%E4%B8%87%E5%AD%97%E5%88%B7%E4%B8%AA%E5%A4%9F"><a href="http://mp.weixin.qq.com/s?__biz=MzI3ODU4MzQ1MA==&amp;mid=2247487859&amp;idx=1&amp;sn=8b639a364d1d71f26853537f28f299d1&amp;scene=21#wechat_redirect">75 道 JavaScript 面试题， 2.5 万字刷个够</a><a class="anchor" href="#75-%E9%81%93-javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-25-%E4%B8%87%E5%AD%97%E5%88%B7%E4%B8%AA%E5%A4%9F">§</a></h3>\n<ul>\n<li>\n<p>undefined与null区别</p>\n<p>同属基本类型，布尔值转换；undefined，未指定特定值的变量的默认值，没有显示返回的函数，对象中不存在的属性。null，不代表任何值的值，已明确定义给变量的值， == 与=== 结果</p>\n</li>\n<li>\n<p>&amp;&amp;能做什么</p>\n<p>逻辑与，找到第一个虚值表达式并返回它，如果没有找到任何虚值表达式，则返回最后一个真值表达式。它采用短路来防止不必要的工作。</p>\n</li>\n<li>\n<p>|| 能做什么</p>\n<p>逻辑或，在其操作数中找到第一个真值表达式并返回它。用于参数默认值。</p>\n</li>\n<li>\n<p><code>+</code>是将字符串转换为数字的最快方法，因为如果值已经是数字，它不会执行任何操作。</p>\n</li>\n<li>\n<p><code>event.currentTarget</code>是附加事件处理程序的元素。</p>\n</li>\n<li>\n<p><code>toPrimitive</code>首先在对象中使用<code>valueOf</code>方法，然后使用<code>toString</code>方法来获取该对象的原始值</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>\'1,2\'</th>\n<th>[1,2]</th>\n<th>== true</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\'[object Object]\'</td>\n<td>{}</td>\n<td>== true</td>\n</tr>\n</tbody>\n</table></div>\n</li>\n</ul>\n<h3 id="chocolate1999"><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues">Chocolate1999</a><a class="anchor" href="#chocolate1999">§</a></h3>\n<p>class定义类和function定义类的区别</p>\n<p>点击事件是宏任务还是微任务</p>\n<p>BOM和DOM的区别,BOM的方法讲完整一点</p>\n<p><a href="https://segmentfault.com/a/1190000021231422">全局变量为什么不会被垃圾处理</a></p>\n<p>怎么判断一个元素有没有被引用</p>\n<p>内存泄漏</p>\n<p>promise中不声明async，可以用await吗</p>\n<p>promise的api：如果有10个调用请求，那么哪个api能查到最快调用的请求</p>\n<p>阻塞、非阻塞和异步同步是对应的吗？一样的吗？</p>\n<p>事件机制，捕获和冒泡，如何阻止冒泡？</p>\n<p>fetch的使用，考察通信是否了解</p>\n<p>let const, babel 中的实现</p>\n<p>怎么判断一个空数组</p>\n<p>怎么创建一个Promise，参数是什么，怎么中断一个promise，除了抛异常和return new Promise()还有什么</p>\n<p>cookie的几个字段的功能  expires  httponly samesite</p>\n<p>js怎么删除cookie</p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/194">try…catch…中如果异步代码出错怎么办？</a></p>\n<p>ES5实现继承的方法，构造继承，原型链继承，组合继承，寄生组合继承</p>\n<p><a href="https://juejin.cn/post/6881894768117284878">如何实现私有的方法/属性</a></p>\n<p>js溢出怎么解决</p>\n<p><a href="https://juejin.cn/post/6906106922605543432">callback的缺点，Promise的状态有哪些，generator，async和await</a></p>\n<p><a href="https://juejin.cn/post/6881241853258104839">require和import的区别？AMD、CMD、ES6</a></p>\n<p>手动实现一个ajax，这样实现的方法叫什么</p>\n<p>ajax有哪些状态，每个状态分别对应什么</p>\n<p>async是什么的语法糖，generator怎么用</p>\n<p>构造继承里 Function.call(argu)里传进来的参数argu是什么</p>\n<p>bind(object).bind(windows) 后的this指向</p>\n<p>链表的实现</p>\n<p>深拷贝/浅拷贝</p>\n<p>如果要同时启动两个异步任务，怎么做</p>\n<p><a href="https://www.zhangxinxu.com/wordpress/2018/04/known-es6-symbol-function/">简单说一下es6的symbol属性</a></p>\n<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this指向</a></p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/174">new操作符之后的操作</a></p>\n<p><a href="https://juejin.cn/post/6844903618999500808">js里堆和栈的区别</a></p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/172">setTimeout第二个参数为0时和匿名自执行函数区别</a></p>\n<p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes/issues/218">问如何改造，才能实现打印0 1 2 3，闭包可以吗，然后用闭包实现一下这个效果</a></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// resolve(\'123\')</span>\n    <span class="token comment">// return new Error(\'message\')</span>\n   <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'before error\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'fater error\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>420</p>\n<p>hash history模式区别</p>\n<p>各种传递引用   页面  ES6</p>\n<p>如何深拷贝  递归</p>\n<p>判断对象在数组中  findindex  find</p>\n<p>性能优化功能</p>\n<p>按钮延迟分析</p>\n<p>锚点分析工具</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%8E%98%E9%87%91%E6%94%B6%E8%97%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86" }, "\u6398\u91D1\u6536\u85CF\u77E5\u8BC6\u70B9\u6574\u7406"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#2021-%E5%8D%83%E5%AD%97%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F--%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB" }, "2021 \u5343\u5B57\u5927\u5382\u9762\u7ECF & \u4E2A\u4EBA\u6210\u957F\u7ECF\u9A8C\u5206\u4EAB"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%B1%B1%E6%9C%88%E6%9C%80%E8%BF%91%E7%9A%84%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93" }, "\u5C71\u6708\u6700\u8FD1\u7684\u9762\u8BD5\u603B\u7ED3")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%B8%A4%E5%B9%B4%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E6%88%90%E5%8A%9F%E9%9D%A2%E8%AF%95%E9%98%BF%E9%87%8Cp6%E6%80%BB%E7%BB%93" }, "\u4E24\u5E74\u5DE5\u4F5C\u7ECF\u9A8C\u6210\u529F\u9762\u8BD5\u963F\u91CCP6\u603B\u7ED3")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%92%8C%E9%85%B7%E5%AE%B6%E4%B9%90%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93" }, "\u62FC\u591A\u591A\u548C\u9177\u5BB6\u4E50\u9762\u8BD5\u7ECF\u5386\u603B\u7ED3"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E4%B8%AD%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E5%8F%8A2%E5%B9%B4%E5%89%8D%E7%AB%AF%E8%96%AA%E8%B5%84%E5%AF%B9%E6%AF%94%E9%99%84%E8%B5%A0%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95" }, "\u9716\u5446\u5446\u7684\u4E2D\u5927\u5382\u9762\u8BD5\u8BB0\u5F55\u53CA2\u5E74\u524D\u7AEF\u85AA\u8D44\u5BF9\u6BD4(\u9644\u8D60\u5B66\u4E60\u65B9\u6CD5)"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%B8%80%E5%B9%B4%E5%8D%8A%E7%BB%8F%E9%AA%8C%E5%89%8D%E7%AB%AF%E7%A4%BE%E6%8B%9B7%E5%AE%B6%E5%A4%A7%E5%8E%82%E7%8B%AC%E8%A7%92%E5%85%BD%E5%85%A8%E8%BF%87%E7%BB%8F%E5%8E%86--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87" }, "\u4E00\u5E74\u534A\u7ECF\u9A8C\u524D\u7AEF\u793E\u62DB7\u5BB6\u5927\u5382&\u72EC\u89D2\u517D\u5168\u8FC7\u7ECF\u5386 | \u6398\u91D1\u6280\u672F\u5F81\u6587"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BD%9C%E4%B8%9A%E5%B8%AE" }, "\u4F5C\u4E1A\u5E2E"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%9A%82%E8%9A%81%E5%AD%97%E8%8A%82%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86%E6%80%BB%E7%BB%93" }, "\u8682\u8681\u3001\u5B57\u8282\u3001\u6EF4\u6EF4\u9762\u8BD5\u7ECF\u5386\u603B\u7ED3"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%9C%96%E5%91%86%E5%91%86%E7%9A%84%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95128%E9%A2%98%E6%B1%87%E6%80%BB%E5%90%AB%E8%B6%85%E8%AF%A6%E7%BB%86%E7%AD%94%E6%A1%88--%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E5%BE%81%E6%96%87" }, "\u9716\u5446\u5446\u7684\u8FD1\u671F\u9762\u8BD5128\u9898\u6C47\u603B(\u542B\u8D85\u8BE6\u7EC6\u7B54\u6848) | \u6398\u91D1\u6280\u672F\u5F81\u6587"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#75-%E9%81%93-javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-25-%E4%B8%87%E5%AD%97%E5%88%B7%E4%B8%AA%E5%A4%9F" }, "75 \u9053 JavaScript \u9762\u8BD5\u9898\uFF0C 2.5 \u4E07\u5B57\u5237\u4E2A\u591F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#chocolate1999" }, "Chocolate1999")))))),
    'author': "dingtt",
    'contributors': [
        "dingtt"
    ],
    'date': "2021-05-02T08:22:31.000Z",
    'updated': null,
    'excerpt': "掘金收藏知识点整理 2021 千字大厂面经 & 个人成长经验分享 阿里 vue 和 react 的区别和联系 两者的模板渲染、两者的虚拟 dom、diff 差异（vue2、vue3、react 16）、react fiber 能解决什么问题、vue2 的响应式原理和 vue3 的响...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
