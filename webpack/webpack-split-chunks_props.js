import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "实现自己的plugin",
        "link": "webpack/webpack-custom-plugin.html"
    },
    'next': {
        "text": "webpack-dev-server 与 HMR",
        "link": "webpack/webpack-dev-server-hmr.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "webpack/webpack-split-chunks.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "webpack/webpack-split-chunks.html",
    'title': "webpack代码分片",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>webpack代码分片</h1>\n<h2 id="%E9%80%9A%E8%BF%87%E5%85%A5%E5%8F%A3%E6%8B%86%E5%88%86%E4%BB%A3%E7%A0%81">通过入口拆分代码<a class="anchor" href="#%E9%80%9A%E8%BF%87%E5%85%A5%E5%8F%A3%E6%8B%86%E5%88%86%E4%BB%A3%E7%A0%81">§</a></h2>\n<p>webpack中每个入口都将生成一份对应的资源文件</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js\nentry<span class="token punctuation">:</span> {\n  app<span class="token punctuation">:</span> <span class="token string">\'./main.js\'</span><span class="token punctuation">,</span>\n  lib<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'liba\'</span><span class="token punctuation">,</span> <span class="token string">\'libb\'</span><span class="token punctuation">]</span>\n}\n</code></pre>\n<p>适合将对象挂载到window上的库</p>\n<h2 id="commonschunkplugin">CommonsChunkPlugin<a class="anchor" href="#commonschunkplugin">§</a></h2>\n<p>webpack3.X适用，主要用于多入口之间的公共模块，也可用于提取单页面的模块</p>\n<pre class="language-autoit"><code class="language-autoit">new webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token function">CommonChunkPlugin</span><span class="token punctuation">(</span>{\n  name<span class="token punctuation">:</span> <span class="token string">\'common\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 用于指定公共chunk的名字\n  filename<span class="token punctuation">:</span> <span class="token string">\'common.js\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 提取后的资源名字\n  chunks<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">/</span><span class="token operator">/</span> 提取范围，对应entry里的chunk\n  minChunks<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 数字 被<span class="token number">3</span>以上入口引用才提取，不影响entry中单独配置的提取数组  还可以设置<span class="token function">Infinity</span><span class="token punctuation">(</span>不自动抽离公共模块<span class="token punctuation">)</span> 和 函数<span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> 需要在页面上 在其他js之前引入common<span class="token punctuation">.</span>js\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 提取单页面 \nentry<span class="token punctuation">:</span> {\n  app<span class="token punctuation">:</span> <span class="token string">\'./main.js\'</span><span class="token punctuation">,</span>\n  common<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> 提取第三方类库及业务中不常更新的模块\n}\n<span class="token operator">/</span><span class="token operator">/</span> 插件配置同上\n</code></pre>\n<p>当minChunks为函数时，每个模块都会经该函数处理，传入当前依赖模块的信息module，以及被作为公共模块的数量count，可以在函数中针对每一个模块做更精细化的控制，返回值为true时进行提取。</p>\n<pre class="language-autoit"><code class="language-autoit">minChunks<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> count<span class="token punctuation">)</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> module<span class="token punctuation">.</span>context 模块目录路径\n  <span class="token operator">/</span><span class="token operator">/</span> module<span class="token punctuation">.</span>sourece 模块目录的完整路径\n  <span class="token operator">/</span><span class="token operator">/</span> count 模块被引用的次数\n   return module<span class="token punctuation">.</span>context <span class="token operator">&amp;</span><span class="token operator">&amp;</span>   module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token comment">; </span>\n  <span class="token operator">/</span><span class="token operator">/</span> node_modules 目录下的模块都作为公共部分，效果就如同 webpack <span class="token number">4</span><span class="token punctuation">.</span>x 中的 test<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>\n}\n</code></pre>\n<p>提取webpack的运行时，防止影响公共模块的hash，mainfest的CommonsChunkPlugin必须出现在最后，在页面中引入必须在最前</p>\n<pre class="language-autoit"><code class="language-autoit">new webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token function">CommonChunkPlugin</span><span class="token punctuation">(</span>{\n  name<span class="token punctuation">:</span><span class="token string">\'mainfest\'</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n<p><strong>不足</strong></p>\n<ul>\n<li>\n<p>提取特定入口的特定模块</p>\n</li>\n<li>\n<p>只能提取一个vendor，想提取多个需要配置多次，</p>\n</li>\n<li>\n<p>mainfest会使浏览器多加载一个资源</p>\n</li>\n<li>\n<p>异步情况下会有问题</p>\n</li>\n</ul>\n<p>webpack为每个面模块指定的id是按数字递增的，当有新的模块产生时会导致其他的模块id变化，可能影响vendor的hash。</p>\n<p>解决办法，使用 HashedModuleIds-Plugin 为每个模块按照其所在的路径生成hash id</p>\n<pre class="language-autoit"><code class="language-autoit">new HashedModuleIds<span class="token operator">-</span><span class="token function">Plugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> CommonsChunksPlugin\n</code></pre>\n<h3 id="webpack4x%E9%80%82%E7%94%A8optimizationsplitchunks-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2">webpack4.x适用optimization.SplitChunks 代码分割<a class="anchor" href="#webpack4x%E9%80%82%E7%94%A8optimizationsplitchunks-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2">§</a></h3>\n<p>可以设置提取的条件：提取的模式，提取模块的体积</p>\n<p>基础配置</p>\n<pre class="language-autoit"><code class="language-autoit">optimization<span class="token punctuation">:</span>{    <span class="token operator">/</span><span class="token operator">/</span>帮我们自动做代码分割    \n  splitChunks<span class="token punctuation">:</span>{        \n    chunks<span class="token punctuation">:</span><span class="token string">"all"</span><span class="token punctuation">,</span><span class="token operator">/</span><span class="token operator">/</span>默认是支持异步，all代表所有的chunks代码公共部分抽离出来成为一个单独的文件 \n   } \n}\n</code></pre>\n<p>使用</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">//webpack.config.js </span>\nentry<span class="token operator">:</span> <span class="token punctuation">{</span>\n  lodash<span class="token operator">:</span> <span class="token string">"./lodash.js"</span><span class="token punctuation">,</span>\n  index<span class="token operator">:</span> <span class="token string">"./index.js"</span>\n  <span class="token comment">// vnedor: [\'react\', \'lodash\', ...] // 指定公共使用的第三方类库</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//指定打包后的资源位置  </span>\noutput<span class="token operator">:</span> <span class="token punctuation">{</span>\n  path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  filename<span class="token operator">:</span> <span class="token string">"[name].js"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 全部配置</span>\noptimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n  splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n    chunks<span class="token operator">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span> <span class="token comment">// 对所有chunks生效，如果不配置，默认只对异步资源生效 async（默认） initial all</span>\n    minSize<span class="token operator">:</span> <span class="token punctuation">{</span>\n      javascript<span class="token operator">:</span><span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// 当模块大于30kb</span>\n      style<span class="token operator">:</span><span class="token number">50000</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    maxSize<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 对模块进行二次分割时使用，不推荐</span>\n    minChunks<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 打包成chunk最少有几个引用</span>\n    maxAsyncRequests<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 异步加载并行请求并行请求最大资源数</span>\n    maxInitialReauests<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 首次加载 入口文件并行最大资源数</span>\n    automaticNameDelimiter<span class="token operator">:</span><span class="token string">\'~\'</span><span class="token punctuation">,</span> <span class="token comment">// 分隔符</span>\n    name<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 根据cacheGroups和作用范围自动生成chunk命名</span>\n    cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n      vendors<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 用于提取所有 node_modules 中符合条件的模块</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token comment">// 数字越大 优先级越高</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token keyword module">default</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// default则作用于被多次引用的模块</span>\n        minChunks<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>\n        priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n        resuseExistingChunk<span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 在entry里指定\nentry<span class="token punctuation">:</span> {\n  vendor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"lodash"</span><span class="token punctuation">,</span> <span class="token string">"angular"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 指定公共使用的第三方类库\n}\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nvendor<span class="token punctuation">:</span> {\n          chunks<span class="token punctuation">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span>\n          test<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n          name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 使用 vendor 入口作为公共部分\n          enforce<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        }\n \n<span class="token operator">/</span><span class="token operator">/</span> 使用test来匹配react<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nvendor<span class="token punctuation">:</span> {\n          test<span class="token punctuation">:</span> <span class="token operator">/</span>react|vue|lodash<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 直接使用 test 来做路径匹配\n          chunks<span class="token punctuation">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span>\n          name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n          enforce<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        }\n\n<span class="token operator">/</span><span class="token operator">/</span> 所有在 node\_modules 下的模块，即作为依赖安装的，都作为公共部分\nvendor<span class="token punctuation">:</span> {\n          chunks<span class="token punctuation">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span>\n          test<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 路径在 node_modules 目录下的都作为公共部分\n          name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 使用 vendor 入口作为公共部分\n          enforce<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">,</span>\n</code></pre>\n<ul>\n<li>提取后的chunks可被共享，或者来自node_modules</li>\n<li>提取后的js chunk大于30kB，CSS chunk大于50kB</li>\n<li>按需加载时，并行请求的资源最大值小于等于5</li>\n<li>首次加载时（不计算异步资源），并行请求的资源最大值小于等于3</li>\n</ul>\n<h2 id="%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD">异步加载<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD">§</a></h2>\n<p>正常加载  <code>import  bar from \'./bar.js\'</code>    异步加载 <code>import(\'./bar.js\').then()</code></p>\n<p>配置异步加载的chunk名</p>\n<pre class="language-autoit"><code class="language-autoit">output<span class="token punctuation">:</span> {\n  chunkFileName<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span>\n}\n<span class="token function">import</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">*</span> webpackChunkName<span class="token punctuation">:</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">/</span> <span class="token string">\'./bar.js\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {}<span class="token punctuation">)</span>\n</code></pre>\n<p>如果不添加webpackName会以module id数字的形式命名，这个数字有webpack基于模块自动生成，可能会随着其他模块增减而产生变化，导致资源重新加载</p>\n<h3 id="developmentproduction">development/production<a class="anchor" href="#developmentproduction">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 命令行配置</span>\n<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span> \n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.common.js"</span><span class="token punctuation">)</span> \n<span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n \nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span>devConfig<span class="token punctuation">)</span>\n \n<span class="token comment">//package.js </span>\n<span class="token string">"scripts"</span><span class="token operator">:</span><span class="token punctuation">{</span>    \n    <span class="token string">"dev"</span><span class="token operator">:</span><span class="token string">"webpack-dev-server --config ./build/webpack.dev.js"</span><span class="token punctuation">,</span>    \n    <span class="token string">"build"</span><span class="token operator">:</span><span class="token string">"webpack --config ./build/webpack.prod.js"</span> \n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">//外部传入的全局变量 </span>\nmodule<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>env <span class="token operator">&amp;&amp;</span> env<span class="token punctuation">.</span><span class="token property-access">production</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> prodConfig<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> devConfig<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//外部传入变量 </span>\nscripts<span class="token operator">:</span><span class="token string">" --env.production"</span>\n\n</code></pre>\n<h3 id="bundle%E4%BD%93%E7%A7%AF%E7%9B%91%E6%8E%A7%E5%92%8C%E5%88%86%E6%9E%90">bundle体积监控和分析<a class="anchor" href="#bundle%E4%BD%93%E7%A7%AF%E7%9B%91%E6%8E%A7%E5%92%8C%E5%88%86%E6%9E%90">§</a></h3>\n<p>Vs code 插件 import Cost  可以实时显示引入模块的大小和压缩后的大小</p>\n<h3 id="%E6%89%93%E5%8C%85%E5%88%86%E6%9E%90webpack-bundle-analyzer">打包分析webpack-bundle-analyzer<a class="anchor" href="#%E6%89%93%E5%8C%85%E5%88%86%E6%9E%90webpack-bundle-analyzer">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">scripts<span class="token punctuation">:</span> {\n  <span class="token string">"test:size"</span><span class="token punctuation">:</span> <span class="token string">"bundlesize"</span>\n}\n</code></pre>\n<h3 id="%E9%80%9A%E8%BF%87%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81%E5%88%A9%E7%94%A8%E7%8E%87">通过控制台看看代码利用率<a class="anchor" href="#%E9%80%9A%E8%BF%87%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81%E5%88%A9%E7%94%A8%E7%8E%87">§</a></h3>\n<h3 id="%E6%8A%8Ajs%E9%87%8Cimport%E7%9A%84%E5%BC%82%E6%AD%A5js%E6%96%87%E4%BB%B6%E6%8A%BD%E7%A6%BB%E5%A4%84%E7%90%86">把js里import的异步js文件抽离处理<a class="anchor" href="#%E6%8A%8Ajs%E9%87%8Cimport%E7%9A%84%E5%BC%82%E6%AD%A5js%E6%96%87%E4%BB%B6%E6%8A%BD%E7%A6%BB%E5%A4%84%E7%90%86">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit"> npm install <span class="token operator">-</span><span class="token operator">-</span>save<span class="token operator">-</span>dev <span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>syntax<span class="token operator">-</span>dynamic<span class="token operator">-</span>import \n</code></pre>\n<h3 id="tree-shaking">tree-shaking<a class="anchor" href="#tree-shaking">§</a></h3>\n<p>Tree-shaking起源于ES5模块打包工具rollup，依赖于ES2015模块系统中的静态树结构，可以移除js上下文中未引用的代码，有效减少代码文件的大小。</p>\n<p>webpack3.x需要配置UglifyJsPlugin，会做Tree shaking</p>\n<p>wbepack4.x需要指定mode为production</p>\n<p>在项目中使用了 <a href="http://babeljs.io/">Babel</a> 的话，要把 Babel 解析模块语法的功能关掉，在 <code>.babelrc</code> 配置中增加 <code>&quot;modules&quot;: false</code> 这个配置：</p>\n<pre class="language-autoit"><code class="language-autoit">{\n  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> { <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> }<span class="token punctuation">]</span><span class="token punctuation">]</span>\n}\n</code></pre>\n<p>这样可以把 <code>import/export</code> 的这一部分模块语法交由 webpack 处理，否则没法使用 Tree shaking 的优化。</p>\n<h3 id="sideeffects">sideEffects<a class="anchor" href="#sideeffects">§</a></h3>\n<p>webpack4.x中才有，</p>\n<p>lodash工具库中函数，只用到其中的几个，webpack 的 sideEffects 可以帮助解决这个问题。</p>\n<p>现在 lodash 的ES 版本 的 <code>package.json</code> 文件中已经有 <code>sideEffects: false</code> 这个声明了，当某个模块的 <code>package.json</code> 文件中有了这个声明之后，webpack 会认为这个模块没有任何副作用，只是单纯用来对外暴露模块使用，那么在打包的时候就会做一些额外的处理。</p>\n<p>例如你这么使用 <code>lodash</code>：</p>\n<pre class="language-autoit"><code class="language-autoit">import { forEach<span class="token punctuation">,</span> includes } from <span class="token string">\'lodash-es\'</span>\n\n<span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n</code></pre>\n<p>由于 lodash-es 这个模块的 <code>package.json</code> 文件有 <code>sideEffects: false</code> 的声明，所以 webpack 会将上述的代码转换为以下的代码去处理：</p>\n<p>把没有引用的代码去掉</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js\noptimization<span class="token punctuation">:</span> {    \n  usedExports<span class="token punctuation">:</span> <span class="token boolean">true</span>  \n}\n<span class="token operator">/</span><span class="token operator">/</span>package<span class="token punctuation">.</span>json <span class="token string">"sideEffects"</span><span class="token punctuation">:</span><span class="token boolean">false</span>  正常对所有模块进行tree shaking  或者 <span class="token string">"sideEffects"</span><span class="token punctuation">[</span><span class="token string">\'*.css\'</span><span class="token punctuation">,</span><span class="token string">\'@babel/polyfill\'</span><span class="token punctuation">]</span>\n\n</code></pre>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "webpack\u4EE3\u7801\u5206\u7247"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E9%80%9A%E8%BF%87%E5%85%A5%E5%8F%A3%E6%8B%86%E5%88%86%E4%BB%A3%E7%A0%81">通过入口拆分代码<a class="anchor" href="#%E9%80%9A%E8%BF%87%E5%85%A5%E5%8F%A3%E6%8B%86%E5%88%86%E4%BB%A3%E7%A0%81">§</a></h2>\n<p>webpack中每个入口都将生成一份对应的资源文件</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js\nentry<span class="token punctuation">:</span> {\n  app<span class="token punctuation">:</span> <span class="token string">\'./main.js\'</span><span class="token punctuation">,</span>\n  lib<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'liba\'</span><span class="token punctuation">,</span> <span class="token string">\'libb\'</span><span class="token punctuation">]</span>\n}\n</code></pre>\n<p>适合将对象挂载到window上的库</p>\n<h2 id="commonschunkplugin">CommonsChunkPlugin<a class="anchor" href="#commonschunkplugin">§</a></h2>\n<p>webpack3.X适用，主要用于多入口之间的公共模块，也可用于提取单页面的模块</p>\n<pre class="language-autoit"><code class="language-autoit">new webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token function">CommonChunkPlugin</span><span class="token punctuation">(</span>{\n  name<span class="token punctuation">:</span> <span class="token string">\'common\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 用于指定公共chunk的名字\n  filename<span class="token punctuation">:</span> <span class="token string">\'common.js\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 提取后的资源名字\n  chunks<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">/</span><span class="token operator">/</span> 提取范围，对应entry里的chunk\n  minChunks<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 数字 被<span class="token number">3</span>以上入口引用才提取，不影响entry中单独配置的提取数组  还可以设置<span class="token function">Infinity</span><span class="token punctuation">(</span>不自动抽离公共模块<span class="token punctuation">)</span> 和 函数<span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> 需要在页面上 在其他js之前引入common<span class="token punctuation">.</span>js\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 提取单页面 \nentry<span class="token punctuation">:</span> {\n  app<span class="token punctuation">:</span> <span class="token string">\'./main.js\'</span><span class="token punctuation">,</span>\n  common<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> 提取第三方类库及业务中不常更新的模块\n}\n<span class="token operator">/</span><span class="token operator">/</span> 插件配置同上\n</code></pre>\n<p>当minChunks为函数时，每个模块都会经该函数处理，传入当前依赖模块的信息module，以及被作为公共模块的数量count，可以在函数中针对每一个模块做更精细化的控制，返回值为true时进行提取。</p>\n<pre class="language-autoit"><code class="language-autoit">minChunks<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> count<span class="token punctuation">)</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> module<span class="token punctuation">.</span>context 模块目录路径\n  <span class="token operator">/</span><span class="token operator">/</span> module<span class="token punctuation">.</span>sourece 模块目录的完整路径\n  <span class="token operator">/</span><span class="token operator">/</span> count 模块被引用的次数\n   return module<span class="token punctuation">.</span>context <span class="token operator">&amp;</span><span class="token operator">&amp;</span>   module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token comment">; </span>\n  <span class="token operator">/</span><span class="token operator">/</span> node_modules 目录下的模块都作为公共部分，效果就如同 webpack <span class="token number">4</span><span class="token punctuation">.</span>x 中的 test<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>\n}\n</code></pre>\n<p>提取webpack的运行时，防止影响公共模块的hash，mainfest的CommonsChunkPlugin必须出现在最后，在页面中引入必须在最前</p>\n<pre class="language-autoit"><code class="language-autoit">new webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token function">CommonChunkPlugin</span><span class="token punctuation">(</span>{\n  name<span class="token punctuation">:</span><span class="token string">\'mainfest\'</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n<p><strong>不足</strong></p>\n<ul>\n<li>\n<p>提取特定入口的特定模块</p>\n</li>\n<li>\n<p>只能提取一个vendor，想提取多个需要配置多次，</p>\n</li>\n<li>\n<p>mainfest会使浏览器多加载一个资源</p>\n</li>\n<li>\n<p>异步情况下会有问题</p>\n</li>\n</ul>\n<p>webpack为每个面模块指定的id是按数字递增的，当有新的模块产生时会导致其他的模块id变化，可能影响vendor的hash。</p>\n<p>解决办法，使用 HashedModuleIds-Plugin 为每个模块按照其所在的路径生成hash id</p>\n<pre class="language-autoit"><code class="language-autoit">new HashedModuleIds<span class="token operator">-</span><span class="token function">Plugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> CommonsChunksPlugin\n</code></pre>\n<h3 id="webpack4x%E9%80%82%E7%94%A8optimizationsplitchunks-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2">webpack4.x适用optimization.SplitChunks 代码分割<a class="anchor" href="#webpack4x%E9%80%82%E7%94%A8optimizationsplitchunks-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2">§</a></h3>\n<p>可以设置提取的条件：提取的模式，提取模块的体积</p>\n<p>基础配置</p>\n<pre class="language-autoit"><code class="language-autoit">optimization<span class="token punctuation">:</span>{    <span class="token operator">/</span><span class="token operator">/</span>帮我们自动做代码分割    \n  splitChunks<span class="token punctuation">:</span>{        \n    chunks<span class="token punctuation">:</span><span class="token string">"all"</span><span class="token punctuation">,</span><span class="token operator">/</span><span class="token operator">/</span>默认是支持异步，all代表所有的chunks代码公共部分抽离出来成为一个单独的文件 \n   } \n}\n</code></pre>\n<p>使用</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">//webpack.config.js </span>\nentry<span class="token operator">:</span> <span class="token punctuation">{</span>\n  lodash<span class="token operator">:</span> <span class="token string">"./lodash.js"</span><span class="token punctuation">,</span>\n  index<span class="token operator">:</span> <span class="token string">"./index.js"</span>\n  <span class="token comment">// vnedor: [\'react\', \'lodash\', ...] // 指定公共使用的第三方类库</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//指定打包后的资源位置  </span>\noutput<span class="token operator">:</span> <span class="token punctuation">{</span>\n  path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  filename<span class="token operator">:</span> <span class="token string">"[name].js"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 全部配置</span>\noptimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n  splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n    chunks<span class="token operator">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span> <span class="token comment">// 对所有chunks生效，如果不配置，默认只对异步资源生效 async（默认） initial all</span>\n    minSize<span class="token operator">:</span> <span class="token punctuation">{</span>\n      javascript<span class="token operator">:</span><span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// 当模块大于30kb</span>\n      style<span class="token operator">:</span><span class="token number">50000</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    maxSize<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 对模块进行二次分割时使用，不推荐</span>\n    minChunks<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 打包成chunk最少有几个引用</span>\n    maxAsyncRequests<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 异步加载并行请求并行请求最大资源数</span>\n    maxInitialReauests<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 首次加载 入口文件并行最大资源数</span>\n    automaticNameDelimiter<span class="token operator">:</span><span class="token string">\'~\'</span><span class="token punctuation">,</span> <span class="token comment">// 分隔符</span>\n    name<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 根据cacheGroups和作用范围自动生成chunk命名</span>\n    cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n      vendors<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 用于提取所有 node_modules 中符合条件的模块</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token comment">// 数字越大 优先级越高</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token keyword module">default</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// default则作用于被多次引用的模块</span>\n        minChunks<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>\n        priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n        resuseExistingChunk<span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 在entry里指定\nentry<span class="token punctuation">:</span> {\n  vendor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"lodash"</span><span class="token punctuation">,</span> <span class="token string">"angular"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 指定公共使用的第三方类库\n}\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nvendor<span class="token punctuation">:</span> {\n          chunks<span class="token punctuation">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span>\n          test<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n          name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 使用 vendor 入口作为公共部分\n          enforce<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        }\n \n<span class="token operator">/</span><span class="token operator">/</span> 使用test来匹配react<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nvendor<span class="token punctuation">:</span> {\n          test<span class="token punctuation">:</span> <span class="token operator">/</span>react|vue|lodash<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 直接使用 test 来做路径匹配\n          chunks<span class="token punctuation">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span>\n          name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n          enforce<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        }\n\n<span class="token operator">/</span><span class="token operator">/</span> 所有在 node\_modules 下的模块，即作为依赖安装的，都作为公共部分\nvendor<span class="token punctuation">:</span> {\n          chunks<span class="token punctuation">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span>\n          test<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 路径在 node_modules 目录下的都作为公共部分\n          name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 使用 vendor 入口作为公共部分\n          enforce<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">,</span>\n</code></pre>\n<ul>\n<li>提取后的chunks可被共享，或者来自node_modules</li>\n<li>提取后的js chunk大于30kB，CSS chunk大于50kB</li>\n<li>按需加载时，并行请求的资源最大值小于等于5</li>\n<li>首次加载时（不计算异步资源），并行请求的资源最大值小于等于3</li>\n</ul>\n<h2 id="%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD">异步加载<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD">§</a></h2>\n<p>正常加载  <code>import  bar from \'./bar.js\'</code>    异步加载 <code>import(\'./bar.js\').then()</code></p>\n<p>配置异步加载的chunk名</p>\n<pre class="language-autoit"><code class="language-autoit">output<span class="token punctuation">:</span> {\n  chunkFileName<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span>\n}\n<span class="token function">import</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">*</span> webpackChunkName<span class="token punctuation">:</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">/</span> <span class="token string">\'./bar.js\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {}<span class="token punctuation">)</span>\n</code></pre>\n<p>如果不添加webpackName会以module id数字的形式命名，这个数字有webpack基于模块自动生成，可能会随着其他模块增减而产生变化，导致资源重新加载</p>\n<h3 id="developmentproduction">development/production<a class="anchor" href="#developmentproduction">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 命令行配置</span>\n<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span> \n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.common.js"</span><span class="token punctuation">)</span> \n<span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n \nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span>devConfig<span class="token punctuation">)</span>\n \n<span class="token comment">//package.js </span>\n<span class="token string">"scripts"</span><span class="token operator">:</span><span class="token punctuation">{</span>    \n    <span class="token string">"dev"</span><span class="token operator">:</span><span class="token string">"webpack-dev-server --config ./build/webpack.dev.js"</span><span class="token punctuation">,</span>    \n    <span class="token string">"build"</span><span class="token operator">:</span><span class="token string">"webpack --config ./build/webpack.prod.js"</span> \n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">//外部传入的全局变量 </span>\nmodule<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>env <span class="token operator">&amp;&amp;</span> env<span class="token punctuation">.</span><span class="token property-access">production</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> prodConfig<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> devConfig<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//外部传入变量 </span>\nscripts<span class="token operator">:</span><span class="token string">" --env.production"</span>\n\n</code></pre>\n<h3 id="bundle%E4%BD%93%E7%A7%AF%E7%9B%91%E6%8E%A7%E5%92%8C%E5%88%86%E6%9E%90">bundle体积监控和分析<a class="anchor" href="#bundle%E4%BD%93%E7%A7%AF%E7%9B%91%E6%8E%A7%E5%92%8C%E5%88%86%E6%9E%90">§</a></h3>\n<p>Vs code 插件 import Cost  可以实时显示引入模块的大小和压缩后的大小</p>\n<h3 id="%E6%89%93%E5%8C%85%E5%88%86%E6%9E%90webpack-bundle-analyzer">打包分析webpack-bundle-analyzer<a class="anchor" href="#%E6%89%93%E5%8C%85%E5%88%86%E6%9E%90webpack-bundle-analyzer">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">scripts<span class="token punctuation">:</span> {\n  <span class="token string">"test:size"</span><span class="token punctuation">:</span> <span class="token string">"bundlesize"</span>\n}\n</code></pre>\n<h3 id="%E9%80%9A%E8%BF%87%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81%E5%88%A9%E7%94%A8%E7%8E%87">通过控制台看看代码利用率<a class="anchor" href="#%E9%80%9A%E8%BF%87%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81%E5%88%A9%E7%94%A8%E7%8E%87">§</a></h3>\n<h3 id="%E6%8A%8Ajs%E9%87%8Cimport%E7%9A%84%E5%BC%82%E6%AD%A5js%E6%96%87%E4%BB%B6%E6%8A%BD%E7%A6%BB%E5%A4%84%E7%90%86">把js里import的异步js文件抽离处理<a class="anchor" href="#%E6%8A%8Ajs%E9%87%8Cimport%E7%9A%84%E5%BC%82%E6%AD%A5js%E6%96%87%E4%BB%B6%E6%8A%BD%E7%A6%BB%E5%A4%84%E7%90%86">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit"> npm install <span class="token operator">-</span><span class="token operator">-</span>save<span class="token operator">-</span>dev <span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>syntax<span class="token operator">-</span>dynamic<span class="token operator">-</span>import \n</code></pre>\n<h3 id="tree-shaking">tree-shaking<a class="anchor" href="#tree-shaking">§</a></h3>\n<p>Tree-shaking起源于ES5模块打包工具rollup，依赖于ES2015模块系统中的静态树结构，可以移除js上下文中未引用的代码，有效减少代码文件的大小。</p>\n<p>webpack3.x需要配置UglifyJsPlugin，会做Tree shaking</p>\n<p>wbepack4.x需要指定mode为production</p>\n<p>在项目中使用了 <a href="http://babeljs.io/">Babel</a> 的话，要把 Babel 解析模块语法的功能关掉，在 <code>.babelrc</code> 配置中增加 <code>&quot;modules&quot;: false</code> 这个配置：</p>\n<pre class="language-autoit"><code class="language-autoit">{\n  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> { <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> }<span class="token punctuation">]</span><span class="token punctuation">]</span>\n}\n</code></pre>\n<p>这样可以把 <code>import/export</code> 的这一部分模块语法交由 webpack 处理，否则没法使用 Tree shaking 的优化。</p>\n<h3 id="sideeffects">sideEffects<a class="anchor" href="#sideeffects">§</a></h3>\n<p>webpack4.x中才有，</p>\n<p>lodash工具库中函数，只用到其中的几个，webpack 的 sideEffects 可以帮助解决这个问题。</p>\n<p>现在 lodash 的ES 版本 的 <code>package.json</code> 文件中已经有 <code>sideEffects: false</code> 这个声明了，当某个模块的 <code>package.json</code> 文件中有了这个声明之后，webpack 会认为这个模块没有任何副作用，只是单纯用来对外暴露模块使用，那么在打包的时候就会做一些额外的处理。</p>\n<p>例如你这么使用 <code>lodash</code>：</p>\n<pre class="language-autoit"><code class="language-autoit">import { forEach<span class="token punctuation">,</span> includes } from <span class="token string">\'lodash-es\'</span>\n\n<span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n</code></pre>\n<p>由于 lodash-es 这个模块的 <code>package.json</code> 文件有 <code>sideEffects: false</code> 的声明，所以 webpack 会将上述的代码转换为以下的代码去处理：</p>\n<p>把没有引用的代码去掉</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js\noptimization<span class="token punctuation">:</span> {    \n  usedExports<span class="token punctuation">:</span> <span class="token boolean">true</span>  \n}\n<span class="token operator">/</span><span class="token operator">/</span>package<span class="token punctuation">.</span>json <span class="token string">"sideEffects"</span><span class="token punctuation">:</span><span class="token boolean">false</span>  正常对所有模块进行tree shaking  或者 <span class="token string">"sideEffects"</span><span class="token punctuation">[</span><span class="token string">\'*.css\'</span><span class="token punctuation">,</span><span class="token string">\'@babel/polyfill\'</span><span class="token punctuation">]</span>\n\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%80%9A%E8%BF%87%E5%85%A5%E5%8F%A3%E6%8B%86%E5%88%86%E4%BB%A3%E7%A0%81" }, "\u901A\u8FC7\u5165\u53E3\u62C6\u5206\u4EE3\u7801")),
            React.createElement("li", null,
                React.createElement("a", { href: "#commonschunkplugin" }, "CommonsChunkPlugin"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#webpack4x%E9%80%82%E7%94%A8optimizationsplitchunks-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2" }, "webpack4.x\u9002\u7528optimization.SplitChunks \u4EE3\u7801\u5206\u5272")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD" }, "\u5F02\u6B65\u52A0\u8F7D"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#developmentproduction" }, "development/production")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#bundle%E4%BD%93%E7%A7%AF%E7%9B%91%E6%8E%A7%E5%92%8C%E5%88%86%E6%9E%90" }, "bundle\u4F53\u79EF\u76D1\u63A7\u548C\u5206\u6790")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%89%93%E5%8C%85%E5%88%86%E6%9E%90webpack-bundle-analyzer" }, "\u6253\u5305\u5206\u6790webpack-bundle-analyzer")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%80%9A%E8%BF%87%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81%E5%88%A9%E7%94%A8%E7%8E%87" }, "\u901A\u8FC7\u63A7\u5236\u53F0\u770B\u770B\u4EE3\u7801\u5229\u7528\u7387")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%8A%8Ajs%E9%87%8Cimport%E7%9A%84%E5%BC%82%E6%AD%A5js%E6%96%87%E4%BB%B6%E6%8A%BD%E7%A6%BB%E5%A4%84%E7%90%86" }, "\u628Ajs\u91CCimport\u7684\u5F02\u6B65js\u6587\u4EF6\u62BD\u79BB\u5904\u7406")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#tree-shaking" }, "tree-shaking")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#sideeffects" }, "sideEffects")))))),
    'author': "dingtt",
    'contributors': [
        "dingtt"
    ],
    'date': "2021-05-02T08:22:31.000Z",
    'updated': null,
    'excerpt': "通过入口拆分代码 webpack中每个入口都将生成一份对应的资源文件 // webpack.config.js entry: { app: './main.js', lib: ['liba', 'libb'] } 适合将对象挂载到window上的库 CommonsChunkPlugin webpack3.X适用，主要用于多入口...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
