import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "dataStructure/data-structure.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "dataStructure/data-structure.html",
    'title': "数据结构",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>数据结构</h1>\n<h3 id="%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h3>\n<h5 id="%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC">替换空格<a class="anchor" href="#%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'  fff sss  \'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>\s<span class="token operator">/</span>g<span class="token punctuation">,</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">表示数值的字符串<a class="anchor" href="#%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">\'1235678656.93\'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6"><em>字符流中第一个不重复的字符</em><a class="anchor" href="#%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6">§</a></h5>\n<pre class="language-js"><code class="language-js"><span class="token comment">// let container = new Array(256).fill(-1)</span>\n<span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  index <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">ch</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> code <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token method function property-access">charCodeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    container<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>index<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n    container<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    index <span class="token operator">++</span> \n    <span class="token function">insert</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> \n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">\'google\'</span><span class="token punctuation">)</span>\n<span class="token comment">// -1 没出现过 code 出现过1次  -2 出现过多次</span>\n<span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token number">256</span>\ncontainer<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> first<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            first <span class="token operator">=</span> value\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>first <span class="token operator">!==</span> <span class="token number">256</span> <span class="token operator">?</span> first <span class="token operator">:</span> <span class="token string">"#"</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97--%E5%9B%9E%E6%BA%AF%E6%B3%95">* 字符串的排列  回溯法*<a class="anchor" href="#-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97--%E5%9B%9E%E6%BA%AF%E6%B3%95">§</a></h5>\n<h5 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC"><em>字符串反转</em><a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">\'hello world\'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">/</span> world hello<span class="token operator">*</span>\n</code></pre>\n<h5 id="%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2"><em>左旋转字符串</em><a class="anchor" href="#%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h5>\n<p><em>// 输入字符串&quot;abcdefg&quot;和数字2，该函数将返回左旋转2位得到的结果&quot;cdefgab&quot;</em></p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">\'abcdefg\'</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F">* 翻转单词顺序：*<a class="anchor" href="#-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F">§</a></h5>\n<h3 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h3>\n<p><strong>创建</strong></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> \n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\nconsr arr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>方法</strong></p>\n<p>concat、some、</p>\n<p>slice</p>\n<p>join、</p>\n<p>sort、</p>\n<p>pop、push shift unshift</p>\n<p>splice(a, b, c)   a索引/b删除个数/c添加元素 splice(1, 1) 删除   splice(1, 0, \'add\')</p>\n<p><strong>遍历</strong></p>\n<p>for  forEach</p>\n<p>map 返回对每一项处理之后的全新数组</p>\n<p>7个改变原数组的方法，vue劫持</p>\n<p>数字操作的复杂度，查询为常数复杂度O(1) ，插入、删除为线性复杂度O(n)</p>\n<h5 id="%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97">数组排成最小数字<a class="anchor" href="#%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97">§</a></h5>\n<p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p>\n<p>例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">PrintMinNumber</span></span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>numbers <span class="token operator">||</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token string">""</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> numbers<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> front <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> behind <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> front <span class="token operator">-</span> behind<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="%E6%95%B0%E7%BB%84%E5%A5%87%E5%81%B6%E9%87%8D%E6%8E%92">数组奇偶重排<a class="anchor" href="#%E6%95%B0%E7%BB%84%E5%A5%87%E5%81%B6%E9%87%8D%E6%8E%92">§</a></h5>\n<p><strong>输入一个整数数组</strong>，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分  双指针</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span><span class="token number">1</span> \n  <span class="token keyword control-flow">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          start <span class="token operator">++</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          end <span class="token operator">--</span>\n      <span class="token punctuation">}</span>\n      <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> arr \n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">reOrderArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">二维数组<a class="anchor" href="#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">§</a></h3>\n<p>fill([]) 不能用了填充二位数组，fill参数是引用类型的话，填充的也是引用类型，所以实际上是一样的值，一改全改。所以需要用for循环，对每一项赋值数组。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 验证缓存数组长度的作用  影响比较小</span>\n<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token comment">// 缓存数组长度</span>\n<span class="token keyword">var</span> beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'缓存了数组长度\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 分别运行</span>\n<span class="token keyword">var</span> beginTime2 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'未缓存数组长度\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime2<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 验证数组嵌套顺序  数组长度的影响  短数组在外层更快</span>\n<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span>\n<span class="token keyword">var</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token property-access">length</span>\n<span class="token keyword">var</span> beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 分别运行</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token punctuation">(</span>len2 <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'长数组在外层\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> beginTime2 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 分别运行 或 beginTime2</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>m <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">===</span> <span class="token punctuation">(</span>len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'短数组在外层\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime2<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h3 id="%E6%A0%88">栈<a class="anchor" href="#%E6%A0%88">§</a></h3>\n<p>后进先出，只能从栈顶添加删除元素（相当于数组的push pop）</p>\n<pre class="language-javascript"><code class="language-javascript">\n\n</code></pre>\n<p>模拟实现</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 窥视</span>\n  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword nil">undefined</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 取栈顶</span>\n<span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'老冰棍\'</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'巧乐兹\'</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'小不丁\'</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> stacktop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token method function property-access">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 栈顶值</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>stacktop<span class="token punctuation">)</span>\n  stack<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 出栈</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>应用 进制转换 括号匹配  栈混洗 表达式求值</p>\n<h3 id="%E9%98%9F%E5%88%97--%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA---%E5%8F%AA%E5%85%81%E8%AE%B8%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E5%A4%B4%E9%83%A8%E5%8F%96%E5%87%BA-%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84push-shift">队列 —— 先进先出   只允许尾部添加，头部取出 (相当于数组的push shift)<a class="anchor" href="#%E9%98%9F%E5%88%97--%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA---%E5%8F%AA%E5%85%81%E8%AE%B8%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E5%A4%B4%E9%83%A8%E5%8F%96%E5%87%BA-%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84push-shift">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword nil">undefined</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword nil">undefined</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span><span class="token method function property-access">enqueue</span><span class="token punctuation">(</span><span class="token string">\'队1\'</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span><span class="token method function property-access">enqueue</span><span class="token punctuation">(</span><span class="token string">\'队2\'</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span><span class="token method function property-access">enqueue</span><span class="token punctuation">(</span><span class="token string">\'队3\'</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> top <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token method function property-access">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取队首</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span>\n  queue<span class="token punctuation">.</span><span class="token method function property-access">dequeue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 出队</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E9%9B%86%E5%90%88">集合<a class="anchor" href="#%E9%9B%86%E5%90%88">§</a></h3>\n<p>模拟集合实现</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// add has remove get size get values</span>\n<span class="token keyword">class</span> <span class="token class-name">Set</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword control-flow">return</span>  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token property-access">size</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token property-access">size</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E9%93%BE%E8%A1%A8">链表<a class="anchor" href="#%E9%93%BE%E8%A1%A8">§</a></h3>\n<p>链表通过每个元素指向下一个元素的方式访问，不需要一段连续的存储空间。</p>\n<p>链表的增加删除元素不用挪动其他多余的的元素 ，链表的添加删除复杂度为常数O(1)，查询读取元素的复杂度为线性复杂度O(n)</p>\n<p>读取元素不能直接获取，只能顺序访问，从第一个开始找</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">ListNode</span></span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">val</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">next</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">)</span>\nnode1<span class="token punctuation">.</span><span class="token property-access">next</span> <span class="token operator">=</span> node2\n<span class="token maybe-class-name">Node</span>\n<span class="token comment">// 构造节点类</span>\nlinkedList   <span class="token comment">// append   removeAt   insert remove size getHead isEmpty log </span>\n<span class="token comment">// 双链表  prev  next  head fail</span>\n</code></pre>\n<p>访问</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">const</span> node <span class="token operator">=</span> head\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token operator">&amp;&amp;</span>node<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">next</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>链表数组</strong>：数组中的每一项指向一个链表</p>\n<h3 id="%E5%93%88%E5%B8%8C%E8%A1%A8">哈希表<a class="anchor" href="#%E5%93%88%E5%B8%8C%E8%A1%A8">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">hashTable</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">keyToHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value\n  <span class="token punctuation">}</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">keyToHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">delete</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">keyToHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">keyToHash</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      hash <span class="token operator">+=</span> key<span class="token punctuation">.</span><span class="token method function property-access">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nht<span class="token punctuation">.</span><span class="token method function property-access">put</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token string">\'custom hashTable\'</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nht<span class="token punctuation">.</span><span class="token method function property-access">delete</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E6%A0%91">树<a class="anchor" href="#%E6%A0%91">§</a></h2>\n<p>树的层次：从根节点到子节点，到叶子节点，这么算</p>\n<p>节点和树的高度：叶子节点高度为1，每往上一层高度加一，直至目标节点，累加得到的高度即为目标节点的高度。 最大的节点高度，即为树的高度。</p>\n<p>度：一个节点有几个子节点，即称为几度</p>\n<p>叶子节点：最后一层的节点，度为0的节点，即是叶子节点</p>\n<h3 id="%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树<a class="anchor" href="#%E4%BA%8C%E5%8F%89%E6%A0%91">§</a></h3>\n<h3 id="%E7%A9%BA%E6%A0%91">空树<a class="anchor" href="#%E7%A9%BA%E6%A0%91">§</a></h3>\n<p>如果不是空树，必须由根节点 左子树 右子树构成，且左右子树都是二叉树。二叉树的左右子树是严格约定不饿能交换的。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>val <span class="token operator">=</span> val\n    this<span class="token punctuation">.</span>left <span class="token operator">=</span> this<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>\n}\n<span class="token keyword">const</span> node  <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86">二叉树遍历<a class="anchor" href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86">§</a></h3>\n<p>先序遍历（递归遍历）</p>\n<p>根结点 左子树 右子树</p>\n<img src="C:\Users\10189\AppData\Roaming\Typora\typora-user-images\image-20200629094640205.png" alt="image-20200629094640205" style="zoom:50%;" />\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> root <span class="token operator">=</span> {\n    val<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span>\n    left<span class="token punctuation">:</span> {\n        val<span class="token punctuation">:</span> <span class="token string">\'B\'</span><span class="token punctuation">,</span>\n        left<span class="token punctuation">:</span> {\n            val<span class="token punctuation">:</span> <span class="token string">\'D\'</span>\n        }<span class="token punctuation">,</span>\n        right<span class="token punctuation">:</span> {\n            val<span class="token punctuation">:</span> <span class="token string">\'E\'</span><span class="token punctuation">,</span>\n            left<span class="token punctuation">:</span> {\n                val<span class="token punctuation">:</span> <span class="token string">\'G\'</span><span class="token punctuation">,</span>\n                right<span class="token punctuation">:</span> {\n                    val<span class="token punctuation">:</span> <span class="token string">\'H\'</span>\n                }\n            }\n        }\n    }<span class="token punctuation">,</span>\n    right<span class="token punctuation">:</span> {\n        val<span class="token punctuation">:</span> <span class="token string">\'C\'</span><span class="token punctuation">,</span>\n        left<span class="token punctuation">:</span> {\n            val<span class="token punctuation">:</span> <span class="token string">\'F\'</span>\n        }\n    }\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> 递归边界\n<span class="token operator">/</span><span class="token operator">/</span> 左序遍历\n<span class="token keyword">const</span> preorder <span class="token operator">=</span> function <span class="token punctuation">(</span>node<span class="token punctuation">)</span> {\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>!node<span class="token punctuation">)</span> return\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'节点\'</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n}\n<span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> A B D E G H C F\n<span class="token operator">/</span><span class="token operator">/</span> 先遍历左节点，左节点不为空就往下执行，右节点hold，直到某个节点N左节点为空，执行N的右节点，假如右节点也为空，则返回上层N<span class="token operator">-</span><span class="token number">1</span>的右节点\n<span class="token operator">/</span><span class="token operator">/</span> 中序遍历（递归遍历）左子树  根结点  右子树\n<span class="token keyword">const</span> preorderM <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>{\n    <span class="token function">if</span><span class="token punctuation">(</span>!node<span class="token punctuation">)</span> return\n    <span class="token function">preorderM</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'节点M\'</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    <span class="token function">preorderM</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n}\n<span class="token function">preorderM</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> D B G H E A F C\n\n<span class="token operator">/</span><span class="token operator">/</span> 后序遍历（递归遍历）  \n<span class="token keyword">const</span> preorderR <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>{\n    <span class="token function">if</span><span class="token punctuation">(</span>!node<span class="token punctuation">)</span>return\n    <span class="token function">preorderR</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    <span class="token function">preorderR</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'节点R\'</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n}\n<span class="token function">preorderR</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> D H G E B F C A\n<span class="token operator">/</span><span class="token operator">/</span> 层次遍历（迭代遍历）\n\n</code></pre>\n<p>左序遍历图</p>\n<img src="C:\Users\10189\AppData\Roaming\Typora\typora-user-images\image-20200629095254511.png" alt="image-20200629095254511" style="zoom:50%;" />\n<p>中序</p>\n<img src="C:\Users\10189\AppData\Roaming\Typora\typora-user-images\image-20200629100926203.png" alt="image-20200629100926203" style="zoom:50%;" />\n<h2 id="%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">时间复杂度和空间复杂度<a class="anchor" href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">§</a></h2>\n<img src="https://user-gold-cdn.xitu.io/2020/4/6/1714f67c52dc8d15?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img" style="zoom:80%;" />'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u6570\u636E\u7ED3\u6784"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h3 id="%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h3>\n<h5 id="%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC">替换空格<a class="anchor" href="#%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'  fff sss  \'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>\s<span class="token operator">/</span>g<span class="token punctuation">,</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">表示数值的字符串<a class="anchor" href="#%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">\'1235678656.93\'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6"><em>字符流中第一个不重复的字符</em><a class="anchor" href="#%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6">§</a></h5>\n<pre class="language-js"><code class="language-js"><span class="token comment">// let container = new Array(256).fill(-1)</span>\n<span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  index <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">ch</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> code <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token method function property-access">charCodeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    container<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>index<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n    container<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    index <span class="token operator">++</span> \n    <span class="token function">insert</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> \n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">\'google\'</span><span class="token punctuation">)</span>\n<span class="token comment">// -1 没出现过 code 出现过1次  -2 出现过多次</span>\n<span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token number">256</span>\ncontainer<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> first<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            first <span class="token operator">=</span> value\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>first <span class="token operator">!==</span> <span class="token number">256</span> <span class="token operator">?</span> first <span class="token operator">:</span> <span class="token string">"#"</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97--%E5%9B%9E%E6%BA%AF%E6%B3%95">* 字符串的排列  回溯法*<a class="anchor" href="#-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97--%E5%9B%9E%E6%BA%AF%E6%B3%95">§</a></h5>\n<h5 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC"><em>字符串反转</em><a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">\'hello world\'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">/</span> world hello<span class="token operator">*</span>\n</code></pre>\n<h5 id="%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2"><em>左旋转字符串</em><a class="anchor" href="#%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h5>\n<p><em>// 输入字符串&quot;abcdefg&quot;和数字2，该函数将返回左旋转2位得到的结果&quot;cdefgab&quot;</em></p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">\'abcdefg\'</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F">* 翻转单词顺序：*<a class="anchor" href="#-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F">§</a></h5>\n<h3 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h3>\n<p><strong>创建</strong></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> \n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\nconsr arr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>方法</strong></p>\n<p>concat、some、</p>\n<p>slice</p>\n<p>join、</p>\n<p>sort、</p>\n<p>pop、push shift unshift</p>\n<p>splice(a, b, c)   a索引/b删除个数/c添加元素 splice(1, 1) 删除   splice(1, 0, \'add\')</p>\n<p><strong>遍历</strong></p>\n<p>for  forEach</p>\n<p>map 返回对每一项处理之后的全新数组</p>\n<p>7个改变原数组的方法，vue劫持</p>\n<p>数字操作的复杂度，查询为常数复杂度O(1) ，插入、删除为线性复杂度O(n)</p>\n<h5 id="%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97">数组排成最小数字<a class="anchor" href="#%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97">§</a></h5>\n<p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p>\n<p>例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">PrintMinNumber</span></span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>numbers <span class="token operator">||</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token string">""</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> numbers<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> front <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> behind <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> front <span class="token operator">-</span> behind<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="%E6%95%B0%E7%BB%84%E5%A5%87%E5%81%B6%E9%87%8D%E6%8E%92">数组奇偶重排<a class="anchor" href="#%E6%95%B0%E7%BB%84%E5%A5%87%E5%81%B6%E9%87%8D%E6%8E%92">§</a></h5>\n<p><strong>输入一个整数数组</strong>，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分  双指针</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span><span class="token number">1</span> \n  <span class="token keyword control-flow">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          start <span class="token operator">++</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          end <span class="token operator">--</span>\n      <span class="token punctuation">}</span>\n      <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> arr \n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">reOrderArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">二维数组<a class="anchor" href="#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">§</a></h3>\n<p>fill([]) 不能用了填充二位数组，fill参数是引用类型的话，填充的也是引用类型，所以实际上是一样的值，一改全改。所以需要用for循环，对每一项赋值数组。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 验证缓存数组长度的作用  影响比较小</span>\n<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token comment">// 缓存数组长度</span>\n<span class="token keyword">var</span> beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'缓存了数组长度\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 分别运行</span>\n<span class="token keyword">var</span> beginTime2 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'未缓存数组长度\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime2<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 验证数组嵌套顺序  数组长度的影响  短数组在外层更快</span>\n<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span>\n<span class="token keyword">var</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token property-access">length</span>\n<span class="token keyword">var</span> beginTime <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 分别运行</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token punctuation">(</span>len2 <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'长数组在外层\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> beginTime2 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 分别运行 或 beginTime2</span>\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>m <span class="token operator">===</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">===</span> <span class="token punctuation">(</span>len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'短数组在外层\'</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime2<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h3 id="%E6%A0%88">栈<a class="anchor" href="#%E6%A0%88">§</a></h3>\n<p>后进先出，只能从栈顶添加删除元素（相当于数组的push pop）</p>\n<pre class="language-javascript"><code class="language-javascript">\n\n</code></pre>\n<p>模拟实现</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 窥视</span>\n  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword nil">undefined</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">stack</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 取栈顶</span>\n<span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'老冰棍\'</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'巧乐兹\'</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'小不丁\'</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> stacktop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token method function property-access">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 栈顶值</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>stacktop<span class="token punctuation">)</span>\n  stack<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 出栈</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>应用 进制转换 括号匹配  栈混洗 表达式求值</p>\n<h3 id="%E9%98%9F%E5%88%97--%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA---%E5%8F%AA%E5%85%81%E8%AE%B8%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E5%A4%B4%E9%83%A8%E5%8F%96%E5%87%BA-%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84push-shift">队列 —— 先进先出   只允许尾部添加，头部取出 (相当于数组的push shift)<a class="anchor" href="#%E9%98%9F%E5%88%97--%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA---%E5%8F%AA%E5%85%81%E8%AE%B8%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E5%A4%B4%E9%83%A8%E5%8F%96%E5%87%BA-%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84push-shift">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword nil">undefined</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword nil">undefined</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">queue</span><span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span><span class="token method function property-access">enqueue</span><span class="token punctuation">(</span><span class="token string">\'队1\'</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span><span class="token method function property-access">enqueue</span><span class="token punctuation">(</span><span class="token string">\'队2\'</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span><span class="token method function property-access">enqueue</span><span class="token punctuation">(</span><span class="token string">\'队3\'</span><span class="token punctuation">)</span>\n<span class="token keyword control-flow">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> top <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token method function property-access">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取队首</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span>\n  queue<span class="token punctuation">.</span><span class="token method function property-access">dequeue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 出队</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E9%9B%86%E5%90%88">集合<a class="anchor" href="#%E9%9B%86%E5%90%88">§</a></h3>\n<p>模拟集合实现</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// add has remove get size get values</span>\n<span class="token keyword">class</span> <span class="token class-name">Set</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword control-flow">return</span>  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token property-access">size</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token method function property-access">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token property-access">size</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E9%93%BE%E8%A1%A8">链表<a class="anchor" href="#%E9%93%BE%E8%A1%A8">§</a></h3>\n<p>链表通过每个元素指向下一个元素的方式访问，不需要一段连续的存储空间。</p>\n<p>链表的增加删除元素不用挪动其他多余的的元素 ，链表的添加删除复杂度为常数O(1)，查询读取元素的复杂度为线性复杂度O(n)</p>\n<p>读取元素不能直接获取，只能顺序访问，从第一个开始找</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">ListNode</span></span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">val</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">next</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">)</span>\nnode1<span class="token punctuation">.</span><span class="token property-access">next</span> <span class="token operator">=</span> node2\n<span class="token maybe-class-name">Node</span>\n<span class="token comment">// 构造节点类</span>\nlinkedList   <span class="token comment">// append   removeAt   insert remove size getHead isEmpty log </span>\n<span class="token comment">// 双链表  prev  next  head fail</span>\n</code></pre>\n<p>访问</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">const</span> node <span class="token operator">=</span> head\n<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token operator">&amp;&amp;</span>node<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">next</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>链表数组</strong>：数组中的每一项指向一个链表</p>\n<h3 id="%E5%93%88%E5%B8%8C%E8%A1%A8">哈希表<a class="anchor" href="#%E5%93%88%E5%B8%8C%E8%A1%A8">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">hashTable</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">keyToHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value\n  <span class="token punctuation">}</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">keyToHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">delete</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">keyToHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">keyToHash</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      hash <span class="token operator">+=</span> key<span class="token punctuation">.</span><span class="token method function property-access">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nht<span class="token punctuation">.</span><span class="token method function property-access">put</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token string">\'custom hashTable\'</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nht<span class="token punctuation">.</span><span class="token method function property-access">delete</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E6%A0%91">树<a class="anchor" href="#%E6%A0%91">§</a></h2>\n<p>树的层次：从根节点到子节点，到叶子节点，这么算</p>\n<p>节点和树的高度：叶子节点高度为1，每往上一层高度加一，直至目标节点，累加得到的高度即为目标节点的高度。 最大的节点高度，即为树的高度。</p>\n<p>度：一个节点有几个子节点，即称为几度</p>\n<p>叶子节点：最后一层的节点，度为0的节点，即是叶子节点</p>\n<h3 id="%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树<a class="anchor" href="#%E4%BA%8C%E5%8F%89%E6%A0%91">§</a></h3>\n<h3 id="%E7%A9%BA%E6%A0%91">空树<a class="anchor" href="#%E7%A9%BA%E6%A0%91">§</a></h3>\n<p>如果不是空树，必须由根节点 左子树 右子树构成，且左右子树都是二叉树。二叉树的左右子树是严格约定不饿能交换的。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>val <span class="token operator">=</span> val\n    this<span class="token punctuation">.</span>left <span class="token operator">=</span> this<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>\n}\n<span class="token keyword">const</span> node  <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86">二叉树遍历<a class="anchor" href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86">§</a></h3>\n<p>先序遍历（递归遍历）</p>\n<p>根结点 左子树 右子树</p>\n<img src="C:\Users\10189\AppData\Roaming\Typora\typora-user-images\image-20200629094640205.png" alt="image-20200629094640205" style="zoom:50%;" />\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> root <span class="token operator">=</span> {\n    val<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span>\n    left<span class="token punctuation">:</span> {\n        val<span class="token punctuation">:</span> <span class="token string">\'B\'</span><span class="token punctuation">,</span>\n        left<span class="token punctuation">:</span> {\n            val<span class="token punctuation">:</span> <span class="token string">\'D\'</span>\n        }<span class="token punctuation">,</span>\n        right<span class="token punctuation">:</span> {\n            val<span class="token punctuation">:</span> <span class="token string">\'E\'</span><span class="token punctuation">,</span>\n            left<span class="token punctuation">:</span> {\n                val<span class="token punctuation">:</span> <span class="token string">\'G\'</span><span class="token punctuation">,</span>\n                right<span class="token punctuation">:</span> {\n                    val<span class="token punctuation">:</span> <span class="token string">\'H\'</span>\n                }\n            }\n        }\n    }<span class="token punctuation">,</span>\n    right<span class="token punctuation">:</span> {\n        val<span class="token punctuation">:</span> <span class="token string">\'C\'</span><span class="token punctuation">,</span>\n        left<span class="token punctuation">:</span> {\n            val<span class="token punctuation">:</span> <span class="token string">\'F\'</span>\n        }\n    }\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> 递归边界\n<span class="token operator">/</span><span class="token operator">/</span> 左序遍历\n<span class="token keyword">const</span> preorder <span class="token operator">=</span> function <span class="token punctuation">(</span>node<span class="token punctuation">)</span> {\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>!node<span class="token punctuation">)</span> return\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'节点\'</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n}\n<span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> A B D E G H C F\n<span class="token operator">/</span><span class="token operator">/</span> 先遍历左节点，左节点不为空就往下执行，右节点hold，直到某个节点N左节点为空，执行N的右节点，假如右节点也为空，则返回上层N<span class="token operator">-</span><span class="token number">1</span>的右节点\n<span class="token operator">/</span><span class="token operator">/</span> 中序遍历（递归遍历）左子树  根结点  右子树\n<span class="token keyword">const</span> preorderM <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>{\n    <span class="token function">if</span><span class="token punctuation">(</span>!node<span class="token punctuation">)</span> return\n    <span class="token function">preorderM</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'节点M\'</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    <span class="token function">preorderM</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n}\n<span class="token function">preorderM</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> D B G H E A F C\n\n<span class="token operator">/</span><span class="token operator">/</span> 后序遍历（递归遍历）  \n<span class="token keyword">const</span> preorderR <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>{\n    <span class="token function">if</span><span class="token punctuation">(</span>!node<span class="token punctuation">)</span>return\n    <span class="token function">preorderR</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    <span class="token function">preorderR</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'节点R\'</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n}\n<span class="token function">preorderR</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> D H G E B F C A\n<span class="token operator">/</span><span class="token operator">/</span> 层次遍历（迭代遍历）\n\n</code></pre>\n<p>左序遍历图</p>\n<img src="C:\Users\10189\AppData\Roaming\Typora\typora-user-images\image-20200629095254511.png" alt="image-20200629095254511" style="zoom:50%;" />\n<p>中序</p>\n<img src="C:\Users\10189\AppData\Roaming\Typora\typora-user-images\image-20200629100926203.png" alt="image-20200629100926203" style="zoom:50%;" />\n<h2 id="%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">时间复杂度和空间复杂度<a class="anchor" href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">§</a></h2>\n<img src="https://user-gold-cdn.xitu.io/2020/4/6/1714f67c52dc8d15?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img" style="zoom:80%;" />'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AD%97%E7%AC%A6%E4%B8%B2" }, "\u5B57\u7B26\u4E32"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%95%B0%E7%BB%84" }, "\u6570\u7EC4"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84" }, "\u4E8C\u7EF4\u6570\u7EC4")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%A0%88" }, "\u6808")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%98%9F%E5%88%97--%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA---%E5%8F%AA%E5%85%81%E8%AE%B8%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E5%A4%B4%E9%83%A8%E5%8F%96%E5%87%BA-%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84push-shift" }, "\u961F\u5217 \u2014\u2014 \u5148\u8FDB\u5148\u51FA   \u53EA\u5141\u8BB8\u5C3E\u90E8\u6DFB\u52A0\uFF0C\u5934\u90E8\u53D6\u51FA (\u76F8\u5F53\u4E8E\u6570\u7EC4\u7684push shift)")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%9B%86%E5%90%88" }, "\u96C6\u5408")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%93%BE%E8%A1%A8" }, "\u94FE\u8868")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%93%88%E5%B8%8C%E8%A1%A8" }, "\u54C8\u5E0C\u8868")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%A0%91" }, "\u6811"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BA%8C%E5%8F%89%E6%A0%91" }, "\u4E8C\u53C9\u6811")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%A9%BA%E6%A0%91" }, "\u7A7A\u6811")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86" }, "\u4E8C\u53C9\u6811\u904D\u5386")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" }, "\u65F6\u95F4\u590D\u6742\u5EA6\u548C\u7A7A\u95F4\u590D\u6742\u5EA6")))),
    'author': "dingtt",
    'contributors': [
        "dingtt"
    ],
    'date': "2021-05-02T08:22:31.000Z",
    'updated': null,
    'excerpt': "字符串 替换空格 console.log(' fff sss '.replace(/\\s/g,'')) 表示数值的字符串 '1235678656.93'.replace() 字符流中第一个不重复的字符 // let container = new Array(256).fill(-1) let container = new Map() let index = ...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
