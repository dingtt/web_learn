import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "link": "webpack/index.html",
        "text": "Webpack"
    },
    'next': {
        "text": "Webpack打包原理解析",
        "link": "webpack/webpack-principle.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'gh-pages' },
    'pagePath': "webpack/webpack-use.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "webpack/webpack-use.html",
    'title': "webpack的使用",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>webpack的使用</h1>\n<h2 id="%E6%A8%A1%E5%9D%97%E5%8C%96">模块化<a class="anchor" href="#%E6%A8%A1%E5%9D%97%E5%8C%96">§</a></h2>\n<p>传统的script标签引入js，需要手动维护加载顺序，隐式依赖不容易被发现，每个script的src都意味着一次http请求，顶层作用域即全局作用域，不加限制容易导致全局变量污染。</p>\n<p>模块化，通过倒入导入清晰展现依赖关系，从而借助工具来进行打包合并资源文件，多个模块之间的作用域是隔离的。</p>\n<p>ES6模块标准以得到大部分浏览器支持，但是无法使用code splitting 和 tree shaing，大多数的npm模块还是CommonJS的格式，浏览器不支持。</p>\n<p>打包工具，Webpack，Parcel，Rollup</p>\n<h2 id="%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">安装和使用<a class="anchor" href="#%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">§</a></h2>\n<p>webpack是一个模块打包工具，可以识别出引入模块的语法</p>\n<ul>\n<li>默认支持多种模块标准，包括AMD，CommonJS，以及ES6模块</li>\n<li>完备的代码分割（code splitting）解决方案</li>\n<li>可以处理各种类型的资源</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 局部安装 </span>\nnpm install webpack webpack<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span> <span class="token comment">//webpack-cli 可以帮助我们在命令⾏行行⾥里里使⽤用npx ,webpack等相关指令</span>\nnpx webpack <span class="token operator">-</span>v <span class="token comment">// npx帮助我们在项⽬目中的node_modules⾥里里查找webpack</span>\n\nnpx webpack <span class="token comment">// 使用默认配置文件</span>\nnpx webpack <span class="token operator">--</span>config webpackconfig<span class="token punctuation">.</span><span class="token property-access">js</span> <span class="token comment">//指定webpack使⽤用webpackconfig.js⽂文件来作为 配置⽂文件并执⾏行行</span>\n</code></pre>\n<p><em>4.X版本之后需要单独安装webpack-cli</em></p>\n<p>scripts是npm提供的脚本命令功能</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --mode production"</span> <span class="token comment">// 有npm run 时无需npx</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>全局安装可以直接运行 <code>webpack --mode production</code>，非全局安装需要使用<code>npm run build</code>，通过npm寻找命令执行</p>\n<p>默认的配置文件为 webpack.config.js，webpack运行时会读取目录下的该文件</p>\n<p>不同项目使用的webpack版本可能不一致，所以不推荐全局安装</p>\n<h2 id="webpack%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5">Webpack的核心概念<a class="anchor" href="#webpack%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5">§</a></h2>\n<h3 id="%E5%85%A5%E5%8F%A3">入口<a class="anchor" href="#%E5%85%A5%E5%8F%A3">§</a></h3>\n<p>配置入口文件，即webpack构建的入口，会从它开始依赖分析进行打包。打包结果默认放在当前目录下的dist目录，打包的模块名是main.js</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 直接字符串</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  context<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 路径前缀</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/main.js\'</span> <span class="token comment">// 字符串类型入口</span>\n  <span class="token comment">// entry: [\'./src.main.js\', \'./src/.js\']</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> \n<span class="token comment">// 数组类型入口 </span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'babel-polyfill\'</span><span class="token punctuation">,</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">]</span>\n  <span class="token comment">// 传入一个数组的作用是将做个资源预先合并，在打包时Webpack会将数组的最后一个元素作为实际的入口路径，相当于index.js中 import(\'babel-polyfill\')</span>\n  \n<span class="token punctuation">}</span>\n<span class="token comment">//  对象类型入口 单入口</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    main<span class="token operator">:</span> <span class="token string">\'./src/main.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 对象类型入口 多入口</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  enrty<span class="token operator">:</span> <span class="token punctuation">{</span>\n    admin<span class="token operator">:</span> <span class="token string">\'./src/admin.js\'</span><span class="token punctuation">,</span> <span class="token comment">// chunk name 为admin  这里后面也可以用字符串或数组，单不能定义chunk name</span>\n    index<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span> <span class="token comment">// chunk  name 为index</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 函数类型入口 使用函数返回上面任意一种配置  函数的好处在于可以动态计算，还支持返回promise对象来进行异步操作</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">entry</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    index<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'babel-polyfill\'</span><span class="token punctuation">,</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="output">output<a class="anchor" href="#output">§</a></h3>\n<p>打包后的文件位置</p>\n<pre class="language-javascript"><code class="language-javascript">output<span class="token operator">:</span> <span class="token punctuation">{</span>\n  pubilcPath<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 用来指定资源的请求位置，</span>\n  <span class="token comment">// 可以使用相对HTML的路径， \'\' ,\'./js\', \'./static\', \'../assets\'</span>\n  <span class="token comment">// 相对\'/\'的路径（相对当前页面host name） \'/\' \'/js\' \'/dist\'</span>\n  <span class="token comment">// 以及CDN路径</span>\n  filename<span class="token operator">:</span> <span class="token string">\'main.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 这里支持路径，不存在将创建</span>\n  <span class="token comment">// filename: \'[name]_[hash].[ext]\' // </span>\n  <span class="token comment">// 绝对路径</span>\n  path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>_dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span> <span class="token comment">// path指资源的输出位置，必须是绝对路径</span>\n  <span class="token comment">// __dirname Node.js内置变量，值为当前文件所在的绝对路径</span>\n  <span class="token comment">// path.resolve拼装函数  / ./ ../</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>\n<p>[hash] Webpack此次打包所有资源生成的hash</p>\n</li>\n<li>\n<p>[chunkhash] 当前chunk内容的hash</p>\n</li>\n<li>\n<p>[id] 当前chunk的id</p>\n</li>\n<li>\n<p>[query] filename配置项中的query</p>\n</li>\n</ul>\n<h3 id="loader">loader<a class="anchor" href="#loader">§</a></h3>\n<p>loader是webpack中处理多种文件格式的机制，负责把某种文件格式的内容转换成webpack可以支持打包的模块。</p>\n<p>loader可以是链式的，接收的可能是工程源文件的字符串，也可能是上个loader转化后的结果字符串、source map，以及AST对象，输出类似。</p>\n<pre class="language-javascript"><code class="language-javascript">modules<span class="token punctuation">.</span><span class="token keyword module">export</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// 模块的处理规则</span>\n        <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.xxx$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 匹配文件，通常是匹配文件后缀  接收正则表达式，或元素为正则表达式的数组</span>\n        enforce<span class="token operator">:</span><span class="token string">\'pre\'</span><span class="token punctuation">,</span> <span class="token comment">// pre所有loader之前，比如eslint-loader； post所有loader之后，入babel-loader；不配置该项为normal；inline已不推荐 </span>\n        <span class="token comment">// noParse: /jquery|lodash/, // 正则表达式 配置哪些模块文件的内容不需要进行解析，文件中不能使用 `import`、`require`、`define` 等导入机制,适合一些**不需要解析依赖（即无依赖）** 的第三方大型类库等，</span>\n        include<span class="token operator">:</span> <span class="token punctuation">[</span>\n          path<span class="token punctuation">.</span><span class="token method function property-access">recolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span> <span class="token comment">// 指定哪些路径下的该类文件需要处理</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除目录，exclude和include同时存在，exclude优先级更高</span>\n        <span class="token comment">// /node_modules\/(?!(foo|bar)\/).*/ // 排除 排除中的目录的模块，从而设置对该模块生效</span>\n        <span class="token comment">// use: \'xxx-loader\', </span>\n        <span class="token comment">// use: [\'xxx-loader\', \'yyy-loader\'] // loader有顺序，从后向前，从下向上</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span>\n          loader<span class="token operator">:</span> <span class="token string">\'xxx-load\'</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 可以传入配置项，还可以在loader名称后使用query的方式传入</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 还可以写成如下格式，resource 和issuer</span>\n        <span class="token comment">// resource: {</span>\n        <span class="token comment">//  test:\'\',</span>\n        <span class="token comment">//  include:\'\'</span>\n        <span class="token comment">// },</span>\n        <span class="token comment">// issuer: { // 对于引用模块的文件生效</span>\n        <span class="token comment">//  test:/\.js$/,</span>\n         <span class="token comment">// include:\'src/pages\' // 只有该目录下的，同上类型文件，引入的符合test的模块，才会进行loader处理</span>\n        <span class="token comment">//  exclude:/node_modules/ // 排除该目录下，同上类型的文件，其他文件引入的符合test的模块</span>\n        <span class="token comment">// }</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>所有的 loader 按照<strong>前置 -&gt; 行内 -&gt; 普通 -&gt; 后置</strong>的顺序执行</p>\n<h3 id="loader%E8%A7%84%E5%88%99">loader规则<a class="anchor" href="#loader%E8%A7%84%E5%88%99">§</a></h3>\n<ul>\n<li><code>{ test: ... }</code> 匹配特定条件</li>\n<li><code>{ include: ... }</code> 匹配特定路径</li>\n<li><code>{ exclude: ... }</code> 排除特定路径</li>\n<li><code>{ and: [...] }</code>必须匹配数组中所有条件</li>\n<li><code>{ or: [...] }</code> 匹配数组中任意一个条件</li>\n<li><code>{ not: [...] }</code> 排除匹配数组中所有条件</li>\n</ul>\n<p>上述的所谓条件的值可以是：</p>\n<ul>\n<li>字符串：必须以提供的字符串开始，所以是字符串的话，这里我们需要提供绝对路径</li>\n<li>正则表达式：调用正则的 <code>test</code> 方法来判断匹配</li>\n<li>函数：(path) =&gt; boolean，返回 <code>true</code> 表示匹配</li>\n<li>数组：至少包含一个条件的数组</li>\n<li>对象：匹配所有属性值的条件</li>\n</ul>\n<h3 id="module-type">module type<a class="anchor" href="#module-type">§</a></h3>\n<p>webpack 4.x 版本强化了 module type，即模块类型的概念，不同的模块类型类似于配置了不同的 loader，webpack 会有针对性地进行处理，现阶段实现了以下 5 种模块类型。</p>\n<ul>\n<li><code>javascript/auto</code>：即 webpack 3 默认的类型，支持现有的各种 JS 代码模块类型 —— CommonJS、AMD、ESM</li>\n<li><code>javascript/esm</code>：ECMAScript modules，其他模块系统，例如 CommonJS 或者 AMD 等不支持，是 <code>.mjs</code> 文件的默认类型</li>\n<li><code>javascript/dynamic</code>：CommonJS 和 AMD，排除 ESM</li>\n<li><code>javascript/json</code>：JSON 格式数据，<code>require</code> 或者 <code>import</code> 都可以引入，是 <code>.json</code> 文件的默认类型</li>\n<li><code>webassembly/experimental</code>：WebAssembly modules，当前还处于试验阶段，是 <code>.wasm</code> 文件的默认类型</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">{\n  test<span class="token punctuation">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>js<span class="token operator">/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'javascript/esm\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 这里指定模块类型\n}<span class="token punctuation">,</span>\n</code></pre>\n<h3 id="%E5%B8%B8%E7%94%A8loader">常用loader<a class="anchor" href="#%E5%B8%B8%E7%94%A8loader">§</a></h3>\n<h4 id="babel-loader-%E5%B0%86es6%E8%BD%AC%E5%8C%96%E4%B8%BAes5">babel-loader 将ES6转化为ES5<a class="anchor" href="#babel-loader-%E5%B0%86es6%E8%BD%AC%E5%8C%96%E4%B8%BAes5">§</a></h4>\n<p>babel-loader需要设置exclude排除node_modules</p>\n<p>babel-loader本身添加了cacheDirectory配置项，缓存机制在重复打包未改变过的模块时防止二次编译</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 在dev模式中，默认开启，关闭的话 可以在配置⽂文件⾥里里</span>\n\n<span class="token comment">//babel-loader是webpack 与 babel的通信桥梁梁，不不会做把es6转成es5的⼯工作，这部分⼯工作需要⽤用 到@babel/preset-env来做</span>\n<span class="token comment">//@babel/preset-env⾥里里包含了了es6转es5的转换规则</span>\n\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript">rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">{</span>\n    loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheDirectory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>\n        <span class="token string">\'env\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 阻止@babel/preset-env会ES6 转化为CommonJS的形式（会导致webpack中的tree-shaking失效）</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>babel-loader 支持从 .babelrc文件读取babel配置</p>\n<h4 id="babelpolyfill">@babel/polyfill<a class="anchor" href="#babelpolyfill">§</a></h4>\n<p>把es的新特性都引入，例如Promise等，默认会把所有特性都注入到<strong>全局变量</strong></p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 按需引入的设置，可以配置到<span class="token punctuation">.</span>babelrc里\noptions<span class="token punctuation">:</span> {\n  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>\n     {\n      targets<span class="token punctuation">:</span> {\n       edge<span class="token punctuation">:</span><span class="token string">"17"</span><span class="token punctuation">,</span>\n       firefix<span class="token punctuation">:</span><span class="token string">"60"</span><span class="token punctuation">,</span>\n       chrome<span class="token punctuation">:</span><span class="token string">"66"</span><span class="token punctuation">,</span>\n       safari<span class="token punctuation">:</span><span class="token string">"11.1"</span><span class="token punctuation">,</span>\n      }<span class="token punctuation">,</span>\n      useBuiltIns<span class="token punctuation">:</span> <span class="token string">\'usage\'</span> <span class="token operator">/</span><span class="token operator">/</span> 按需引入<span class="token punctuation">,</span>useBuiltIns 选项是 babel <span class="token number">7</span> 的新功能<span class="token punctuation">,</span>告诉 babel 如何配置                      <span class="token operator">/</span><span class="token operator">/</span> <span class="token variable">@babel</span><span class="token operator">/</span>polyfill  entry 需要在entry里引入import <span class="token string">"@babel/polyfill"</span>，usage 不需要import\n     }\n     <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">,</span> <span class="token string">"@babel/preset-react"</span>  <span class="token operator">/</span><span class="token operator">/</span> 打包react选安装配置的\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n}\n</code></pre>\n<h4 id="babelplugin-tranform-runtime">@babel/plugin-tranform-runtime<a class="anchor" href="#babelplugin-tranform-runtime">§</a></h4>\n<p>闭包方式引入</p>\n<pre class="language-autoit"><code class="language-autoit">npm i <span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>tranform<span class="token operator">-</span>runtime <span class="token operator">-</span>S\nnpm i <span class="token variable">@babel</span><span class="token operator">/</span>runntime <span class="token operator">-</span>S\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 注释preset<span class="token operator">-</span>env 写入配置文件<span class="token punctuation">.</span>babelrc\n{\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   <span class="token punctuation">[</span>\n     <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>\n     {\n       <span class="token string">"absoluteRuntime"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        \n       <span class="token string">"corejs"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> \n        <span class="token string">"helpers"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        \n        <span class="token string">"regenerator"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        \n        <span class="token string">"useESModules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> \n     }\n   <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n}\n</code></pre>\n<h4 id="ts-loader">ts-loader<a class="anchor" href="#ts-loader">§</a></h4>\n<p>将Typescript 转换未javascript</p>\n<pre class="language-autoit"><code class="language-autoit">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  {\n    test<span class="token punctuation">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>ts$<span class="token operator">/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span>\n  }\n<span class="token punctuation">]</span>\n</code></pre>\n<p>TS的配置在工程目录下的tscofig.json中</p>\n<pre class="language-autoit"><code class="language-autoit">{\n  <span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> {\n    <span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">\'es5\'</span><span class="token punctuation">,</span>\n    <span class="token string">"sourceMap"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>\n  }\n}\n</code></pre>\n<h4 id="html-loader">html-loader<a class="anchor" href="#html-loader">§</a></h4>\n<p>用于将HTML文件转化为字符串并进行格式化</p>\n<h5 id="handlebars-loader-%E5%A4%84%E7%90%86handlebars%E6%A8%A1%E6%9D%BF">handlebars-loader 处理handlebars模板<a class="anchor" href="#handlebars-loader-%E5%A4%84%E7%90%86handlebars%E6%A8%A1%E6%9D%BF">§</a></h5>\n<p>handlebars文件加载后得到一个函数，函数接收变量对象作为参数，可返回最终的字符串</p>\n<h4 id="file-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">file-loader 处理静态资源模块<a class="anchor" href="#file-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">§</a></h4>\n<p><strong>作用</strong></p>\n<p>把打包入口中识别处理的资源模块，从源代码移动到输出目录，并且返回一个地址名称</p>\n<p><strong>应用场景</strong></p>\n<p>txt，svg，md，csv，excel，图片等资源</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 额外的配置，资源名称输出目录等</span>\n          name<span class="token operator">:</span> <span class="token string">\'[name]_[hash].[ext]\'</span><span class="token punctuation">,</span> <span class="token comment">// [name]原来的资源文件名，文件hash，[ext]扩展名</span>\n          publicPath<span class="token operator">:</span><span class="token string">\'imgages/\'</span> <span class="token comment">// 输出到的位置 file-loader中的publicPath会覆盖Webpack中的publicPath</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="url-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">url-loader 处理静态资源模块<a class="anchor" href="#url-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">§</a></h4>\n<p>url-loader可以处理file-loader所有的事情，不同的地方在于，url-loader可以把图片转换成base64格式。这种转换仅适合于较小的图片，可以配置转换阈值。</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n        <span class="token comment">// include: [], // 最好加上include范围，提高执行效率</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 配置资源名称输出目录等</span>\n          name<span class="token operator">:</span> <span class="token string">\'[name]_[hash].[ext]\'</span><span class="token punctuation">,</span> <span class="token comment">// 原来的资源文件名，文件hash，扩展名</span>\n          publicPath<span class="token operator">:</span><span class="token string">\'imgages/\'</span> <span class="token comment">// 输出到的位置</span>\n          limit<span class="token operator">:</span> <span class="token number">10000</span> <span class="token comment">// limit默认值是10000，小于8kb的图片才会被编译</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>注：url-loader默认只会处理html和css中的图片，JS中可以通过import引入图片通过一个变量接收</p>\n<h4 id="%E6%A0%B7%E5%BC%8F%E5%A4%84%E7%90%86loader">样式处理loader<a class="anchor" href="#%E6%A0%B7%E5%BC%8F%E5%A4%84%E7%90%86loader">§</a></h4>\n<p>css-loader 分析各css模块之间的关系，合成一个css</p>\n<p>style-loader 会把css-loader生成的内容，以style挂载到页面的header部分</p>\n<p>sass-loader 把sass语法转换成css，依赖node-sass模块 <code>npm install sass-loader node-sass -D</code></p>\n<p>less-loader</p>\n<p>postcss-loader post-css需要有单独的配置文件 postcss-loader</p>\n<pre class="language-autoit"><code class="language-autoit">{\n  test<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">^</span>\<span class="token punctuation">.</span>scss$<span class="token operator">/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> \n  {loader<span class="token punctuation">:</span><span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> \n  options<span class="token punctuation">:</span> {\n     minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 使用 css 的压缩功能<span class="token punctuation">,</span>css<span class="token operator">-</span>loader 是使用cssnano来压缩代码的，`minimize` 字段也可以配置为一个对象，来将相关配置传递给 cssnano\n  }}<span class="token punctuation">,</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">]</span>\n}\n</code></pre>\n<h4 id="image-webpack-loader%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87">image-webpack-loader压缩图片<a class="anchor" href="#image-webpack-loader%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\.(gif|png|jpe?g|svg|webp)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'image-webpack-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              mozjpeg<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 压缩 jpeg 的配置</span>\n                progressive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                quality<span class="token operator">:</span> <span class="token number">65</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              optipng<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 使用 imagemin-optipng 压缩 png，enable: false 为关闭</span>\n                enabled<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              pngquant<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 使用 imagemin-pngquant 压缩 png</span>\n                quality<span class="token operator">:</span> <span class="token string">\'65-90\'</span><span class="token punctuation">,</span>\n                speed<span class="token operator">:</span> <span class="token number">4</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              gifsicle<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 压缩 gif 的配置</span>\n                interlaced<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              webp<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式</span>\n                quality<span class="token operator">:</span> <span class="token number">75</span>\n              <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>image-webpack-loader 的压缩是使用 <a href="https://github.com/imagemin">imagemin</a> 提供的一系列图片压缩类库来处理的</p>\n<h4 id="vue%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90">Vue模板解析<a class="anchor" href="#vue%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90">§</a></h4>\n<p>vue-loader   还依赖 vue-tempalte-compiler css-loader  , CSS样式的预处理器</p>\n<pre class="language-autoit"><code class="language-autoit">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  {\n  test<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">^</span>\<span class="token punctuation">.</span>vue$<span class="token operator">/</span>\n  use<span class="token punctuation">:</span><span class="token string">\'vue-loader\'</span>\n  }\n<span class="token punctuation">]</span>\n</code></pre>\n<h4 id="css-modules">CSS Modules<a class="anchor" href="#css-modules">§</a></h4>\n<p>每个css文件都有单独的作用域，对css进行依赖关系，可以通过相对路径引入css文件，可以通过composes轻松复用其他CSS模块</p>\n<p>只需要开启css-loader配置项中的modules : true</p>\n<pre class="language-autoit"><code class="language-autoit">options<span class="token punctuation">:</span>{\n  modules<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n  localIdentName<span class="token punctuation">:</span><span class="token string">\'[name]_[local]_[hash:base64:5]\'</span> <span class="token operator">/</span><span class="token operator">/</span> 模块名 选择符 <span class="token number">5</span>位哈希\n}\n</code></pre>\n<p>使用CSSmodules时css文件会导出一个对象，我们需要把对象的属性添加到html标签上</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// style.css</span>\n<span class="token punctuation">.</span><span class="token property-access">title</span> <span class="token punctuation">{</span>\n  color<span class="token operator">:</span>#f938ab<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// app.js</span>\n<span class="token keyword module">import</span> <span class="token imports">styles</span> <span class="token keyword module">from</span> <span class="token string">\'./style.css\'</span>\n<span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1 calss={$styles.title}>优点复杂&lt;/h1></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%B8%B8%E7%94%A8plugin">常用plugin<a class="anchor" href="#%E5%B8%B8%E7%94%A8plugin">§</a></h3>\n<h4 id="html-webpack-plugin">html-webpack-plugin<a class="anchor" href="#html-webpack-plugin">§</a></h4>\n<p>会自动把打包处理的资源名放入到生成的index.html中，支持传入html模板</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'index.html\'</span><span class="token punctuation">,</span> <span class="token comment">// 配置输出文件名和路径</span>\n      template<span class="token operator">:</span> <span class="token string">\'public/index.html\'</span><span class="token punctuation">,</span> <span class="token comment">// 配置文件模板</span>\n      minify<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 压缩 HTML 的配置,minify下的配置项直接透传给 html-minifier</span>\n        minifyCSS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 压缩 HTML 中出现的 CSS 代码</span>\n        minifyJS<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 压缩 HTML 中出现的 JS 代码</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<p><em>webpack 4.x 版本运行时，mode 为 production 即会启动压缩 JS 代码的插件</em></p>\n<h4 id="extract-text-webpack-plugin-%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86webpack4%E5%89%8D">extract-text-webpack-plugin 样式文件处理webpack4前<a class="anchor" href="#extract-text-webpack-plugin-%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86webpack4%E5%89%8D">§</a></h4>\n<p>样式的提取是以资源入口开始的整个chunk为单位的，chunk是一组具有依赖关系的模块的封装，多个构建入口，extract-text-webpack-plugin 会为每一个入口创建单独分离的文件。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token maybe-class-name">ExtractTextPlugin</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token comment">// 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span>\n        use<span class="token operator">:</span> <span class="token maybe-class-name">ExtractTextPlugin</span><span class="token punctuation">.</span><span class="token method function property-access">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n          fallback<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 引入插件，配置文件名，这里同样可以使用 [hash]</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'index.css\'</span><span class="token punctuation">)</span>\n    <span class="token comment">//  new ExtractTextPlugin(\'[name].css\')</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="mini-css-extract-plugin">mini-css-extract-plugin<a class="anchor" href="#mini-css-extract-plugin">§</a></h4>\n<p>支持按需加载，</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token comment">// 插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span>\n          loader<span class="token operator">:</span> <span class="token maybe-class-name">MiniCssExtractPlugin</span><span class="token punctuation">.</span><span class="token property-access">loader</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span> <span class="token punctuation">{</span>\n            publicPath<span class="token operator">:</span><span class="token string">\'../\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string">\'css-loader\'</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\nplugins<span class="token operator">:</span><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].css\'</span><span class="token punctuation">,</span> <span class="token comment">// chunkname 对英entry里的key  同步加载的css资源名</span>\n    chunkFilename<span class="token operator">:</span> <span class="token string">\'[id].css\'</span> <span class="token comment">// 指定异步加载的css资源名</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h4 id="css-sprites-%E7%B2%BE%E7%81%B5%E5%9B%BE">CSS Sprites 精灵图<a class="anchor" href="#css-sprites-%E7%B2%BE%E7%81%B5%E5%9B%BE">§</a></h4>\n<p><a href="https://github.com/mixtur/webpack-spritesmith">webpack-spritesmith</a> 或者 <a href="https://github.com/kezoo/sprite-webpack-plugin">sprite-webpack-plugin</a></p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ... 这里需要有处理图片的 loader，如 file-loader</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nresolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'node_modules\'</span><span class="token punctuation">,</span> \n    <span class="token string">\'spritesmith-generated\'</span><span class="token punctuation">,</span> <span class="token comment">// webpack-spritesmith 生成所需文件的目录</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nplugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">SpritesmithPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    src<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cwd<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/ico\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 多个图片所在的目录</span>\n      glob<span class="token operator">:</span> <span class="token string">\'*.png\'</span> <span class="token comment">// 匹配图片的路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    target<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 生成最终图片的路径</span>\n      image<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/spritesmith-generated/sprite.png\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n      <span class="token comment">// 生成所需 SASS/LESS/Stylus mixins 代码，我们使用 Stylus 预处理器做例子</span>\n      css<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/spritesmith-generated/sprite.styl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    apiOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cssImageRef<span class="token operator">:</span> <span class="token string">"~sprite.png"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>CSS文件里引入</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token variable">@import</span> <span class="token string">\'~sprite.styl\'</span>\n\n<span class="token punctuation">.</span>close<span class="token operator">-</span>button\n    <span class="token function">sprite</span><span class="token punctuation">(</span><span class="token variable">$close</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span>open<span class="token operator">-</span>button\n    <span class="token function">sprite</span><span class="token punctuation">(</span><span class="token variable">$open</span><span class="token punctuation">)</span>\n</code></pre>\n<p>webpack4.X中的精灵图需要postcss和 <a href="https://github.com/2createStudio/postcss-sprites">postcss-sprites</a> 才能实现</p>\n<h4 id="defineplugin">definePlugin<a class="anchor" href="#defineplugin">§</a></h4>\n<p>DefinePlugin 是 webpack 内置的插件，可以使用 <code>webpack.DefinePlugin</code> 直接获取。</p>\n<ul>\n<li>如果配置的值是字符串，那么整个字符串会被当成代码片段来执行，其结果作为最终变量的值，如上面的 <code>&quot;1+1&quot;</code>，最后的结果是 <code>2</code></li>\n<li>如果配置的值不是字符串，也不是一个对象字面量，那么该值会被转为一个字符串，如 <code>true</code>，最后的结果是 <code>\'true\'</code></li>\n<li>如果配置的是一个对象字面量，那么该对象的所有 key 会以同样的方式去定义</li>\n</ul>\n<p>需要使用JSON.stringfy(), <code>JSON.stringify(true)</code> 的结果是 <code>\'true\'</code></p>\n<blockquote>\n<p>建议使用 process.env.NODE_ENV: ... 的方式来定义 process.env.NODE_ENV，而不是使用 process: { env: { NODE_ENV: ... } } 的方式，因为这样会覆盖掉 process 这个对象，可能会对其他代码造成影响。</p>\n</blockquote>\n<h4 id="provideplugin">ProvidePlugin<a class="anchor" href="#provideplugin">§</a></h4>\n<p>ProvidePlugin 也是一个 webpack 内置的插件，我们可以直接使用 <code>webpack.ProvidePlugin</code> 来获取。</p>\n<p>该组件用于引用某些模块作为应用运行时的变量，从而不必每次都用 <code>require</code> 或者 <code>import</code>，其用法相对简单：</p>\n<pre class="language-autoit"><code class="language-autoit">new webpack<span class="token punctuation">.</span><span class="token function">ProvidePlugin</span><span class="token punctuation">(</span>{\n  identifier<span class="token punctuation">:</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span>\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n}<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> 或者\nnew webpack<span class="token punctuation">.</span><span class="token function">ProvidePlugin</span><span class="token punctuation">(</span>{\n  identifier<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'property\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 即引用 module 下的 property，类似 import { property } from <span class="token string">\'module\'</span>\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n}<span class="token punctuation">)</span>\n\n</code></pre>\n<p>在你的代码中，当 <code>identifier</code> 被当作未赋值的变量时，module 就会被自动加载了，而 <code>identifier</code> 这个变量即 module 对外暴露的内容。</p>\n<p>注意，如果是 ES 的 <code>default export</code>，那么你需要指定模块的 <code>default</code> 属性：<code>identifier: [\'module\', \'default\']</code></p>\n<h4 id="ignoreplugin">IgnorePlugin<a class="anchor" href="#ignoreplugin">§</a></h4>\n<p>IgnorePlugin 和 ProvidePlugin 一样，也是一个 webpack 内置的插件，可以直接使用 <code>webpack.IgnorePlugin</code> 来获取。</p>\n<p>这个插件用于忽略某些特定的模块，让 webpack 不把这些指定的模块打包进去。例如我们使用 <a href="http://momentjs.com/">moment.js</a>，直接引用后，里边有大量的 i18n 的代码，导致最后打包出来的文件比较大，而实际场景并不需要这些 i18n 的代码，这时我们可以使用 IgnorePlugin 来忽略掉这些代码文件，配置如下：</p>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    new webpack<span class="token punctuation">.</span><span class="token function">IgnorePlugin</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>\<span class="token punctuation">.</span>\<span class="token operator">/</span>locale$<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">/</span>moment$<span class="token operator">/</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n}\n\n</code></pre>\n<p>IgnorePlugin 配置的参数有两个，第一个是匹配引入模块路径的正则表达式，第二个是匹配模块的对应上下文，即所在目录名。</p>\n<h4 id="clean-webpack-plugin">clean-webpack-plugin<a class="anchor" href="#clean-webpack-plugin">§</a></h4>\n<p>自动清除上次打包目录生成的文件</p>\n<h4 id="copy-webpack-plugin">copy-webpack-plugin<a class="anchor" href="#copy-webpack-plugin">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'copy-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    new <span class="token function">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      { from<span class="token punctuation">:</span> <span class="token string">\'src/file.txt\'</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">:</span> <span class="token string">\'build/file.txt\'</span><span class="token punctuation">,</span> }<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 顾名思义，from 配置来源，<span class="token keyword">to</span> 配置目标路径\n      { from<span class="token punctuation">:</span> <span class="token string">\'src/*.ico\'</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">:</span> <span class="token string">\'build/*.ico\'</span> }<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 配置项可以使用 glob\n      <span class="token operator">/</span><span class="token operator">/</span> 可以配置很多项复制规则\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n}\n</code></pre>\n<h4 id="%E6%A0%B7%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80">样式自动添加前缀<a class="anchor" href="#%E6%A0%B7%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80">§</a></h4>\n<p>postcss-loader结合autoprefixer 自动添加样式前缀，配置文件postcss.config.js</p>\n<pre class="language-autoit"><code class="language-autoit">npm i postcss<span class="token operator">-</span>loader <span class="token operator">-</span>D\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// npm i autoprefixer -D</span>\n<span class="token comment">// postcss.config.js</span>\n<span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'autoprefixer\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      grid<span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 为grid特性添加ie前缀</span>\n      browers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">\'> 1%\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'last 3 versions\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'android 4.4\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'ie 8\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="stylelint-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5">stylelint 代码格式检查<a class="anchor" href="#stylelint-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5">§</a></h4>\n<h4 id="cssnext">CSSNext<a class="anchor" href="#cssnext">§</a></h4>\n<p>postcss-cssnext</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">postcssCssnext</span><span class="token punctuation">(</span>{\n  <span class="token operator">/</span><span class="token operator">/</span> 指定所支持的浏览器\n  browers<span class="token punctuation">:</span><span class="token punctuation">[</span>\n    <span class="token string">\'> 1%\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'last 2 versions\'</span>\n  <span class="token punctuation">]</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="sourcemap">sourceMap<a class="anchor" href="#sourcemap">§</a></h3>\n<p>源代码于打包后的代码的映射关系</p>\n<p>在dev模式中，默认开启，关闭的话 可以在配置件⾥</p>\n<pre class="language-autoit"><code class="language-autoit">devtool<span class="token punctuation">:</span><span class="token string">\'none\'</span> <span class="token operator">/</span><span class="token operator">/</span> eval速度最快 cheap 较快，不管列的报错 module 第三方模块\n<span class="token operator">/</span><span class="token operator">/</span> 开发坏境推荐\ndevtool<span class="token punctuation">:</span><span class="token string">\'cheap-module-eval-source-map\'</span>\n<span class="token operator">/</span><span class="token operator">/</span> 线上坏境推荐\ndevtool<span class="token punctuation">:</span><span class="token string">\'cheap-module-source-map\'</span>\n</code></pre>\n<h2 id="%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96">构建速度优化<a class="anchor" href="#%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96">§</a></h2>\n<h3 id="%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E5%BC%80%E9%94%80">避免不必要的开销<a class="anchor" href="#%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E5%BC%80%E9%94%80">§</a></h3>\n<h3 id="%E5%87%8F%E5%B0%91-resolve-%E8%A7%A3%E6%9E%90">减少 <code>resolve</code> 解析<a class="anchor" href="#%E5%87%8F%E5%B0%91-resolve-%E8%A7%A3%E6%9E%90">§</a></h3>\n<p>webpack的resolve设置</p>\n<pre class="language-autoit"><code class="language-autoit">resolve<span class="token punctuation">:</span> {\n  modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'node_modules\'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 使用绝对路径指定node_modules，不做果多查询\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extensions<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">\'js\'</span><span class="token punctuation">]</span>， <span class="token operator">/</span><span class="token operator">/</span> 排除不必要的的后缀自动补全，减少文件路径查询工作<span class="token punctuation">,</span>其外的文件可以在编码时指定后缀\n  mainFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'index\'</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> 避免新增默认文件\n}\n</code></pre>\n<p>本地的代码模块，尽可能编写完整的路径，避免使用目录名，webpack不用去多次查询来确定使用哪个文件</p>\n<h3 id="%E6%8A%8A-loader-%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E8%8C%83%E5%9B%B4%E7%BC%A9%E5%B0%8F">把 loader 应用的文件范围缩小<a class="anchor" href="#%E6%8A%8A-loader-%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E8%8C%83%E5%9B%B4%E7%BC%A9%E5%B0%8F">§</a></h3>\n<p>把 loader 应用的文件范围缩小，限定只在src目录下的文件</p>\n<h3 id="%E5%87%8F%E5%B0%91plugins%E7%9A%84%E6%B6%88%E8%80%97">减少Plugins的消耗<a class="anchor" href="#%E5%87%8F%E5%B0%91plugins%E7%9A%84%E6%B6%88%E8%80%97">§</a></h3>\n<h3 id="%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9">图片压缩<a class="anchor" href="#%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9">§</a></h3>\n<p>构建时压缩 用image-webpack-loader</p>\n<p>图片提前先压缩，使用imagemin来压缩图片，只用pre-commit使其在git commit 的适合触发，并且将要提交的文件替换为压缩后的文件。</p>\n<h3 id="%E4%BD%BF%E7%94%A8dllplugin%E5%88%86%E7%A6%BB%E4%BB%A3%E7%A0%81">使用DLLPLugin分离代码<a class="anchor" href="#%E4%BD%BF%E7%94%A8dllplugin%E5%88%86%E7%A6%BB%E4%BB%A3%E7%A0%81">§</a></h3>\n<p>与splitChunks的区别时，DLLPlugin构建出来的内容无需每次构建的适合都再次构建；公共部分变更时，需要再次执行配置文件构建；分离出来的代码需要手动添加到html或者使用add-assets-webpack-plugin</p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "webpack\u7684\u4F7F\u7528"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%A8%A1%E5%9D%97%E5%8C%96">模块化<a class="anchor" href="#%E6%A8%A1%E5%9D%97%E5%8C%96">§</a></h2>\n<p>传统的script标签引入js，需要手动维护加载顺序，隐式依赖不容易被发现，每个script的src都意味着一次http请求，顶层作用域即全局作用域，不加限制容易导致全局变量污染。</p>\n<p>模块化，通过倒入导入清晰展现依赖关系，从而借助工具来进行打包合并资源文件，多个模块之间的作用域是隔离的。</p>\n<p>ES6模块标准以得到大部分浏览器支持，但是无法使用code splitting 和 tree shaing，大多数的npm模块还是CommonJS的格式，浏览器不支持。</p>\n<p>打包工具，Webpack，Parcel，Rollup</p>\n<h2 id="%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">安装和使用<a class="anchor" href="#%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">§</a></h2>\n<p>webpack是一个模块打包工具，可以识别出引入模块的语法</p>\n<ul>\n<li>默认支持多种模块标准，包括AMD，CommonJS，以及ES6模块</li>\n<li>完备的代码分割（code splitting）解决方案</li>\n<li>可以处理各种类型的资源</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 局部安装 </span>\nnpm install webpack webpack<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span> <span class="token comment">//webpack-cli 可以帮助我们在命令⾏行行⾥里里使⽤用npx ,webpack等相关指令</span>\nnpx webpack <span class="token operator">-</span>v <span class="token comment">// npx帮助我们在项⽬目中的node_modules⾥里里查找webpack</span>\n\nnpx webpack <span class="token comment">// 使用默认配置文件</span>\nnpx webpack <span class="token operator">--</span>config webpackconfig<span class="token punctuation">.</span><span class="token property-access">js</span> <span class="token comment">//指定webpack使⽤用webpackconfig.js⽂文件来作为 配置⽂文件并执⾏行行</span>\n</code></pre>\n<p><em>4.X版本之后需要单独安装webpack-cli</em></p>\n<p>scripts是npm提供的脚本命令功能</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --mode production"</span> <span class="token comment">// 有npm run 时无需npx</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>全局安装可以直接运行 <code>webpack --mode production</code>，非全局安装需要使用<code>npm run build</code>，通过npm寻找命令执行</p>\n<p>默认的配置文件为 webpack.config.js，webpack运行时会读取目录下的该文件</p>\n<p>不同项目使用的webpack版本可能不一致，所以不推荐全局安装</p>\n<h2 id="webpack%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5">Webpack的核心概念<a class="anchor" href="#webpack%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5">§</a></h2>\n<h3 id="%E5%85%A5%E5%8F%A3">入口<a class="anchor" href="#%E5%85%A5%E5%8F%A3">§</a></h3>\n<p>配置入口文件，即webpack构建的入口，会从它开始依赖分析进行打包。打包结果默认放在当前目录下的dist目录，打包的模块名是main.js</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 直接字符串</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  context<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 路径前缀</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/main.js\'</span> <span class="token comment">// 字符串类型入口</span>\n  <span class="token comment">// entry: [\'./src.main.js\', \'./src/.js\']</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> \n<span class="token comment">// 数组类型入口 </span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'babel-polyfill\'</span><span class="token punctuation">,</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">]</span>\n  <span class="token comment">// 传入一个数组的作用是将做个资源预先合并，在打包时Webpack会将数组的最后一个元素作为实际的入口路径，相当于index.js中 import(\'babel-polyfill\')</span>\n  \n<span class="token punctuation">}</span>\n<span class="token comment">//  对象类型入口 单入口</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    main<span class="token operator">:</span> <span class="token string">\'./src/main.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 对象类型入口 多入口</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  enrty<span class="token operator">:</span> <span class="token punctuation">{</span>\n    admin<span class="token operator">:</span> <span class="token string">\'./src/admin.js\'</span><span class="token punctuation">,</span> <span class="token comment">// chunk name 为admin  这里后面也可以用字符串或数组，单不能定义chunk name</span>\n    index<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span> <span class="token comment">// chunk  name 为index</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 函数类型入口 使用函数返回上面任意一种配置  函数的好处在于可以动态计算，还支持返回promise对象来进行异步操作</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">entry</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    index<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'babel-polyfill\'</span><span class="token punctuation">,</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="output">output<a class="anchor" href="#output">§</a></h3>\n<p>打包后的文件位置</p>\n<pre class="language-javascript"><code class="language-javascript">output<span class="token operator">:</span> <span class="token punctuation">{</span>\n  pubilcPath<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 用来指定资源的请求位置，</span>\n  <span class="token comment">// 可以使用相对HTML的路径， \'\' ,\'./js\', \'./static\', \'../assets\'</span>\n  <span class="token comment">// 相对\'/\'的路径（相对当前页面host name） \'/\' \'/js\' \'/dist\'</span>\n  <span class="token comment">// 以及CDN路径</span>\n  filename<span class="token operator">:</span> <span class="token string">\'main.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 这里支持路径，不存在将创建</span>\n  <span class="token comment">// filename: \'[name]_[hash].[ext]\' // </span>\n  <span class="token comment">// 绝对路径</span>\n  path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>_dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span> <span class="token comment">// path指资源的输出位置，必须是绝对路径</span>\n  <span class="token comment">// __dirname Node.js内置变量，值为当前文件所在的绝对路径</span>\n  <span class="token comment">// path.resolve拼装函数  / ./ ../</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>\n<p>[hash] Webpack此次打包所有资源生成的hash</p>\n</li>\n<li>\n<p>[chunkhash] 当前chunk内容的hash</p>\n</li>\n<li>\n<p>[id] 当前chunk的id</p>\n</li>\n<li>\n<p>[query] filename配置项中的query</p>\n</li>\n</ul>\n<h3 id="loader">loader<a class="anchor" href="#loader">§</a></h3>\n<p>loader是webpack中处理多种文件格式的机制，负责把某种文件格式的内容转换成webpack可以支持打包的模块。</p>\n<p>loader可以是链式的，接收的可能是工程源文件的字符串，也可能是上个loader转化后的结果字符串、source map，以及AST对象，输出类似。</p>\n<pre class="language-javascript"><code class="language-javascript">modules<span class="token punctuation">.</span><span class="token keyword module">export</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// 模块的处理规则</span>\n        <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.xxx$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 匹配文件，通常是匹配文件后缀  接收正则表达式，或元素为正则表达式的数组</span>\n        enforce<span class="token operator">:</span><span class="token string">\'pre\'</span><span class="token punctuation">,</span> <span class="token comment">// pre所有loader之前，比如eslint-loader； post所有loader之后，入babel-loader；不配置该项为normal；inline已不推荐 </span>\n        <span class="token comment">// noParse: /jquery|lodash/, // 正则表达式 配置哪些模块文件的内容不需要进行解析，文件中不能使用 `import`、`require`、`define` 等导入机制,适合一些**不需要解析依赖（即无依赖）** 的第三方大型类库等，</span>\n        include<span class="token operator">:</span> <span class="token punctuation">[</span>\n          path<span class="token punctuation">.</span><span class="token method function property-access">recolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span> <span class="token comment">// 指定哪些路径下的该类文件需要处理</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除目录，exclude和include同时存在，exclude优先级更高</span>\n        <span class="token comment">// /node_modules\/(?!(foo|bar)\/).*/ // 排除 排除中的目录的模块，从而设置对该模块生效</span>\n        <span class="token comment">// use: \'xxx-loader\', </span>\n        <span class="token comment">// use: [\'xxx-loader\', \'yyy-loader\'] // loader有顺序，从后向前，从下向上</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span>\n          loader<span class="token operator">:</span> <span class="token string">\'xxx-load\'</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 可以传入配置项，还可以在loader名称后使用query的方式传入</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 还可以写成如下格式，resource 和issuer</span>\n        <span class="token comment">// resource: {</span>\n        <span class="token comment">//  test:\'\',</span>\n        <span class="token comment">//  include:\'\'</span>\n        <span class="token comment">// },</span>\n        <span class="token comment">// issuer: { // 对于引用模块的文件生效</span>\n        <span class="token comment">//  test:/\.js$/,</span>\n         <span class="token comment">// include:\'src/pages\' // 只有该目录下的，同上类型文件，引入的符合test的模块，才会进行loader处理</span>\n        <span class="token comment">//  exclude:/node_modules/ // 排除该目录下，同上类型的文件，其他文件引入的符合test的模块</span>\n        <span class="token comment">// }</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>所有的 loader 按照<strong>前置 -&gt; 行内 -&gt; 普通 -&gt; 后置</strong>的顺序执行</p>\n<h3 id="loader%E8%A7%84%E5%88%99">loader规则<a class="anchor" href="#loader%E8%A7%84%E5%88%99">§</a></h3>\n<ul>\n<li><code>{ test: ... }</code> 匹配特定条件</li>\n<li><code>{ include: ... }</code> 匹配特定路径</li>\n<li><code>{ exclude: ... }</code> 排除特定路径</li>\n<li><code>{ and: [...] }</code>必须匹配数组中所有条件</li>\n<li><code>{ or: [...] }</code> 匹配数组中任意一个条件</li>\n<li><code>{ not: [...] }</code> 排除匹配数组中所有条件</li>\n</ul>\n<p>上述的所谓条件的值可以是：</p>\n<ul>\n<li>字符串：必须以提供的字符串开始，所以是字符串的话，这里我们需要提供绝对路径</li>\n<li>正则表达式：调用正则的 <code>test</code> 方法来判断匹配</li>\n<li>函数：(path) =&gt; boolean，返回 <code>true</code> 表示匹配</li>\n<li>数组：至少包含一个条件的数组</li>\n<li>对象：匹配所有属性值的条件</li>\n</ul>\n<h3 id="module-type">module type<a class="anchor" href="#module-type">§</a></h3>\n<p>webpack 4.x 版本强化了 module type，即模块类型的概念，不同的模块类型类似于配置了不同的 loader，webpack 会有针对性地进行处理，现阶段实现了以下 5 种模块类型。</p>\n<ul>\n<li><code>javascript/auto</code>：即 webpack 3 默认的类型，支持现有的各种 JS 代码模块类型 —— CommonJS、AMD、ESM</li>\n<li><code>javascript/esm</code>：ECMAScript modules，其他模块系统，例如 CommonJS 或者 AMD 等不支持，是 <code>.mjs</code> 文件的默认类型</li>\n<li><code>javascript/dynamic</code>：CommonJS 和 AMD，排除 ESM</li>\n<li><code>javascript/json</code>：JSON 格式数据，<code>require</code> 或者 <code>import</code> 都可以引入，是 <code>.json</code> 文件的默认类型</li>\n<li><code>webassembly/experimental</code>：WebAssembly modules，当前还处于试验阶段，是 <code>.wasm</code> 文件的默认类型</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">{\n  test<span class="token punctuation">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>js<span class="token operator">/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'javascript/esm\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 这里指定模块类型\n}<span class="token punctuation">,</span>\n</code></pre>\n<h3 id="%E5%B8%B8%E7%94%A8loader">常用loader<a class="anchor" href="#%E5%B8%B8%E7%94%A8loader">§</a></h3>\n<h4 id="babel-loader-%E5%B0%86es6%E8%BD%AC%E5%8C%96%E4%B8%BAes5">babel-loader 将ES6转化为ES5<a class="anchor" href="#babel-loader-%E5%B0%86es6%E8%BD%AC%E5%8C%96%E4%B8%BAes5">§</a></h4>\n<p>babel-loader需要设置exclude排除node_modules</p>\n<p>babel-loader本身添加了cacheDirectory配置项，缓存机制在重复打包未改变过的模块时防止二次编译</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 在dev模式中，默认开启，关闭的话 可以在配置⽂文件⾥里里</span>\n\n<span class="token comment">//babel-loader是webpack 与 babel的通信桥梁梁，不不会做把es6转成es5的⼯工作，这部分⼯工作需要⽤用 到@babel/preset-env来做</span>\n<span class="token comment">//@babel/preset-env⾥里里包含了了es6转es5的转换规则</span>\n\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript">rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">{</span>\n    loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheDirectory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>\n        <span class="token string">\'env\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 阻止@babel/preset-env会ES6 转化为CommonJS的形式（会导致webpack中的tree-shaking失效）</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>babel-loader 支持从 .babelrc文件读取babel配置</p>\n<h4 id="babelpolyfill">@babel/polyfill<a class="anchor" href="#babelpolyfill">§</a></h4>\n<p>把es的新特性都引入，例如Promise等，默认会把所有特性都注入到<strong>全局变量</strong></p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 按需引入的设置，可以配置到<span class="token punctuation">.</span>babelrc里\noptions<span class="token punctuation">:</span> {\n  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>\n     {\n      targets<span class="token punctuation">:</span> {\n       edge<span class="token punctuation">:</span><span class="token string">"17"</span><span class="token punctuation">,</span>\n       firefix<span class="token punctuation">:</span><span class="token string">"60"</span><span class="token punctuation">,</span>\n       chrome<span class="token punctuation">:</span><span class="token string">"66"</span><span class="token punctuation">,</span>\n       safari<span class="token punctuation">:</span><span class="token string">"11.1"</span><span class="token punctuation">,</span>\n      }<span class="token punctuation">,</span>\n      useBuiltIns<span class="token punctuation">:</span> <span class="token string">\'usage\'</span> <span class="token operator">/</span><span class="token operator">/</span> 按需引入<span class="token punctuation">,</span>useBuiltIns 选项是 babel <span class="token number">7</span> 的新功能<span class="token punctuation">,</span>告诉 babel 如何配置                      <span class="token operator">/</span><span class="token operator">/</span> <span class="token variable">@babel</span><span class="token operator">/</span>polyfill  entry 需要在entry里引入import <span class="token string">"@babel/polyfill"</span>，usage 不需要import\n     }\n     <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">,</span> <span class="token string">"@babel/preset-react"</span>  <span class="token operator">/</span><span class="token operator">/</span> 打包react选安装配置的\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n}\n</code></pre>\n<h4 id="babelplugin-tranform-runtime">@babel/plugin-tranform-runtime<a class="anchor" href="#babelplugin-tranform-runtime">§</a></h4>\n<p>闭包方式引入</p>\n<pre class="language-autoit"><code class="language-autoit">npm i <span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>tranform<span class="token operator">-</span>runtime <span class="token operator">-</span>S\nnpm i <span class="token variable">@babel</span><span class="token operator">/</span>runntime <span class="token operator">-</span>S\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 注释preset<span class="token operator">-</span>env 写入配置文件<span class="token punctuation">.</span>babelrc\n{\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   <span class="token punctuation">[</span>\n     <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>\n     {\n       <span class="token string">"absoluteRuntime"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        \n       <span class="token string">"corejs"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> \n        <span class="token string">"helpers"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        \n        <span class="token string">"regenerator"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        \n        <span class="token string">"useESModules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> \n     }\n   <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n}\n</code></pre>\n<h4 id="ts-loader">ts-loader<a class="anchor" href="#ts-loader">§</a></h4>\n<p>将Typescript 转换未javascript</p>\n<pre class="language-autoit"><code class="language-autoit">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  {\n    test<span class="token punctuation">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>ts$<span class="token operator">/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span>\n  }\n<span class="token punctuation">]</span>\n</code></pre>\n<p>TS的配置在工程目录下的tscofig.json中</p>\n<pre class="language-autoit"><code class="language-autoit">{\n  <span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> {\n    <span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">\'es5\'</span><span class="token punctuation">,</span>\n    <span class="token string">"sourceMap"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>\n  }\n}\n</code></pre>\n<h4 id="html-loader">html-loader<a class="anchor" href="#html-loader">§</a></h4>\n<p>用于将HTML文件转化为字符串并进行格式化</p>\n<h5 id="handlebars-loader-%E5%A4%84%E7%90%86handlebars%E6%A8%A1%E6%9D%BF">handlebars-loader 处理handlebars模板<a class="anchor" href="#handlebars-loader-%E5%A4%84%E7%90%86handlebars%E6%A8%A1%E6%9D%BF">§</a></h5>\n<p>handlebars文件加载后得到一个函数，函数接收变量对象作为参数，可返回最终的字符串</p>\n<h4 id="file-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">file-loader 处理静态资源模块<a class="anchor" href="#file-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">§</a></h4>\n<p><strong>作用</strong></p>\n<p>把打包入口中识别处理的资源模块，从源代码移动到输出目录，并且返回一个地址名称</p>\n<p><strong>应用场景</strong></p>\n<p>txt，svg，md，csv，excel，图片等资源</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 额外的配置，资源名称输出目录等</span>\n          name<span class="token operator">:</span> <span class="token string">\'[name]_[hash].[ext]\'</span><span class="token punctuation">,</span> <span class="token comment">// [name]原来的资源文件名，文件hash，[ext]扩展名</span>\n          publicPath<span class="token operator">:</span><span class="token string">\'imgages/\'</span> <span class="token comment">// 输出到的位置 file-loader中的publicPath会覆盖Webpack中的publicPath</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="url-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">url-loader 处理静态资源模块<a class="anchor" href="#url-loader-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97">§</a></h4>\n<p>url-loader可以处理file-loader所有的事情，不同的地方在于，url-loader可以把图片转换成base64格式。这种转换仅适合于较小的图片，可以配置转换阈值。</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n        <span class="token comment">// include: [], // 最好加上include范围，提高执行效率</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 配置资源名称输出目录等</span>\n          name<span class="token operator">:</span> <span class="token string">\'[name]_[hash].[ext]\'</span><span class="token punctuation">,</span> <span class="token comment">// 原来的资源文件名，文件hash，扩展名</span>\n          publicPath<span class="token operator">:</span><span class="token string">\'imgages/\'</span> <span class="token comment">// 输出到的位置</span>\n          limit<span class="token operator">:</span> <span class="token number">10000</span> <span class="token comment">// limit默认值是10000，小于8kb的图片才会被编译</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>注：url-loader默认只会处理html和css中的图片，JS中可以通过import引入图片通过一个变量接收</p>\n<h4 id="%E6%A0%B7%E5%BC%8F%E5%A4%84%E7%90%86loader">样式处理loader<a class="anchor" href="#%E6%A0%B7%E5%BC%8F%E5%A4%84%E7%90%86loader">§</a></h4>\n<p>css-loader 分析各css模块之间的关系，合成一个css</p>\n<p>style-loader 会把css-loader生成的内容，以style挂载到页面的header部分</p>\n<p>sass-loader 把sass语法转换成css，依赖node-sass模块 <code>npm install sass-loader node-sass -D</code></p>\n<p>less-loader</p>\n<p>postcss-loader post-css需要有单独的配置文件 postcss-loader</p>\n<pre class="language-autoit"><code class="language-autoit">{\n  test<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">^</span>\<span class="token punctuation">.</span>scss$<span class="token operator">/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> \n  {loader<span class="token punctuation">:</span><span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> \n  options<span class="token punctuation">:</span> {\n     minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 使用 css 的压缩功能<span class="token punctuation">,</span>css<span class="token operator">-</span>loader 是使用cssnano来压缩代码的，`minimize` 字段也可以配置为一个对象，来将相关配置传递给 cssnano\n  }}<span class="token punctuation">,</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">]</span>\n}\n</code></pre>\n<h4 id="image-webpack-loader%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87">image-webpack-loader压缩图片<a class="anchor" href="#image-webpack-loader%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\.(gif|png|jpe?g|svg|webp)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'image-webpack-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              mozjpeg<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 压缩 jpeg 的配置</span>\n                progressive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                quality<span class="token operator">:</span> <span class="token number">65</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              optipng<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 使用 imagemin-optipng 压缩 png，enable: false 为关闭</span>\n                enabled<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              pngquant<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 使用 imagemin-pngquant 压缩 png</span>\n                quality<span class="token operator">:</span> <span class="token string">\'65-90\'</span><span class="token punctuation">,</span>\n                speed<span class="token operator">:</span> <span class="token number">4</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              gifsicle<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 压缩 gif 的配置</span>\n                interlaced<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              webp<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式</span>\n                quality<span class="token operator">:</span> <span class="token number">75</span>\n              <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>image-webpack-loader 的压缩是使用 <a href="https://github.com/imagemin">imagemin</a> 提供的一系列图片压缩类库来处理的</p>\n<h4 id="vue%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90">Vue模板解析<a class="anchor" href="#vue%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90">§</a></h4>\n<p>vue-loader   还依赖 vue-tempalte-compiler css-loader  , CSS样式的预处理器</p>\n<pre class="language-autoit"><code class="language-autoit">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  {\n  test<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">^</span>\<span class="token punctuation">.</span>vue$<span class="token operator">/</span>\n  use<span class="token punctuation">:</span><span class="token string">\'vue-loader\'</span>\n  }\n<span class="token punctuation">]</span>\n</code></pre>\n<h4 id="css-modules">CSS Modules<a class="anchor" href="#css-modules">§</a></h4>\n<p>每个css文件都有单独的作用域，对css进行依赖关系，可以通过相对路径引入css文件，可以通过composes轻松复用其他CSS模块</p>\n<p>只需要开启css-loader配置项中的modules : true</p>\n<pre class="language-autoit"><code class="language-autoit">options<span class="token punctuation">:</span>{\n  modules<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n  localIdentName<span class="token punctuation">:</span><span class="token string">\'[name]_[local]_[hash:base64:5]\'</span> <span class="token operator">/</span><span class="token operator">/</span> 模块名 选择符 <span class="token number">5</span>位哈希\n}\n</code></pre>\n<p>使用CSSmodules时css文件会导出一个对象，我们需要把对象的属性添加到html标签上</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// style.css</span>\n<span class="token punctuation">.</span><span class="token property-access">title</span> <span class="token punctuation">{</span>\n  color<span class="token operator">:</span>#f938ab<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// app.js</span>\n<span class="token keyword module">import</span> <span class="token imports">styles</span> <span class="token keyword module">from</span> <span class="token string">\'./style.css\'</span>\n<span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1 calss={$styles.title}>优点复杂&lt;/h1></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%B8%B8%E7%94%A8plugin">常用plugin<a class="anchor" href="#%E5%B8%B8%E7%94%A8plugin">§</a></h3>\n<h4 id="html-webpack-plugin">html-webpack-plugin<a class="anchor" href="#html-webpack-plugin">§</a></h4>\n<p>会自动把打包处理的资源名放入到生成的index.html中，支持传入html模板</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'index.html\'</span><span class="token punctuation">,</span> <span class="token comment">// 配置输出文件名和路径</span>\n      template<span class="token operator">:</span> <span class="token string">\'public/index.html\'</span><span class="token punctuation">,</span> <span class="token comment">// 配置文件模板</span>\n      minify<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 压缩 HTML 的配置,minify下的配置项直接透传给 html-minifier</span>\n        minifyCSS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 压缩 HTML 中出现的 CSS 代码</span>\n        minifyJS<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 压缩 HTML 中出现的 JS 代码</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<p><em>webpack 4.x 版本运行时，mode 为 production 即会启动压缩 JS 代码的插件</em></p>\n<h4 id="extract-text-webpack-plugin-%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86webpack4%E5%89%8D">extract-text-webpack-plugin 样式文件处理webpack4前<a class="anchor" href="#extract-text-webpack-plugin-%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86webpack4%E5%89%8D">§</a></h4>\n<p>样式的提取是以资源入口开始的整个chunk为单位的，chunk是一组具有依赖关系的模块的封装，多个构建入口，extract-text-webpack-plugin 会为每一个入口创建单独分离的文件。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token maybe-class-name">ExtractTextPlugin</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token comment">// 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span>\n        use<span class="token operator">:</span> <span class="token maybe-class-name">ExtractTextPlugin</span><span class="token punctuation">.</span><span class="token method function property-access">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n          fallback<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 引入插件，配置文件名，这里同样可以使用 [hash]</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'index.css\'</span><span class="token punctuation">)</span>\n    <span class="token comment">//  new ExtractTextPlugin(\'[name].css\')</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="mini-css-extract-plugin">mini-css-extract-plugin<a class="anchor" href="#mini-css-extract-plugin">§</a></h4>\n<p>支持按需加载，</p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token comment">// 插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span>\n          loader<span class="token operator">:</span> <span class="token maybe-class-name">MiniCssExtractPlugin</span><span class="token punctuation">.</span><span class="token property-access">loader</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span> <span class="token punctuation">{</span>\n            publicPath<span class="token operator">:</span><span class="token string">\'../\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string">\'css-loader\'</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\nplugins<span class="token operator">:</span><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].css\'</span><span class="token punctuation">,</span> <span class="token comment">// chunkname 对英entry里的key  同步加载的css资源名</span>\n    chunkFilename<span class="token operator">:</span> <span class="token string">\'[id].css\'</span> <span class="token comment">// 指定异步加载的css资源名</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h4 id="css-sprites-%E7%B2%BE%E7%81%B5%E5%9B%BE">CSS Sprites 精灵图<a class="anchor" href="#css-sprites-%E7%B2%BE%E7%81%B5%E5%9B%BE">§</a></h4>\n<p><a href="https://github.com/mixtur/webpack-spritesmith">webpack-spritesmith</a> 或者 <a href="https://github.com/kezoo/sprite-webpack-plugin">sprite-webpack-plugin</a></p>\n<pre class="language-javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ... 这里需要有处理图片的 loader，如 file-loader</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nresolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'node_modules\'</span><span class="token punctuation">,</span> \n    <span class="token string">\'spritesmith-generated\'</span><span class="token punctuation">,</span> <span class="token comment">// webpack-spritesmith 生成所需文件的目录</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nplugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">SpritesmithPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    src<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cwd<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/ico\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 多个图片所在的目录</span>\n      glob<span class="token operator">:</span> <span class="token string">\'*.png\'</span> <span class="token comment">// 匹配图片的路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    target<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 生成最终图片的路径</span>\n      image<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/spritesmith-generated/sprite.png\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n      <span class="token comment">// 生成所需 SASS/LESS/Stylus mixins 代码，我们使用 Stylus 预处理器做例子</span>\n      css<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/spritesmith-generated/sprite.styl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    apiOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cssImageRef<span class="token operator">:</span> <span class="token string">"~sprite.png"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>CSS文件里引入</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token variable">@import</span> <span class="token string">\'~sprite.styl\'</span>\n\n<span class="token punctuation">.</span>close<span class="token operator">-</span>button\n    <span class="token function">sprite</span><span class="token punctuation">(</span><span class="token variable">$close</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span>open<span class="token operator">-</span>button\n    <span class="token function">sprite</span><span class="token punctuation">(</span><span class="token variable">$open</span><span class="token punctuation">)</span>\n</code></pre>\n<p>webpack4.X中的精灵图需要postcss和 <a href="https://github.com/2createStudio/postcss-sprites">postcss-sprites</a> 才能实现</p>\n<h4 id="defineplugin">definePlugin<a class="anchor" href="#defineplugin">§</a></h4>\n<p>DefinePlugin 是 webpack 内置的插件，可以使用 <code>webpack.DefinePlugin</code> 直接获取。</p>\n<ul>\n<li>如果配置的值是字符串，那么整个字符串会被当成代码片段来执行，其结果作为最终变量的值，如上面的 <code>&quot;1+1&quot;</code>，最后的结果是 <code>2</code></li>\n<li>如果配置的值不是字符串，也不是一个对象字面量，那么该值会被转为一个字符串，如 <code>true</code>，最后的结果是 <code>\'true\'</code></li>\n<li>如果配置的是一个对象字面量，那么该对象的所有 key 会以同样的方式去定义</li>\n</ul>\n<p>需要使用JSON.stringfy(), <code>JSON.stringify(true)</code> 的结果是 <code>\'true\'</code></p>\n<blockquote>\n<p>建议使用 process.env.NODE_ENV: ... 的方式来定义 process.env.NODE_ENV，而不是使用 process: { env: { NODE_ENV: ... } } 的方式，因为这样会覆盖掉 process 这个对象，可能会对其他代码造成影响。</p>\n</blockquote>\n<h4 id="provideplugin">ProvidePlugin<a class="anchor" href="#provideplugin">§</a></h4>\n<p>ProvidePlugin 也是一个 webpack 内置的插件，我们可以直接使用 <code>webpack.ProvidePlugin</code> 来获取。</p>\n<p>该组件用于引用某些模块作为应用运行时的变量，从而不必每次都用 <code>require</code> 或者 <code>import</code>，其用法相对简单：</p>\n<pre class="language-autoit"><code class="language-autoit">new webpack<span class="token punctuation">.</span><span class="token function">ProvidePlugin</span><span class="token punctuation">(</span>{\n  identifier<span class="token punctuation">:</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span>\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n}<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> 或者\nnew webpack<span class="token punctuation">.</span><span class="token function">ProvidePlugin</span><span class="token punctuation">(</span>{\n  identifier<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'property\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 即引用 module 下的 property，类似 import { property } from <span class="token string">\'module\'</span>\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n}<span class="token punctuation">)</span>\n\n</code></pre>\n<p>在你的代码中，当 <code>identifier</code> 被当作未赋值的变量时，module 就会被自动加载了，而 <code>identifier</code> 这个变量即 module 对外暴露的内容。</p>\n<p>注意，如果是 ES 的 <code>default export</code>，那么你需要指定模块的 <code>default</code> 属性：<code>identifier: [\'module\', \'default\']</code></p>\n<h4 id="ignoreplugin">IgnorePlugin<a class="anchor" href="#ignoreplugin">§</a></h4>\n<p>IgnorePlugin 和 ProvidePlugin 一样，也是一个 webpack 内置的插件，可以直接使用 <code>webpack.IgnorePlugin</code> 来获取。</p>\n<p>这个插件用于忽略某些特定的模块，让 webpack 不把这些指定的模块打包进去。例如我们使用 <a href="http://momentjs.com/">moment.js</a>，直接引用后，里边有大量的 i18n 的代码，导致最后打包出来的文件比较大，而实际场景并不需要这些 i18n 的代码，这时我们可以使用 IgnorePlugin 来忽略掉这些代码文件，配置如下：</p>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    new webpack<span class="token punctuation">.</span><span class="token function">IgnorePlugin</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>\<span class="token punctuation">.</span>\<span class="token operator">/</span>locale$<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">/</span>moment$<span class="token operator">/</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n}\n\n</code></pre>\n<p>IgnorePlugin 配置的参数有两个，第一个是匹配引入模块路径的正则表达式，第二个是匹配模块的对应上下文，即所在目录名。</p>\n<h4 id="clean-webpack-plugin">clean-webpack-plugin<a class="anchor" href="#clean-webpack-plugin">§</a></h4>\n<p>自动清除上次打包目录生成的文件</p>\n<h4 id="copy-webpack-plugin">copy-webpack-plugin<a class="anchor" href="#copy-webpack-plugin">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'copy-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    new <span class="token function">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      { from<span class="token punctuation">:</span> <span class="token string">\'src/file.txt\'</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">:</span> <span class="token string">\'build/file.txt\'</span><span class="token punctuation">,</span> }<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 顾名思义，from 配置来源，<span class="token keyword">to</span> 配置目标路径\n      { from<span class="token punctuation">:</span> <span class="token string">\'src/*.ico\'</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">:</span> <span class="token string">\'build/*.ico\'</span> }<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 配置项可以使用 glob\n      <span class="token operator">/</span><span class="token operator">/</span> 可以配置很多项复制规则\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n}\n</code></pre>\n<h4 id="%E6%A0%B7%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80">样式自动添加前缀<a class="anchor" href="#%E6%A0%B7%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80">§</a></h4>\n<p>postcss-loader结合autoprefixer 自动添加样式前缀，配置文件postcss.config.js</p>\n<pre class="language-autoit"><code class="language-autoit">npm i postcss<span class="token operator">-</span>loader <span class="token operator">-</span>D\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// npm i autoprefixer -D</span>\n<span class="token comment">// postcss.config.js</span>\n<span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'autoprefixer\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      grid<span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 为grid特性添加ie前缀</span>\n      browers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">\'> 1%\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'last 3 versions\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'android 4.4\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'ie 8\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="stylelint-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5">stylelint 代码格式检查<a class="anchor" href="#stylelint-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5">§</a></h4>\n<h4 id="cssnext">CSSNext<a class="anchor" href="#cssnext">§</a></h4>\n<p>postcss-cssnext</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">postcssCssnext</span><span class="token punctuation">(</span>{\n  <span class="token operator">/</span><span class="token operator">/</span> 指定所支持的浏览器\n  browers<span class="token punctuation">:</span><span class="token punctuation">[</span>\n    <span class="token string">\'> 1%\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'last 2 versions\'</span>\n  <span class="token punctuation">]</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="sourcemap">sourceMap<a class="anchor" href="#sourcemap">§</a></h3>\n<p>源代码于打包后的代码的映射关系</p>\n<p>在dev模式中，默认开启，关闭的话 可以在配置件⾥</p>\n<pre class="language-autoit"><code class="language-autoit">devtool<span class="token punctuation">:</span><span class="token string">\'none\'</span> <span class="token operator">/</span><span class="token operator">/</span> eval速度最快 cheap 较快，不管列的报错 module 第三方模块\n<span class="token operator">/</span><span class="token operator">/</span> 开发坏境推荐\ndevtool<span class="token punctuation">:</span><span class="token string">\'cheap-module-eval-source-map\'</span>\n<span class="token operator">/</span><span class="token operator">/</span> 线上坏境推荐\ndevtool<span class="token punctuation">:</span><span class="token string">\'cheap-module-source-map\'</span>\n</code></pre>\n<h2 id="%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96">构建速度优化<a class="anchor" href="#%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96">§</a></h2>\n<h3 id="%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E5%BC%80%E9%94%80">避免不必要的开销<a class="anchor" href="#%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E5%BC%80%E9%94%80">§</a></h3>\n<h3 id="%E5%87%8F%E5%B0%91-resolve-%E8%A7%A3%E6%9E%90">减少 <code>resolve</code> 解析<a class="anchor" href="#%E5%87%8F%E5%B0%91-resolve-%E8%A7%A3%E6%9E%90">§</a></h3>\n<p>webpack的resolve设置</p>\n<pre class="language-autoit"><code class="language-autoit">resolve<span class="token punctuation">:</span> {\n  modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'node_modules\'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 使用绝对路径指定node_modules，不做果多查询\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extensions<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">\'js\'</span><span class="token punctuation">]</span>， <span class="token operator">/</span><span class="token operator">/</span> 排除不必要的的后缀自动补全，减少文件路径查询工作<span class="token punctuation">,</span>其外的文件可以在编码时指定后缀\n  mainFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'index\'</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> 避免新增默认文件\n}\n</code></pre>\n<p>本地的代码模块，尽可能编写完整的路径，避免使用目录名，webpack不用去多次查询来确定使用哪个文件</p>\n<h3 id="%E6%8A%8A-loader-%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E8%8C%83%E5%9B%B4%E7%BC%A9%E5%B0%8F">把 loader 应用的文件范围缩小<a class="anchor" href="#%E6%8A%8A-loader-%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E8%8C%83%E5%9B%B4%E7%BC%A9%E5%B0%8F">§</a></h3>\n<p>把 loader 应用的文件范围缩小，限定只在src目录下的文件</p>\n<h3 id="%E5%87%8F%E5%B0%91plugins%E7%9A%84%E6%B6%88%E8%80%97">减少Plugins的消耗<a class="anchor" href="#%E5%87%8F%E5%B0%91plugins%E7%9A%84%E6%B6%88%E8%80%97">§</a></h3>\n<h3 id="%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9">图片压缩<a class="anchor" href="#%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9">§</a></h3>\n<p>构建时压缩 用image-webpack-loader</p>\n<p>图片提前先压缩，使用imagemin来压缩图片，只用pre-commit使其在git commit 的适合触发，并且将要提交的文件替换为压缩后的文件。</p>\n<h3 id="%E4%BD%BF%E7%94%A8dllplugin%E5%88%86%E7%A6%BB%E4%BB%A3%E7%A0%81">使用DLLPLugin分离代码<a class="anchor" href="#%E4%BD%BF%E7%94%A8dllplugin%E5%88%86%E7%A6%BB%E4%BB%A3%E7%A0%81">§</a></h3>\n<p>与splitChunks的区别时，DLLPlugin构建出来的内容无需每次构建的适合都再次构建；公共部分变更时，需要再次执行配置文件构建；分离出来的代码需要手动添加到html或者使用add-assets-webpack-plugin</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%A8%A1%E5%9D%97%E5%8C%96" }, "\u6A21\u5757\u5316")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8" }, "\u5B89\u88C5\u548C\u4F7F\u7528")),
            React.createElement("li", null,
                React.createElement("a", { href: "#webpack%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" }, "Webpack\u7684\u6838\u5FC3\u6982\u5FF5"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%85%A5%E5%8F%A3" }, "\u5165\u53E3")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#output" }, "output")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#loader" }, "loader")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#loader%E8%A7%84%E5%88%99" }, "loader\u89C4\u5219")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#module-type" }, "module type")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%B8%B8%E7%94%A8loader" }, "\u5E38\u7528loader"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%B8%B8%E7%94%A8plugin" }, "\u5E38\u7528plugin"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#sourcemap" }, "sourceMap")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96" }, "\u6784\u5EFA\u901F\u5EA6\u4F18\u5316"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E5%BC%80%E9%94%80" }, "\u907F\u514D\u4E0D\u5FC5\u8981\u7684\u5F00\u9500")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%87%8F%E5%B0%91-resolve-%E8%A7%A3%E6%9E%90" }, "\u51CF\u5C11 resolve \u89E3\u6790")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%8A%8A-loader-%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E8%8C%83%E5%9B%B4%E7%BC%A9%E5%B0%8F" }, "\u628A loader \u5E94\u7528\u7684\u6587\u4EF6\u8303\u56F4\u7F29\u5C0F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%87%8F%E5%B0%91plugins%E7%9A%84%E6%B6%88%E8%80%97" }, "\u51CF\u5C11Plugins\u7684\u6D88\u8017")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9" }, "\u56FE\u7247\u538B\u7F29")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BD%BF%E7%94%A8dllplugin%E5%88%86%E7%A6%BB%E4%BB%A3%E7%A0%81" }, "\u4F7F\u7528DLLPLugin\u5206\u79BB\u4EE3\u7801")))))),
    'author': "dingtt",
    'contributors': [
        "dingtt",
        "dingdtt"
    ],
    'date': "2020-06-27T13:11:07.000Z",
    'updated': "2020-11-02T09:07:36.000Z",
    'excerpt': "模块化 传统的script标签引入js，需要手动维护加载顺序，隐式依赖不容易被发现，每个script的src都意味着一次http请求，顶层作用域即全局作用域，不加限制容易导致全局变量污染。 模块化，通过倒入导入清晰展现依赖关系，从而借...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
