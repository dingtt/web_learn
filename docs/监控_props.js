import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'gh-pages' },
    'pagePath': "监控.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "监控.html",
    'title': "前端异常监控系统实践",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>前端异常监控系统实践</h1>\n<p>在看一些前端监控相关的文章时，经常看到评论中提到业界成熟的方案，没有必要自己造轮子。我这里做前端监控相关的研究，主要就是为了熟悉整个流程，本文记录了一些关键技术点，从异常采集、到上报、存储、查看的方案，内容较为跳跃，仅供参考。另外由于个人精力和水平制约，未实现分库分表、异常报警、错误分析定位等进阶功能。</p>\n<p>整个采集系统技术方面分为采集SDK，展示平台、后端服务三部分，采集SDK使用Typescript开发，使用Rollup打包；日志相关服务使用Docker快速部署，后端使用Egg框架快速开发。</p>\n<p>![image-20210314150012105](/Users/apsp/Library/Application Support/typora-user-images/image-20210314150012105.png)</p>\n<h2 id="%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86sdk">数据采集SDK<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86sdk">§</a></h2>\n<p>数据采集部分，主要采集了异常信息，坏境信息，性能信息，和部分行为信息。</p>\n<h3 id="%E5%BC%82%E5%B8%B8%E9%87%87%E9%9B%86">异常采集<a class="anchor" href="#%E5%BC%82%E5%B8%B8%E9%87%87%E9%9B%86">§</a></h3>\n<h4 id="%E5%89%8D%E7%AB%AFjs%E9%94%99%E8%AF%AF">前端JS错误<a class="anchor" href="#%E5%89%8D%E7%AB%AFjs%E9%94%99%E8%AF%AF">§</a></h4>\n<p>JS的错误信息采集有<code>window.onerror </code> 和 <code>window.addEventLisenter(\'error\',function(){})</code>两种方法，<code>window.onerror</code>是一个标准的错误捕获接口，它可以拿到对应的JavaScript运行时错误。<code>window.onerror</code>只能订阅一个，后面的会覆盖前面的。</p>\n<p><code>window.onerror</code> 无法获取到资源加载失败的情况，资源加载error事件不会向上冒泡到window，需要使用 <code>window.addEventLisenter（\'error\'）</code>来捕获资源加载失败。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">onerror</span> <span class="token operator">=</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> source<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span>error</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token spread operator">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">errorEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> message<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> errorEvent\n    <span class="token spread operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n</code></pre>\n<p>运行错误信息</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>message</td>\n<td>错误信息</td>\n<td>错误描述</td>\n</tr>\n<tr>\n<td>filename/source</td>\n<td>发生错误的脚本URL</td>\n<td><code>ErrorEvent</code>中是<code>filename</code>,在<code>onError</code>中是<code>source</code></td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>错误行</td>\n<td></td>\n</tr>\n<tr>\n<td>colno</td>\n<td>发生错误的列号</td>\n<td></td>\n</tr>\n<tr>\n<td>error</td>\n<td>Error 对象</td>\n<td><code>error.message error.stack</code> 是很重要的信息</td>\n</tr>\n</tbody>\n</table></div>\n<p>js中常见的几种Error类型</p>\n<ul>\n<li>\n<p>SyntaxError 语法错误</p>\n</li>\n<li>\n<p>Uncaught ReferenceError 引用错误</p>\n</li>\n<li>\n<p>RangeError 范围错误</p>\n</li>\n<li>\n<p>TypeError 类型错误</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>URIError URL错误</p>\n</li>\n<li>\n<p>EvalError eval()函数执行错误</p>\n</li>\n</ul>\n<h4 id="%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E9%94%99%E8%AF%AF">资源加载错误<a class="anchor" href="#%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E9%94%99%E8%AF%AF">§</a></h4>\n<p>资源如<code>&lt;img&gt;</code> <code>&lt;script&gt;</code>等加载失败，如上所述，需要使用 window.addEventLisenter(\'error\')，获取到 <code>errorEvent</code>。对于JS运行时错误，<code>errorEvent.target</code>指向window ，而对于资源加载错误，则指向相应的标签。通过taget的nodeName或tagName进行判断类型，可筛选或排除资源类型。</p>\n<h4 id="promise%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">Promise异常捕获<a class="anchor" href="#promise%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">§</a></h4>\n<p>onError和错误事件侦听，都无法获取<code>new Promise()</code> 里的报错，<code>.catch()</code>可以捕获到异常，但是需要每个Primise都添加.catch，理论上监控逻辑不应该侵入业务代码，可以将unhandledrejection抛出的错误再次抛出，就可以在addEventListener中捕获。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 打印e的内容，错误信息挂在reason上，包含message,stack</span>\n<span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">"unhandledrejection"</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">throw</span> e<span class="token punctuation">.</span><span class="token property-access">reason</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="asyncawait%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">async/await异常捕获<a class="anchor" href="#asyncawait%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">§</a></h4>\n<p>async异常可以被上层try catch捕获，如果没有，就只能通过unhandledrejection事件捕获了。</p>\n<h4 id="%E8%B7%A8%E5%9F%9Fjs%E9%94%99%E8%AF%AF">跨域JS错误<a class="anchor" href="#%E8%B7%A8%E5%9F%9Fjs%E9%94%99%E8%AF%AF">§</a></h4>\n<p>script 标签引入的跨域脚本，如果出现异常，window 下的 error 事件都只能得到 <code>Script error</code>，没有详细的错误信息，这里有两种解决方案。</p>\n<ol>\n<li>\n<p>使用 crossOrigin</p>\n<p>给<code>&lt;script&gt;</code>标签添加crossorigin属性， 并在服务器端设置 <code>Access-Control-Allow-Origins</code>响应头，允许脚本被跨域访问，\n就可以获取更详细的日志信息。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>crossorigin属性的取值</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anonymous</td>\n<td>依赖CROS，不带cookie，当AS设置不等于origin或不是*时，js不加载</td>\n<td></td>\n</tr>\n<tr>\n<td>use-credentials</td>\n<td>需要<code>Access-Control-Allow-Credentials</code> 返回 true，此时浏览器<code>Access-Control-Allow-Origins:domian.com</code>必须设置具体域名，不支持通配符*，AC不等于origin时js不再加载</td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<p>如果给 <script> 标签添加了<code>crossorigin</code>属性，但是服务器端没有设置<code>Access-Control-Allow-Origins</code>，则会报跨域错误。</p>\n</li>\n<li>\n<p><code>try...catch</code></p>\n<p>该方案的弊端是需要包裹，只适合于被监控应用使用自定义上报方法主动上报。并且在 <code>try</code> 中发生的错误，浏览器不会把错误打在 <code>console</code> 里，也不会触发 <code>error</code> 事件，需要在 <code>catch</code> 里，把错误打在 <code>console.error</code> 里面，并手动包装 <code>ErrorEvent</code>，丢给 <code>window</code> 下的 <code>error</code> 事件捕获。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n    <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>apiData<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">ErrorEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorEvent</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">,</span> message<span class="token operator">:</span> error<span class="token punctuation">.</span><span class="token property-access">message</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里也会触发window.onerror</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">onerror</span> <span class="token operator">&amp;&amp;</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">onerror</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n</ol>\n<h4 id="%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3%E5%BC%82%E5%B8%B8">数据接口异常<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3%E5%BC%82%E5%B8%B8">§</a></h4>\n<p>数据接口常见异常，一是由于接口不可用导致前端出现问题，二数据字段导致缺失导致出现的JS错误，第二种错误往往可以在<code>error</code>中捕获的到，而对于数据接口的状态，基于<code>XMLHttpRequest</code>发起的数据请求，可以使用面向切片编程，劫持原型链上的方法，获取<code>xhr</code>实例，绑定事件监听。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> orignalEvents <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token string">\'abort\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'error\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'load\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'timeout\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'onreadystatechange\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token keyword">const</span> method <span class="token operator">=</span> <span class="token string">\'open\'</span>\n<span class="token keyword">const</span> originalXhrProto <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> originalXhrProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>\n originalXhrProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取xhr实例  绑定事件</span>\n    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">this</span>\n    orignalEvents<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">eType</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      xhr<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>eType<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    original<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h4 id="vue%E5%BC%82%E5%B8%B8">Vue异常<a class="anchor" href="#vue%E5%BC%82%E5%B8%B8">§</a></h4>\n<p>对于Vue中发生的异常，需要利用vue提供的handleError，一旦Vue发生异常都会调用这个方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'errorHandle:\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>同样我们使用面向切片编程的方式，对<code>errorHandler</code>进行劫持。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">listenVueError</span><span class="token punctuation">(</span><span class="token parameter">_Vue</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_Vue <span class="token operator">||</span> <span class="token operator">!</span>_Vue<span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> oldErrorHandler <span class="token operator">=</span> _Vue<span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">.</span><span class="token property-access">errorHandler</span>\n  _Vue<span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>\n    <span class="token comment">// errorHandler方法自己又报错了生产环境下会使用 console.error 在控制台中输出</span>\n    <span class="token comment">// 继续抛出到控制台</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> console <span class="token operator">!==</span> <span class="token string">\'undefined\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token property-access">error</span> <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    eventEmitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token constant">LISTEN_EVENTS</span><span class="token punctuation">.</span><span class="token constant">VUE</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldErrorHandler <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      oldErrorHandler<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>另外还有涉及小程序、<code>React</code>、<code>ReactNative</code> 、<code>console</code>中一些异常捕获方案，需要在被监控端添加少量代码，未在SDK中验证，不再详细列出。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>异常类型</th>\n<th>同步方法</th>\n<th>异步方法</th>\n<th>资源加载</th>\n<th>Promise</th>\n<th>async/await</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>try/catch</td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>error事件监听</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>unhandledrejection</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id="%E6%80%A7%E8%83%BD%E9%87%87%E9%9B%86">性能采集<a class="anchor" href="#%E6%80%A7%E8%83%BD%E9%87%87%E9%9B%86">§</a></h3>\n<h4 id="performance">performance<a class="anchor" href="#performance">§</a></h4>\n<p>性能采集，首先是收集<code>window.performance.timing</code>，以下是部分指标的计算。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 测试输出</span>\n<span class="token keyword">function</span> <span class="token function">calculateTiming</span><span class="token punctuation">(</span><span class="token parameter">perf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'perf\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'重定向耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">redirectEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">redirectStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'DNS查询耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">domainLookupEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">domainLookupStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'TCP链接耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">connectEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">connectStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'HTTP请求耗时 \'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">responseEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">responseStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'解析dom树耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">domComplete</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">domInteractive</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'首包时间（~&lt;白屏时间） \'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">domLoading</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">navigationStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token string">\'domready可操作时间\'</span><span class="token punctuation">,</span>\n    perf<span class="token punctuation">.</span><span class="token property-access">domContentLoadedEventEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">navigationStart</span>\n  <span class="token punctuation">)</span>\n  <span class="token comment">// 需在onload里调用时，perf.loadEventEnd 未结束时值为0</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'onload总下载时间\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">loadEventEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">navigationStart</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E5%85%B6%E4%BB%96%E6%8C%87%E6%A0%87">其他指标<a class="anchor" href="#%E5%85%B6%E4%BB%96%E6%8C%87%E6%A0%87">§</a></h4>\n<p>过<code>performance.getEntries()</code>，此方法返回 <code>PerformanceEntry</code> 对象数组，每个数组成员均是一个<code>PerformanceResourceTiming</code>对象。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 取全部</span>\n<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">performance</span><span class="token punctuation">.</span><span class="token method function property-access">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 取特定</span>\n<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token dom variable">performance</span><span class="token punctuation">.</span><span class="token method function property-access">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"entry_name"</span><span class="token punctuation">,</span> entryType<span class="token operator">:</span> <span class="token string">"mark"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>![image-20210307215254327](/Users/apsp/Library/Application Support/typora-user-images/image-20210307215254327.png)</p>\n<p><strong>白屏时间(FP)<strong>与</strong>首屏时间(FCP)</strong></p>\n<p>其中name为<code>first-paint</code>的对象，<code>startTime</code>和<code>duration</code>的值，即为白屏时间(FP)，<code>name</code>为<code>first-contentful-paint</code>，即为<strong>首屏时间(FCP)</strong> ，需要注意的是<code>PerformancePaintTiming</code>只支持chrome60、opera47以上版本，其他的Chrome 最新性能指标，可以自行查阅资料。</p>\n<h5 id="%E6%89%93%E7%82%B9%E6%97%B6%E9%97%B4">打点时间<a class="anchor" href="#%E6%89%93%E7%82%B9%E6%97%B6%E9%97%B4">§</a></h5>\n<p>另外通过<code>performance.mark()</code>可以自行记录打点时间，例如在<code>&lt;/head&gt;</code>前自行埋点<code>performance.mark(\'first-paint-script’)</code>，然后在获取<code>name</code>属性为<code>first-paint-script</code>的<code>entry</code>，获取对应的时间，这一时间近似白屏时间。</p>\n<p>SDK中可以约定一些常见的性能指标，被监控端选择合适的位置自行埋点，用于补充性能监控数据。</p>\n<h5 id="%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4">起始时间<a class="anchor" href="#%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4">§</a></h5>\n<p><code>performance.timing.navigationStart || query(\'_t\')</code> ，可约定URL中存在 _t 时，作为页面统计起始点时间。</p>\n<h4 id="%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4">图片加载时间<a class="anchor" href="#%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4">§</a></h4>\n<p>MutationObserver侦听DOM变化，在5秒内到最后一个变化的稳定时间点，作为时间点得到时间点T1，再用ResoucereTiming得到T1时间内加载的所有的图片Img，判断是不是本站（需统计的）图片，排除上报gif图片，得到图片资源加载完成时间T2。</p>\n<p><code>ResoucereTiming</code>的<code>entryType</code>值为<code>resource</code>，chrome浏览器中<code>initiatorType</code>为 <code>img</code>  ，firefox中<code>initiatorType</code> 为<code>other</code> 。</p>\n<h4 id="%E9%A6%96%E6%AC%A1%E5%8A%A0%E8%BD%BD%E6%88%96%E5%88%B7%E6%96%B0">首次加载或刷新<a class="anchor" href="#%E9%A6%96%E6%AC%A1%E5%8A%A0%E8%BD%BD%E6%88%96%E5%88%B7%E6%96%B0">§</a></h4>\n<p>在收集性能的同时，记录页面是首次刷新还是加载，可利用给window.name属性赋值，在页面刷新时不会重置来判断</p>\n<p>如果是单网页应用的首屏时间计算，更精准的时间计算，还需要根据业务需要自行打点记录。</p>\n<h3 id="%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86">环境信息采集<a class="anchor" href="#%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86">§</a></h3>\n<p>环境信息主要通过采集UA信息，进行上报，后台通过计算，获取浏览器分布等信息。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">getEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">Ienv</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token dom variable">window</span> <span class="token operator">===</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword">const</span> <span class="token dom variable">navigator</span> <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">navigator</span>\n  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token dom variable">navigator</span><span class="token punctuation">[</span><span class="token string">\'connection\'</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> envData <span class="token operator">=</span> <span class="token punctuation">{</span>\n    userAgent<span class="token operator">:</span> <span class="token dom variable">navigator</span><span class="token punctuation">.</span><span class="token property-access">userAgent</span><span class="token punctuation">,</span>\n    platform<span class="token operator">:</span> <span class="token dom variable">navigator</span><span class="token punctuation">.</span><span class="token property-access">platform</span><span class="token punctuation">,</span>\n    language<span class="token operator">:</span> <span class="token dom variable">navigator</span><span class="token punctuation">.</span><span class="token property-access">language</span><span class="token punctuation">,</span>\n    url<span class="token operator">:</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">href</span><span class="token punctuation">,</span>\n    net<span class="token operator">:</span> connection <span class="token operator">?</span> connection<span class="token punctuation">.</span><span class="token property-access">effectiveType</span> <span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token comment">// 网络类型</span>\n    screenW<span class="token operator">:</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">screen</span><span class="token punctuation">.</span><span class="token property-access">width</span><span class="token punctuation">,</span>\n    screenH<span class="token operator">:</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">screen</span><span class="token punctuation">.</span><span class="token property-access">height</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> envData\n<span class="token punctuation">}</span>\n</code></pre>\n<p>地域分布首先通过上报Nginx服务器获取ip，再通过系统服务端，利用第三方IP解析服务，获取用户地域分布。</p>\n<h3 id="%E8%A1%8C%E4%B8%BA%E9%87%87%E9%9B%86">行为采集<a class="anchor" href="#%E8%A1%8C%E4%B8%BA%E9%87%87%E9%9B%86">§</a></h3>\n<h4 id="%E7%82%B9%E5%87%BB%E8%BE%93%E5%85%A5%E8%A1%8C%E4%B8%BA">点击输入行为<a class="anchor" href="#%E7%82%B9%E5%87%BB%E8%BE%93%E5%85%A5%E8%A1%8C%E4%B8%BA">§</a></h4>\n<p>使用addEventListener全局监听点击事件，将用户行为（click,input）和dom元素相关信息，存入行为栈，当错误发生将错误和行为一并上报。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">handleBehaviorEvent</span><span class="token punctuation">(</span>\n  <span class="token parameter">e<span class="token operator">:</span> <span class="token maybe-class-name">Event</span> <span class="token operator">|</span> <span class="token maybe-class-name">MouseEvent</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token constant">LISTEN_EVENTS</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">?</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">target</span> <span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token property-access">target</span>\n  <span class="token comment">//   todo Xpath  outerHTML  offsetX pageX</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> tagName<span class="token punctuation">,</span> className<span class="token punctuation">,</span>id <span class="token punctuation">,</span>innerText <span class="token punctuation">}</span> <span class="token operator">=</span> target\n  behaviorCache<span class="token punctuation">.</span><span class="token method function property-access">directPush</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span>\n      tagName<span class="token punctuation">,</span>\n      className<span class="token punctuation">,</span>\n      id<span class="token punctuation">,</span>\n      innerText<span class="token operator">:</span>innerText<span class="token punctuation">.</span><span class="token method function property-access">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      xpath <span class="token operator">:</span> <span class="token function">xpath</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 可选</span>\n      name <span class="token operator">:</span> target<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">||</span> target<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">||</span> target<span class="token punctuation">.</span><span class="token property-access">href</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%A1%8C%E4%B8%BA">发送请求行为<a class="anchor" href="#%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%A1%8C%E4%B8%BA">§</a></h4>\n<p>参考异常采集，数据异常一段中，收集请求相关数据。</p>\n<h4 id="%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC">页面跳转<a class="anchor" href="#%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC">§</a></h4>\n<p>页面跳转通过监听<code>hashchange</code>和<code>history.pushState</code> 和<code>history.replaceState</code>实现。需要注意的是，带hash的页面加载，会同时触发popstate</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> oldURL <span class="token operator">=</span>  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">href</span>\n<span class="token doc-comment comment">/**\n * historychange\n * 带hash的页面加载会触发popstate\n * 带hash回车 不管开始有没有hash 会触发俩事件\n * chrome 火狐 浏览器前进，从无到有hash，同时触发hashchange，从有到无不触发\n * chrome 火狐 浏览器后退，从无hash到有不触发，从有到无，同时触发hashchange\n *\n * <span class="token keyword">@export</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>PopStateEvent<span class="token punctuation">}</span></span> <span class="token parameter">e</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>LISTEN_EVENTS<span class="token punctuation">}</span></span> <span class="token parameter">type</span>\n */</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">handleHistoryChange</span><span class="token punctuation">(</span>\n  <span class="token parameter">e<span class="token operator">:</span> <span class="token maybe-class-name">PopStateEvent</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token constant">LISTEN_EVENTS</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> oldHash <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>oldURL<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> newURL <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">target</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">href</span>\n  <span class="token keyword">const</span> newHash <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">target</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">hash</span>\n  <span class="token comment">// 缓存旧url用于数据处理</span>\n  <span class="token keyword">const</span> tempOldURL <span class="token operator">=</span> oldURL\n  oldURL <span class="token operator">=</span> newURL <span class="token comment">// 更新URL</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>oldHash <span class="token operator">||</span> newHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这种情况,交由hashchange处理</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  behaviorCache<span class="token punctuation">.</span><span class="token method function property-access">directPush</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span>\n      oldURL<span class="token operator">:</span>tempOldURL<span class="token punctuation">,</span>\n      newURL<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">handleHashChange</span><span class="token punctuation">(</span>\n  <span class="token parameter">e<span class="token operator">:</span> <span class="token maybe-class-name">HashChangeEvent</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token constant">LISTEN_EVENTS</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>oldURL<span class="token punctuation">,</span> newURL <span class="token punctuation">}</span> <span class="token operator">=</span> e\n  behaviorCache<span class="token punctuation">.</span><span class="token method function property-access">directPush</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span>\n      newURL<span class="token punctuation">,</span>\n      oldURL<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5">日志上报<a class="anchor" href="#%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5">§</a></h2>\n<h3 id="%E4%B8%8A%E6%8A%A5%E6%96%B9%E5%BC%8F">上报方式<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E6%96%B9%E5%BC%8F">§</a></h3>\n<p>日志上报采用<code>new Image()</code>请求Nginx服务器上1像素gif图片的方式，将日志数据转化为<code>key=value</code>字符串格式，附在图片的src之后，这样便解决了上报跨域的问题。之所以使用1px的gif图片，是因为同为1px的图片，gif格式的数据量最小。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">imgLoadPromise</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token known-class-name class-name">Promise</span><span class="token operator">&lt;</span><span class="token maybe-class-name">Event</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    img<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    img<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n       <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">//  防止上报地址错误造成死循环</span>\n    <span class="token punctuation">}</span>\n    img<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> url\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E4%B8%8A%E6%8A%A5%E6%95%B0%E6%8D%AE">上报数据<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E6%95%B0%E6%8D%AE">§</a></h4>\n<h5 id="%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">错误信息<a class="anchor" href="#%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">§</a></h5>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>属性名称</th>\n<th>含义</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>message</td>\n<td>错误信息</td>\n<td>String</td>\n</tr>\n<tr>\n<td>filename/source</td>\n<td>异常的资源URL或文件名</td>\n<td>String</td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>异常行号</td>\n<td>Number</td>\n</tr>\n<tr>\n<td>colno</td>\n<td>异常列号</td>\n<td>Number</td>\n</tr>\n<tr>\n<td>error</td>\n<td>错误对象</td>\n<td>Object</td>\n</tr>\n<tr>\n<td>error.message</td>\n<td>错误信息</td>\n<td>String</td>\n</tr>\n<tr>\n<td>err.stack</td>\n<td>错误信息</td>\n<td>String</td>\n</tr>\n</tbody>\n</table></div>\n<p>将错误信息和其他信息等，存入一个JSON对象。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 上传的数据  尽量简化字符</span>\n<span class="token keyword">const</span> logData <span class="token operator">=</span> <span class="token punctuation">{</span>\n  appkey<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  vv<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用版本</span>\n  uuid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 设备id</span>\n  uid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 用户id</span>\n  sid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// session id</span>\n  ua<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// userAgent</span>\n  url<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 页面url</span>\n  title<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">//  字符串超长优先省略该项</span>\n  type<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 日志类型  错误 性能 行为</span>\n  ext<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 扩展参数</span>\n  bh<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 行为数据</span>\n  env<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 环境信息</span>\n  perf<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 性能数据</span>\n  errType<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 宽范围的错误类型，可以使用数字标识，只区分 jsError resourceError httpErr</span>\n  error<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// js错误对应</span>\n    type<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// js错误类型 ，如果堆栈中存在可以去掉</span>\n    msg<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    source<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    lineno<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    colno<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    stack<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 资源错误</span>\n    outerHTML<span class="token operator">:</span> <span class="token string">\'&lt;img src="test.jpg">\'</span><span class="token punctuation">,</span> <span class="token comment">// target.outerHTML</span>\n    src<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="https://www.test.com/test.jpg">https://www.test.com/test.jpg</a>\'</span><span class="token punctuation">,</span> <span class="token comment">// target.src  currentSrc</span>\n    tagName<span class="token operator">:</span> <span class="token string">\'IMG\'</span><span class="token punctuation">,</span> <span class="token comment">// target.nodeName tagName \'IMG\'</span>\n    id<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">//  target.id</span>\n    className<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// target.className</span>\n    name<span class="token operator">:</span> <span class="token string">\'jpg\'</span><span class="token punctuation">,</span> <span class="token comment">//  target.name</span>\n    <span class="token comment">// "XPath": "/html/body/img[1]",</span>\n    <span class="token comment">//       "selector": "HTML > BODY:nth-child(2) > IMG:nth-child(2)",</span>\n    <span class="token comment">//       "status": 404,</span>\n    <span class="token comment">//       "statusText": "Not Found"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 错误数据</span>\n  time<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 上传时间，错误捕获时间</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="sdk%E9%85%8D%E7%BD%AE">SDK配置<a class="anchor" href="#sdk%E9%85%8D%E7%BD%AE">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">let</span> defaultConfig<span class="token operator">:</span> <span class="token maybe-class-name">AppConfig</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 基础数据</span>\n  version<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 所监控应用版本</span>\n  appkey<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用id，来自平台</span>\n  reportUrl<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 图片上报地址 1像素gif，可跨域，末尾不带&amp;</span>\n  uuid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 设备唯一id 默认自动生成</span>\n  uid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 用户id</span>\n  sid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// session id</span>\n  ext<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 扩展参数，JSON.stringify()</span>\n  <span class="token comment">// 设置相关</span>\n  isTest<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否为测试数据，测试数据</span>\n  autoReport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启自动上报，默认为true</span>\n  rate<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 抽样率(0~1) 默认为1</span>\n  <span class="token comment">// delay: 0, // 延时上报 时间为毫秒</span>\n  <span class="token comment">// submit: null, // 自定义上报方式</span>\n  repeat<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 同一错误上报次数</span>\n  error<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否上报js错误，默认为true</span>\n  <span class="token comment">// 配置错误监控详细信息，仅在开启js上报时有效</span>\n  errorConfig<span class="token operator">:</span> <span class="token punctuation">{</span>\n    errorJS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 大类 js运行错误</span>\n    errorResource<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 大类 资源加载错误</span>\n    <span class="token comment">// 以下细分 仅在资源加载错误为true时有效</span>\n    <span class="token comment">// errorScript: true, // js脚本加载错误</span>\n    <span class="token comment">// errorImage: true, // 图片加载错误</span>\n    <span class="token comment">// errorCSS: true, // 样式文件加载错误</span>\n    <span class="token comment">// errorAudio: true, // 音频加载错误</span>\n    <span class="token comment">// errorVideo: true, // 视频加载错误</span>\n    <span class="token comment">// 以上仅在资源加载错误为true时有效</span>\n    errorAjax<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 大类 ajax请求错误</span>\n    errorSocket<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// socket 连接错误</span>\n    errorVue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Vue运行报错</span>\n    errorTry<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// try未catch报错</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 忽略某种错误</span>\n  ignore<span class="token operator">:</span> <span class="token punctuation">{</span>\n    ignoreErrors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略某种错误，对照error stack，支持Regexp和Function</span>\n    ignoreUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略某页面url或文件url或接口报错，支持单条或数组</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  behavior<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否监控用户行为，默认为true, 可为json</span>\n  <span class="token dom variable">performance</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否监控页面性能，默认为true, 可配置为json</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>SDK初始化</p>\n<pre class="language-js"><code class="language-js"> <span class="token keyword">var</span> dm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      version<span class="token operator">:</span> <span class="token string">\'1.0.0\'</span><span class="token punctuation">,</span> <span class="token comment">// 所监控应用版本</span>\n      appkey<span class="token operator">:</span> <span class="token string">\'4749fb30-3562-11eb-bf47-5d73b473057a\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用id，来自平台</span>\n      reportUrl<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://118.190.">http://118.190.</a>***.***:8091/track.gif\'</span><span class="token punctuation">,</span>\n      isTest<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      uuid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 设备唯一id 默认自动生成</span>\n      uid<span class="token operator">:</span> <span class="token dom variable">localStorage</span><span class="token punctuation">.</span><span class="token method function property-access">getItem</span><span class="token punctuation">(</span><span class="token string">\'uid\'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token dom variable">localStorage</span><span class="token punctuation">.</span><span class="token method function property-access">getItem</span><span class="token punctuation">(</span><span class="token string">\'uid\'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">\'user_\'</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化<a class="anchor" href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">§</a></h4>\n<h5 id="%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">并发控制<a class="anchor" href="#%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">§</a></h5>\n<p>上报尽量不影响业务主体请求，将上报信息推入上报队列，控制上传的并发。</p>\n<h5 id="requestidlecallback">requestIdleCallback<a class="anchor" href="#requestidlecallback">§</a></h5>\n<p><code>requestIdleCallback</code>可以检测浏览器的空闲状态，可以在空闲时发送上报请求。</p>\n<h5 id="%E4%B8%8A%E6%8A%A5%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86">上报失败处理<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86">§</a></h5>\n<p>上报失败进行重试，重试失败存到indexDB，作为本地日志，等到用户下一次进入的时候，再一并上报。</p>\n<h5 id="%E6%9C%8D%E5%8A%A1%E7%AB%AF">服务端<a class="anchor" href="#%E6%9C%8D%E5%8A%A1%E7%AB%AF">§</a></h5>\n<p>服务端直接返回204，提高速度。</p>\n<h5 id="%E9%87%8D%E5%A4%8D%E4%B8%8A%E6%8A%A5%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6">重复上报次数限制<a class="anchor" href="#%E9%87%8D%E5%A4%8D%E4%B8%8A%E6%8A%A5%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6">§</a></h5>\n<p>利用错误信息的路径，行号等信息，排除同一种错误的不同特性信息，不同系统版本的差异信息，校验md5是否一样，同类型错误数量大于N条（可配置）不再上传。后续可只记录错误出现的次数，更新错误最后出现的时间。</p>\n<h5 id="%E9%87%87%E6%A0%B7%E7%8E%87">采样率<a class="anchor" href="#%E9%87%87%E6%A0%B7%E7%8E%87">§</a></h5>\n<p>在初始化SDK时，设置采样率，在上传时按采样率<code>const randomIgnore = Math.random() &gt;= (config.rate || 1)</code>采样入库。</p>\n<h3 id="%E4%B8%8A%E6%8A%A5%E5%B7%A5%E7%A8%8B">上报工程<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E5%B7%A5%E7%A8%8B">§</a></h3>\n<h4 id="nginx%E9%85%8D%E7%BD%AE">nginx配置<a class="anchor" href="#nginx%E9%85%8D%E7%BD%AE">§</a></h4>\n<p>修改nginx配置文件http块中的log_format为json格式，日志中记录ip/time/referer/UA等。</p>\n<pre class="language-shell"><code class="language-shell"> <span class="token comment"># 对日志格式化成json</span>\n    log_format json <span class="token string">\'{"@timestamp":"<span class="token variable">$time_iso8601</span>",\'</span>\n                    <span class="token string">\'"@version":1,\'</span>\n                    <span class="token string">\'"host":"<span class="token variable">$server_addr</span>",\'</span>\n                    <span class="token string">\'"client":"<span class="token variable">$remote_addr</span>",\'</span>\n                    <span class="token string">\'"size":<span class="token variable">$body_bytes_sent</span>,\'</span>\n                    <span class="token string">\'"responsetime":<span class="token variable">$request_time</span>,\'</span>\n                    <span class="token string">\'"domain":"<span class="token variable">$host</span>",\'</span>\n                    <span class="token string">\'"url":"<span class="token variable">$uri</span>",\'</span>\n                    <span class="token string">\'"status":"<span class="token variable">$status</span>"}\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E8%AF%BB%E5%8F%96nginx%E6%97%A5%E5%BF%97%E5%85%A5%E5%BA%93">读取nginx日志入库<a class="anchor" href="#%E8%AF%BB%E5%8F%96nginx%E6%97%A5%E5%BF%97%E5%85%A5%E5%BA%93">§</a></h4>\n<h4 id="filebeat">Filebeat<a class="anchor" href="#filebeat">§</a></h4>\n<p>Filebeat是本地文件的日志数据采集器，可监控日志目录或特定日志文件（tail file），并将它们转发给Elasticsearch、Logstatsh或kafka等，Filebeat可以一次读取某个文件夹下的所有后缀名为log的文件，也可以读取指定的某一个后缀名为log的文件。</p>\n<p>filebeat.yml文件配置，<code>paths：</code>指定要监控的日志，filebeat收集日志后发往Logstatsh，配置如下：</p>\n<pre class="language-shell"><code class="language-shell">filebeat:\n  prospectors:\n    - input_type: log\n      paths:  <span class="token comment"># 这里是容器内的path  和nginx的log挂载同一目录</span>\n          - /tmp/access.log\n      tags: <span class="token punctuation">[</span><span class="token string">"nginx-access"</span><span class="token punctuation">]</span>\n  registry_file: /usr/share/filebeat/data/registry/registry  <span class="token comment"># 这个文件记录日志读取的位置，如果容器重启，可以从记录的位置开始取日志</span>\n\noutput:\n  logstash:  \n    hosts: <span class="token punctuation">[</span><span class="token string">"logstash:5044"</span><span class="token punctuation">]</span> \n</code></pre>\n<p>如果是海量数据，可以选择推到Kafka，而不是直接推到Logstatsh。</p>\n<h4 id="logstatsh">Logstatsh<a class="anchor" href="#logstatsh">§</a></h4>\n<p>可以设置对日志进行过滤，指定输出到Elasticsearch。</p>\n<pre class="language-shell"><code class="language-shell">input <span class="token punctuation">{</span>\n  beats <span class="token punctuation">{</span>\n    port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5044</span>\n    codec <span class="token operator">=</span><span class="token operator">></span> json\n    client_inactivity_timeout <span class="token operator">=</span><span class="token operator">></span> <span class="token number">36000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nfilter <span class="token punctuation">{</span>\n<span class="token keyword">if</span> <span class="token string">\'nginx-access\'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">{</span>\n  grok <span class="token punctuation">{</span>\n        match <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> \n          <span class="token string">"message"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"^%{IPV4:remote_addr} \[%{HTTPDATE:timestamp}\] <span class="token entity" title="\&quot;">\"</span>%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}<span class="token entity" title="\&quot;">\"</span> %{INT:status} %{INT:body_bytes_sent} <span class="token entity" title="\&quot;">\"</span>%{NOTSPACE:http_referer}<span class="token entity" title="\&quot;">\"</span> %{NUMBER:request_time} <span class="token entity" title="\&quot;">\"</span>%{IPV4:upstream_addr}:%{POSINT:upstream_port}<span class="token entity" title="\&quot;">\"</span> %{NUMBER:upstream_response_time} <span class="token entity" title="\&quot;">\"</span>%{DATA:http_user_agent}<span class="token entity" title="\&quot;">\"</span> <span class="token entity" title="\&quot;">\"</span>%{NOTSPACE:http_x_forwarded_for}<span class="token entity" title="\&quot;">\"</span>"</span>\n          <span class="token punctuation">}</span>\n        remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>   \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>    \n<span class="token punctuation">}</span>\noutput <span class="token punctuation">{</span>\n  elasticsearch <span class="token punctuation">{</span>\n    hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"elasticsearch:9200"</span><span class="token punctuation">]</span> <span class="token comment">#  elasticsearch docker</span>\n    index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"wwfmac-nginx"</span> <span class="token comment"># 索引</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="elasticsearch">ElasticSearch<a class="anchor" href="#elasticsearch">§</a></h5>\n<p>将Logstash消费的数据推送到ElasticSearch</p>\n<pre class="language-javascript"><code class="language-javascript">\n</code></pre>\n<h2 id="egg">Egg<a class="anchor" href="#egg">§</a></h2>\n<p>后台服务使用egg开发，首先定时从ElasticSearch获取原始日志数据，存储到MySQL数据库。再利用定时任务，按照不同的时间周期，对入库的数据进行计算存储。</p>\n<p>egg读取ElasticSearch，安装 <code>egg-es</code> 依赖</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// config.js 配置</span>\n exports<span class="token punctuation">.</span><span class="token property-access">elasticsearch</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    host<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://118.190.245.148:9200">http://118.190.245.148:9200</a>\'</span><span class="token punctuation">,</span>\n    apiVersion<span class="token operator">:</span> <span class="token string">\'7.x\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// pulgin.js 中配置</span>\nexports<span class="token punctuation">.</span><span class="token property-access">elasticsearch</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">\'egg-es\'</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 查询数据</span>\n<span class="token keyword">async</span> <span class="token function">queryES</span><span class="token punctuation">(</span><span class="token parameter">query <span class="token operator">=</span> <span class="token punctuation">{</span> match_all<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 相关文档：<a class="token url-link" href="https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/7.x/search_examples.html">https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/7.x/search_examples.html</a></span>\n    <span class="token comment">// const ctx = this.ctx</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">app</span><span class="token punctuation">.</span><span class="token property-access">elasticsearch</span><span class="token punctuation">.</span><span class="token method function property-access">search</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      index<span class="token operator">:</span> <span class="token constant">ES_INDEX</span><span class="token punctuation">,</span> <span class="token comment">// es索引</span>\n      size<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n      sort<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@timestamp:asc\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//按时间戳降序排序 </span>\n      body<span class="token operator">:</span> <span class="token punctuation">{</span>\n        query<span class="token operator">:</span> query\n        <span class="token comment">//   match: {</span>\n        <span class="token comment">//   }</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> arr <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token property-access">hits</span><span class="token punctuation">.</span><span class="token property-access">hits</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> arr<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E7%9B%91%E6%8E%A7%E6%8E%A7%E5%88%B6%E5%8F%B0">监控控制台<a class="anchor" href="#%E7%9B%91%E6%8E%A7%E6%8E%A7%E5%88%B6%E5%8F%B0">§</a></h2>\n<h3 id="%E6%95%B0%E6%8D%AE%E6%9F%A5%E7%9C%8B">数据查看<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E6%9F%A5%E7%9C%8B">§</a></h3>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>功能点</th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户数据</td>\n<td>按月、日、年统计新增用户，使用折线图呈现</td>\n<td></td>\n</tr>\n<tr>\n<td>设备、系统、浏览器数据</td>\n<td>按月统计数据分布，使用饼图呈现</td>\n<td></td>\n</tr>\n<tr>\n<td>性能数据数据</td>\n<td>按分钟、日、月计算平均值，使用区间条形图呈现</td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>错误列表</th>\n<th>可检索</th>\n<th>可拍续</th>\n<th>错误信息</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误详情</td>\n<td>错误堆栈</td>\n<td>用户行为</td>\n<td>特征信息</td>\n<td>可检索</td>\n</tr>\n<tr>\n<td>趋势</td>\n<td>错误趋势</td>\n<td>事件趋势</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<p>页面规划</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>错误列表页</th>\n<th>错误趋势</th>\n<th>检索区域 （多条件检索）</th>\n<th>错误列表（各维度拍续：错误数，错误用户数，时间排序，24小时内新增错误按时间排序）</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误详情页</td>\n<td>检索区域（时间 版本等简单的检索条件）</td>\n<td>事件趋势</td>\n<td>事件信息</td>\n<td>特征信息</td>\n<td>事件列表 聚合错误后错误的每一个具体错误事件</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id=""><a class="anchor" href="#">§</a></h3>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u524D\u7AEF\u5F02\u5E38\u76D1\u63A7\u7CFB\u7EDF\u5B9E\u8DF5"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>在看一些前端监控相关的文章时，经常看到评论中提到业界成熟的方案，没有必要自己造轮子。我这里做前端监控相关的研究，主要就是为了熟悉整个流程，本文记录了一些关键技术点，从异常采集、到上报、存储、查看的方案，内容较为跳跃，仅供参考。另外由于个人精力和水平制约，未实现分库分表、异常报警、错误分析定位等进阶功能。</p>\n<p>整个采集系统技术方面分为采集SDK，展示平台、后端服务三部分，采集SDK使用Typescript开发，使用Rollup打包；日志相关服务使用Docker快速部署，后端使用Egg框架快速开发。</p>\n<p>![image-20210314150012105](/Users/apsp/Library/Application Support/typora-user-images/image-20210314150012105.png)</p>\n<h2 id="%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86sdk">数据采集SDK<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86sdk">§</a></h2>\n<p>数据采集部分，主要采集了异常信息，坏境信息，性能信息，和部分行为信息。</p>\n<h3 id="%E5%BC%82%E5%B8%B8%E9%87%87%E9%9B%86">异常采集<a class="anchor" href="#%E5%BC%82%E5%B8%B8%E9%87%87%E9%9B%86">§</a></h3>\n<h4 id="%E5%89%8D%E7%AB%AFjs%E9%94%99%E8%AF%AF">前端JS错误<a class="anchor" href="#%E5%89%8D%E7%AB%AFjs%E9%94%99%E8%AF%AF">§</a></h4>\n<p>JS的错误信息采集有<code>window.onerror </code> 和 <code>window.addEventLisenter(\'error\',function(){})</code>两种方法，<code>window.onerror</code>是一个标准的错误捕获接口，它可以拿到对应的JavaScript运行时错误。<code>window.onerror</code>只能订阅一个，后面的会覆盖前面的。</p>\n<p><code>window.onerror</code> 无法获取到资源加载失败的情况，资源加载error事件不会向上冒泡到window，需要使用 <code>window.addEventLisenter（\'error\'）</code>来捕获资源加载失败。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">onerror</span> <span class="token operator">=</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> source<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span>error</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token spread operator">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">errorEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> message<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> errorEvent\n    <span class="token spread operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n</code></pre>\n<p>运行错误信息</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>message</td>\n<td>错误信息</td>\n<td>错误描述</td>\n</tr>\n<tr>\n<td>filename/source</td>\n<td>发生错误的脚本URL</td>\n<td><code>ErrorEvent</code>中是<code>filename</code>,在<code>onError</code>中是<code>source</code></td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>错误行</td>\n<td></td>\n</tr>\n<tr>\n<td>colno</td>\n<td>发生错误的列号</td>\n<td></td>\n</tr>\n<tr>\n<td>error</td>\n<td>Error 对象</td>\n<td><code>error.message error.stack</code> 是很重要的信息</td>\n</tr>\n</tbody>\n</table></div>\n<p>js中常见的几种Error类型</p>\n<ul>\n<li>\n<p>SyntaxError 语法错误</p>\n</li>\n<li>\n<p>Uncaught ReferenceError 引用错误</p>\n</li>\n<li>\n<p>RangeError 范围错误</p>\n</li>\n<li>\n<p>TypeError 类型错误</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>URIError URL错误</p>\n</li>\n<li>\n<p>EvalError eval()函数执行错误</p>\n</li>\n</ul>\n<h4 id="%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E9%94%99%E8%AF%AF">资源加载错误<a class="anchor" href="#%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E9%94%99%E8%AF%AF">§</a></h4>\n<p>资源如<code>&lt;img&gt;</code> <code>&lt;script&gt;</code>等加载失败，如上所述，需要使用 window.addEventLisenter(\'error\')，获取到 <code>errorEvent</code>。对于JS运行时错误，<code>errorEvent.target</code>指向window ，而对于资源加载错误，则指向相应的标签。通过taget的nodeName或tagName进行判断类型，可筛选或排除资源类型。</p>\n<h4 id="promise%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">Promise异常捕获<a class="anchor" href="#promise%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">§</a></h4>\n<p>onError和错误事件侦听，都无法获取<code>new Promise()</code> 里的报错，<code>.catch()</code>可以捕获到异常，但是需要每个Primise都添加.catch，理论上监控逻辑不应该侵入业务代码，可以将unhandledrejection抛出的错误再次抛出，就可以在addEventListener中捕获。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 打印e的内容，错误信息挂在reason上，包含message,stack</span>\n<span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">"unhandledrejection"</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">throw</span> e<span class="token punctuation">.</span><span class="token property-access">reason</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="asyncawait%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">async/await异常捕获<a class="anchor" href="#asyncawait%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">§</a></h4>\n<p>async异常可以被上层try catch捕获，如果没有，就只能通过unhandledrejection事件捕获了。</p>\n<h4 id="%E8%B7%A8%E5%9F%9Fjs%E9%94%99%E8%AF%AF">跨域JS错误<a class="anchor" href="#%E8%B7%A8%E5%9F%9Fjs%E9%94%99%E8%AF%AF">§</a></h4>\n<p>script 标签引入的跨域脚本，如果出现异常，window 下的 error 事件都只能得到 <code>Script error</code>，没有详细的错误信息，这里有两种解决方案。</p>\n<ol>\n<li>\n<p>使用 crossOrigin</p>\n<p>给<code>&lt;script&gt;</code>标签添加crossorigin属性， 并在服务器端设置 <code>Access-Control-Allow-Origins</code>响应头，允许脚本被跨域访问，\n就可以获取更详细的日志信息。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>crossorigin属性的取值</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>anonymous</td>\n<td>依赖CROS，不带cookie，当AS设置不等于origin或不是*时，js不加载</td>\n<td></td>\n</tr>\n<tr>\n<td>use-credentials</td>\n<td>需要<code>Access-Control-Allow-Credentials</code> 返回 true，此时浏览器<code>Access-Control-Allow-Origins:domian.com</code>必须设置具体域名，不支持通配符*，AC不等于origin时js不再加载</td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<p>如果给 <script> 标签添加了<code>crossorigin</code>属性，但是服务器端没有设置<code>Access-Control-Allow-Origins</code>，则会报跨域错误。</p>\n</li>\n<li>\n<p><code>try...catch</code></p>\n<p>该方案的弊端是需要包裹，只适合于被监控应用使用自定义上报方法主动上报。并且在 <code>try</code> 中发生的错误，浏览器不会把错误打在 <code>console</code> 里，也不会触发 <code>error</code> 事件，需要在 <code>catch</code> 里，把错误打在 <code>console.error</code> 里面，并手动包装 <code>ErrorEvent</code>，丢给 <code>window</code> 下的 <code>error</code> 事件捕获。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n    <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>apiData<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">ErrorEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorEvent</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">,</span> message<span class="token operator">:</span> error<span class="token punctuation">.</span><span class="token property-access">message</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里也会触发window.onerror</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">onerror</span> <span class="token operator">&amp;&amp;</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">onerror</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n</ol>\n<h4 id="%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3%E5%BC%82%E5%B8%B8">数据接口异常<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3%E5%BC%82%E5%B8%B8">§</a></h4>\n<p>数据接口常见异常，一是由于接口不可用导致前端出现问题，二数据字段导致缺失导致出现的JS错误，第二种错误往往可以在<code>error</code>中捕获的到，而对于数据接口的状态，基于<code>XMLHttpRequest</code>发起的数据请求，可以使用面向切片编程，劫持原型链上的方法，获取<code>xhr</code>实例，绑定事件监听。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> orignalEvents <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token string">\'abort\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'error\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'load\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'timeout\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'onreadystatechange\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token keyword">const</span> method <span class="token operator">=</span> <span class="token string">\'open\'</span>\n<span class="token keyword">const</span> originalXhrProto <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> originalXhrProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>\n originalXhrProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取xhr实例  绑定事件</span>\n    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">this</span>\n    orignalEvents<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">eType</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      xhr<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>eType<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    original<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h4 id="vue%E5%BC%82%E5%B8%B8">Vue异常<a class="anchor" href="#vue%E5%BC%82%E5%B8%B8">§</a></h4>\n<p>对于Vue中发生的异常，需要利用vue提供的handleError，一旦Vue发生异常都会调用这个方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'errorHandle:\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>同样我们使用面向切片编程的方式，对<code>errorHandler</code>进行劫持。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">listenVueError</span><span class="token punctuation">(</span><span class="token parameter">_Vue</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_Vue <span class="token operator">||</span> <span class="token operator">!</span>_Vue<span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> oldErrorHandler <span class="token operator">=</span> _Vue<span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">.</span><span class="token property-access">errorHandler</span>\n  _Vue<span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>\n    <span class="token comment">// errorHandler方法自己又报错了生产环境下会使用 console.error 在控制台中输出</span>\n    <span class="token comment">// 继续抛出到控制台</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> console <span class="token operator">!==</span> <span class="token string">\'undefined\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token property-access">error</span> <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    eventEmitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token constant">LISTEN_EVENTS</span><span class="token punctuation">.</span><span class="token constant">VUE</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldErrorHandler <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      oldErrorHandler<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>另外还有涉及小程序、<code>React</code>、<code>ReactNative</code> 、<code>console</code>中一些异常捕获方案，需要在被监控端添加少量代码，未在SDK中验证，不再详细列出。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>异常类型</th>\n<th>同步方法</th>\n<th>异步方法</th>\n<th>资源加载</th>\n<th>Promise</th>\n<th>async/await</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>try/catch</td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>error事件监听</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>unhandledrejection</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id="%E6%80%A7%E8%83%BD%E9%87%87%E9%9B%86">性能采集<a class="anchor" href="#%E6%80%A7%E8%83%BD%E9%87%87%E9%9B%86">§</a></h3>\n<h4 id="performance">performance<a class="anchor" href="#performance">§</a></h4>\n<p>性能采集，首先是收集<code>window.performance.timing</code>，以下是部分指标的计算。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 测试输出</span>\n<span class="token keyword">function</span> <span class="token function">calculateTiming</span><span class="token punctuation">(</span><span class="token parameter">perf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'perf\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'重定向耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">redirectEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">redirectStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'DNS查询耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">domainLookupEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">domainLookupStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'TCP链接耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">connectEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">connectStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'HTTP请求耗时 \'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">responseEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">responseStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'解析dom树耗时\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">domComplete</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">domInteractive</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'首包时间（~&lt;白屏时间） \'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">domLoading</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">navigationStart</span><span class="token punctuation">)</span>\n  <span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token string">\'domready可操作时间\'</span><span class="token punctuation">,</span>\n    perf<span class="token punctuation">.</span><span class="token property-access">domContentLoadedEventEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">navigationStart</span>\n  <span class="token punctuation">)</span>\n  <span class="token comment">// 需在onload里调用时，perf.loadEventEnd 未结束时值为0</span>\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'onload总下载时间\'</span><span class="token punctuation">,</span> perf<span class="token punctuation">.</span><span class="token property-access">loadEventEnd</span> <span class="token operator">-</span> perf<span class="token punctuation">.</span><span class="token property-access">navigationStart</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E5%85%B6%E4%BB%96%E6%8C%87%E6%A0%87">其他指标<a class="anchor" href="#%E5%85%B6%E4%BB%96%E6%8C%87%E6%A0%87">§</a></h4>\n<p>过<code>performance.getEntries()</code>，此方法返回 <code>PerformanceEntry</code> 对象数组，每个数组成员均是一个<code>PerformanceResourceTiming</code>对象。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 取全部</span>\n<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">performance</span><span class="token punctuation">.</span><span class="token method function property-access">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 取特定</span>\n<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token dom variable">performance</span><span class="token punctuation">.</span><span class="token method function property-access">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"entry_name"</span><span class="token punctuation">,</span> entryType<span class="token operator">:</span> <span class="token string">"mark"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>![image-20210307215254327](/Users/apsp/Library/Application Support/typora-user-images/image-20210307215254327.png)</p>\n<p><strong>白屏时间(FP)<strong>与</strong>首屏时间(FCP)</strong></p>\n<p>其中name为<code>first-paint</code>的对象，<code>startTime</code>和<code>duration</code>的值，即为白屏时间(FP)，<code>name</code>为<code>first-contentful-paint</code>，即为<strong>首屏时间(FCP)</strong> ，需要注意的是<code>PerformancePaintTiming</code>只支持chrome60、opera47以上版本，其他的Chrome 最新性能指标，可以自行查阅资料。</p>\n<h5 id="%E6%89%93%E7%82%B9%E6%97%B6%E9%97%B4">打点时间<a class="anchor" href="#%E6%89%93%E7%82%B9%E6%97%B6%E9%97%B4">§</a></h5>\n<p>另外通过<code>performance.mark()</code>可以自行记录打点时间，例如在<code>&lt;/head&gt;</code>前自行埋点<code>performance.mark(\'first-paint-script’)</code>，然后在获取<code>name</code>属性为<code>first-paint-script</code>的<code>entry</code>，获取对应的时间，这一时间近似白屏时间。</p>\n<p>SDK中可以约定一些常见的性能指标，被监控端选择合适的位置自行埋点，用于补充性能监控数据。</p>\n<h5 id="%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4">起始时间<a class="anchor" href="#%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4">§</a></h5>\n<p><code>performance.timing.navigationStart || query(\'_t\')</code> ，可约定URL中存在 _t 时，作为页面统计起始点时间。</p>\n<h4 id="%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4">图片加载时间<a class="anchor" href="#%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4">§</a></h4>\n<p>MutationObserver侦听DOM变化，在5秒内到最后一个变化的稳定时间点，作为时间点得到时间点T1，再用ResoucereTiming得到T1时间内加载的所有的图片Img，判断是不是本站（需统计的）图片，排除上报gif图片，得到图片资源加载完成时间T2。</p>\n<p><code>ResoucereTiming</code>的<code>entryType</code>值为<code>resource</code>，chrome浏览器中<code>initiatorType</code>为 <code>img</code>  ，firefox中<code>initiatorType</code> 为<code>other</code> 。</p>\n<h4 id="%E9%A6%96%E6%AC%A1%E5%8A%A0%E8%BD%BD%E6%88%96%E5%88%B7%E6%96%B0">首次加载或刷新<a class="anchor" href="#%E9%A6%96%E6%AC%A1%E5%8A%A0%E8%BD%BD%E6%88%96%E5%88%B7%E6%96%B0">§</a></h4>\n<p>在收集性能的同时，记录页面是首次刷新还是加载，可利用给window.name属性赋值，在页面刷新时不会重置来判断</p>\n<p>如果是单网页应用的首屏时间计算，更精准的时间计算，还需要根据业务需要自行打点记录。</p>\n<h3 id="%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86">环境信息采集<a class="anchor" href="#%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86">§</a></h3>\n<p>环境信息主要通过采集UA信息，进行上报，后台通过计算，获取浏览器分布等信息。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">getEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">Ienv</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token dom variable">window</span> <span class="token operator">===</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword">const</span> <span class="token dom variable">navigator</span> <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">navigator</span>\n  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token dom variable">navigator</span><span class="token punctuation">[</span><span class="token string">\'connection\'</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> envData <span class="token operator">=</span> <span class="token punctuation">{</span>\n    userAgent<span class="token operator">:</span> <span class="token dom variable">navigator</span><span class="token punctuation">.</span><span class="token property-access">userAgent</span><span class="token punctuation">,</span>\n    platform<span class="token operator">:</span> <span class="token dom variable">navigator</span><span class="token punctuation">.</span><span class="token property-access">platform</span><span class="token punctuation">,</span>\n    language<span class="token operator">:</span> <span class="token dom variable">navigator</span><span class="token punctuation">.</span><span class="token property-access">language</span><span class="token punctuation">,</span>\n    url<span class="token operator">:</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">href</span><span class="token punctuation">,</span>\n    net<span class="token operator">:</span> connection <span class="token operator">?</span> connection<span class="token punctuation">.</span><span class="token property-access">effectiveType</span> <span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token comment">// 网络类型</span>\n    screenW<span class="token operator">:</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">screen</span><span class="token punctuation">.</span><span class="token property-access">width</span><span class="token punctuation">,</span>\n    screenH<span class="token operator">:</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">screen</span><span class="token punctuation">.</span><span class="token property-access">height</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> envData\n<span class="token punctuation">}</span>\n</code></pre>\n<p>地域分布首先通过上报Nginx服务器获取ip，再通过系统服务端，利用第三方IP解析服务，获取用户地域分布。</p>\n<h3 id="%E8%A1%8C%E4%B8%BA%E9%87%87%E9%9B%86">行为采集<a class="anchor" href="#%E8%A1%8C%E4%B8%BA%E9%87%87%E9%9B%86">§</a></h3>\n<h4 id="%E7%82%B9%E5%87%BB%E8%BE%93%E5%85%A5%E8%A1%8C%E4%B8%BA">点击输入行为<a class="anchor" href="#%E7%82%B9%E5%87%BB%E8%BE%93%E5%85%A5%E8%A1%8C%E4%B8%BA">§</a></h4>\n<p>使用addEventListener全局监听点击事件，将用户行为（click,input）和dom元素相关信息，存入行为栈，当错误发生将错误和行为一并上报。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">handleBehaviorEvent</span><span class="token punctuation">(</span>\n  <span class="token parameter">e<span class="token operator">:</span> <span class="token maybe-class-name">Event</span> <span class="token operator">|</span> <span class="token maybe-class-name">MouseEvent</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token constant">LISTEN_EVENTS</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">?</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">target</span> <span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token property-access">target</span>\n  <span class="token comment">//   todo Xpath  outerHTML  offsetX pageX</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> tagName<span class="token punctuation">,</span> className<span class="token punctuation">,</span>id <span class="token punctuation">,</span>innerText <span class="token punctuation">}</span> <span class="token operator">=</span> target\n  behaviorCache<span class="token punctuation">.</span><span class="token method function property-access">directPush</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span>\n      tagName<span class="token punctuation">,</span>\n      className<span class="token punctuation">,</span>\n      id<span class="token punctuation">,</span>\n      innerText<span class="token operator">:</span>innerText<span class="token punctuation">.</span><span class="token method function property-access">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      xpath <span class="token operator">:</span> <span class="token function">xpath</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 可选</span>\n      name <span class="token operator">:</span> target<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">||</span> target<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">||</span> target<span class="token punctuation">.</span><span class="token property-access">href</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%A1%8C%E4%B8%BA">发送请求行为<a class="anchor" href="#%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%A1%8C%E4%B8%BA">§</a></h4>\n<p>参考异常采集，数据异常一段中，收集请求相关数据。</p>\n<h4 id="%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC">页面跳转<a class="anchor" href="#%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC">§</a></h4>\n<p>页面跳转通过监听<code>hashchange</code>和<code>history.pushState</code> 和<code>history.replaceState</code>实现。需要注意的是，带hash的页面加载，会同时触发popstate</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> oldURL <span class="token operator">=</span>  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">href</span>\n<span class="token doc-comment comment">/**\n * historychange\n * 带hash的页面加载会触发popstate\n * 带hash回车 不管开始有没有hash 会触发俩事件\n * chrome 火狐 浏览器前进，从无到有hash，同时触发hashchange，从有到无不触发\n * chrome 火狐 浏览器后退，从无hash到有不触发，从有到无，同时触发hashchange\n *\n * <span class="token keyword">@export</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>PopStateEvent<span class="token punctuation">}</span></span> <span class="token parameter">e</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>LISTEN_EVENTS<span class="token punctuation">}</span></span> <span class="token parameter">type</span>\n */</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">handleHistoryChange</span><span class="token punctuation">(</span>\n  <span class="token parameter">e<span class="token operator">:</span> <span class="token maybe-class-name">PopStateEvent</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token constant">LISTEN_EVENTS</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> oldHash <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>oldURL<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> newURL <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">target</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">href</span>\n  <span class="token keyword">const</span> newHash <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">target</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">hash</span>\n  <span class="token comment">// 缓存旧url用于数据处理</span>\n  <span class="token keyword">const</span> tempOldURL <span class="token operator">=</span> oldURL\n  oldURL <span class="token operator">=</span> newURL <span class="token comment">// 更新URL</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>oldHash <span class="token operator">||</span> newHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这种情况,交由hashchange处理</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  behaviorCache<span class="token punctuation">.</span><span class="token method function property-access">directPush</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span>\n      oldURL<span class="token operator">:</span>tempOldURL<span class="token punctuation">,</span>\n      newURL<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">handleHashChange</span><span class="token punctuation">(</span>\n  <span class="token parameter">e<span class="token operator">:</span> <span class="token maybe-class-name">HashChangeEvent</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token constant">LISTEN_EVENTS</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>oldURL<span class="token punctuation">,</span> newURL <span class="token punctuation">}</span> <span class="token operator">=</span> e\n  behaviorCache<span class="token punctuation">.</span><span class="token method function property-access">directPush</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span>\n      newURL<span class="token punctuation">,</span>\n      oldURL<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5">日志上报<a class="anchor" href="#%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5">§</a></h2>\n<h3 id="%E4%B8%8A%E6%8A%A5%E6%96%B9%E5%BC%8F">上报方式<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E6%96%B9%E5%BC%8F">§</a></h3>\n<p>日志上报采用<code>new Image()</code>请求Nginx服务器上1像素gif图片的方式，将日志数据转化为<code>key=value</code>字符串格式，附在图片的src之后，这样便解决了上报跨域的问题。之所以使用1px的gif图片，是因为同为1px的图片，gif格式的数据量最小。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">imgLoadPromise</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token known-class-name class-name">Promise</span><span class="token operator">&lt;</span><span class="token maybe-class-name">Event</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    img<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    img<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n       <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">//  防止上报地址错误造成死循环</span>\n    <span class="token punctuation">}</span>\n    img<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> url\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E4%B8%8A%E6%8A%A5%E6%95%B0%E6%8D%AE">上报数据<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E6%95%B0%E6%8D%AE">§</a></h4>\n<h5 id="%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">错误信息<a class="anchor" href="#%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">§</a></h5>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>属性名称</th>\n<th>含义</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>message</td>\n<td>错误信息</td>\n<td>String</td>\n</tr>\n<tr>\n<td>filename/source</td>\n<td>异常的资源URL或文件名</td>\n<td>String</td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>异常行号</td>\n<td>Number</td>\n</tr>\n<tr>\n<td>colno</td>\n<td>异常列号</td>\n<td>Number</td>\n</tr>\n<tr>\n<td>error</td>\n<td>错误对象</td>\n<td>Object</td>\n</tr>\n<tr>\n<td>error.message</td>\n<td>错误信息</td>\n<td>String</td>\n</tr>\n<tr>\n<td>err.stack</td>\n<td>错误信息</td>\n<td>String</td>\n</tr>\n</tbody>\n</table></div>\n<p>将错误信息和其他信息等，存入一个JSON对象。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 上传的数据  尽量简化字符</span>\n<span class="token keyword">const</span> logData <span class="token operator">=</span> <span class="token punctuation">{</span>\n  appkey<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  vv<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用版本</span>\n  uuid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 设备id</span>\n  uid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 用户id</span>\n  sid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// session id</span>\n  ua<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// userAgent</span>\n  url<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 页面url</span>\n  title<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">//  字符串超长优先省略该项</span>\n  type<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 日志类型  错误 性能 行为</span>\n  ext<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 扩展参数</span>\n  bh<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 行为数据</span>\n  env<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 环境信息</span>\n  perf<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 性能数据</span>\n  errType<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 宽范围的错误类型，可以使用数字标识，只区分 jsError resourceError httpErr</span>\n  error<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// js错误对应</span>\n    type<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// js错误类型 ，如果堆栈中存在可以去掉</span>\n    msg<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    source<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    lineno<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    colno<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    stack<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 资源错误</span>\n    outerHTML<span class="token operator">:</span> <span class="token string">\'&lt;img src="test.jpg">\'</span><span class="token punctuation">,</span> <span class="token comment">// target.outerHTML</span>\n    src<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="https://www.test.com/test.jpg">https://www.test.com/test.jpg</a>\'</span><span class="token punctuation">,</span> <span class="token comment">// target.src  currentSrc</span>\n    tagName<span class="token operator">:</span> <span class="token string">\'IMG\'</span><span class="token punctuation">,</span> <span class="token comment">// target.nodeName tagName \'IMG\'</span>\n    id<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">//  target.id</span>\n    className<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// target.className</span>\n    name<span class="token operator">:</span> <span class="token string">\'jpg\'</span><span class="token punctuation">,</span> <span class="token comment">//  target.name</span>\n    <span class="token comment">// "XPath": "/html/body/img[1]",</span>\n    <span class="token comment">//       "selector": "HTML > BODY:nth-child(2) > IMG:nth-child(2)",</span>\n    <span class="token comment">//       "status": 404,</span>\n    <span class="token comment">//       "statusText": "Not Found"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 错误数据</span>\n  time<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 上传时间，错误捕获时间</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="sdk%E9%85%8D%E7%BD%AE">SDK配置<a class="anchor" href="#sdk%E9%85%8D%E7%BD%AE">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">let</span> defaultConfig<span class="token operator">:</span> <span class="token maybe-class-name">AppConfig</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 基础数据</span>\n  version<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 所监控应用版本</span>\n  appkey<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用id，来自平台</span>\n  reportUrl<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 图片上报地址 1像素gif，可跨域，末尾不带&amp;</span>\n  uuid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 设备唯一id 默认自动生成</span>\n  uid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 用户id</span>\n  sid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// session id</span>\n  ext<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 扩展参数，JSON.stringify()</span>\n  <span class="token comment">// 设置相关</span>\n  isTest<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否为测试数据，测试数据</span>\n  autoReport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启自动上报，默认为true</span>\n  rate<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 抽样率(0~1) 默认为1</span>\n  <span class="token comment">// delay: 0, // 延时上报 时间为毫秒</span>\n  <span class="token comment">// submit: null, // 自定义上报方式</span>\n  repeat<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 同一错误上报次数</span>\n  error<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否上报js错误，默认为true</span>\n  <span class="token comment">// 配置错误监控详细信息，仅在开启js上报时有效</span>\n  errorConfig<span class="token operator">:</span> <span class="token punctuation">{</span>\n    errorJS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 大类 js运行错误</span>\n    errorResource<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 大类 资源加载错误</span>\n    <span class="token comment">// 以下细分 仅在资源加载错误为true时有效</span>\n    <span class="token comment">// errorScript: true, // js脚本加载错误</span>\n    <span class="token comment">// errorImage: true, // 图片加载错误</span>\n    <span class="token comment">// errorCSS: true, // 样式文件加载错误</span>\n    <span class="token comment">// errorAudio: true, // 音频加载错误</span>\n    <span class="token comment">// errorVideo: true, // 视频加载错误</span>\n    <span class="token comment">// 以上仅在资源加载错误为true时有效</span>\n    errorAjax<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 大类 ajax请求错误</span>\n    errorSocket<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// socket 连接错误</span>\n    errorVue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Vue运行报错</span>\n    errorTry<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// try未catch报错</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 忽略某种错误</span>\n  ignore<span class="token operator">:</span> <span class="token punctuation">{</span>\n    ignoreErrors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略某种错误，对照error stack，支持Regexp和Function</span>\n    ignoreUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略某页面url或文件url或接口报错，支持单条或数组</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  behavior<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否监控用户行为，默认为true, 可为json</span>\n  <span class="token dom variable">performance</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否监控页面性能，默认为true, 可配置为json</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>SDK初始化</p>\n<pre class="language-js"><code class="language-js"> <span class="token keyword">var</span> dm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      version<span class="token operator">:</span> <span class="token string">\'1.0.0\'</span><span class="token punctuation">,</span> <span class="token comment">// 所监控应用版本</span>\n      appkey<span class="token operator">:</span> <span class="token string">\'4749fb30-3562-11eb-bf47-5d73b473057a\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用id，来自平台</span>\n      reportUrl<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://118.190.">http://118.190.</a>***.***:8091/track.gif\'</span><span class="token punctuation">,</span>\n      isTest<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      uuid<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 设备唯一id 默认自动生成</span>\n      uid<span class="token operator">:</span> <span class="token dom variable">localStorage</span><span class="token punctuation">.</span><span class="token method function property-access">getItem</span><span class="token punctuation">(</span><span class="token string">\'uid\'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token dom variable">localStorage</span><span class="token punctuation">.</span><span class="token method function property-access">getItem</span><span class="token punctuation">(</span><span class="token string">\'uid\'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">\'user_\'</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化<a class="anchor" href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">§</a></h4>\n<h5 id="%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">并发控制<a class="anchor" href="#%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">§</a></h5>\n<p>上报尽量不影响业务主体请求，将上报信息推入上报队列，控制上传的并发。</p>\n<h5 id="requestidlecallback">requestIdleCallback<a class="anchor" href="#requestidlecallback">§</a></h5>\n<p><code>requestIdleCallback</code>可以检测浏览器的空闲状态，可以在空闲时发送上报请求。</p>\n<h5 id="%E4%B8%8A%E6%8A%A5%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86">上报失败处理<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86">§</a></h5>\n<p>上报失败进行重试，重试失败存到indexDB，作为本地日志，等到用户下一次进入的时候，再一并上报。</p>\n<h5 id="%E6%9C%8D%E5%8A%A1%E7%AB%AF">服务端<a class="anchor" href="#%E6%9C%8D%E5%8A%A1%E7%AB%AF">§</a></h5>\n<p>服务端直接返回204，提高速度。</p>\n<h5 id="%E9%87%8D%E5%A4%8D%E4%B8%8A%E6%8A%A5%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6">重复上报次数限制<a class="anchor" href="#%E9%87%8D%E5%A4%8D%E4%B8%8A%E6%8A%A5%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6">§</a></h5>\n<p>利用错误信息的路径，行号等信息，排除同一种错误的不同特性信息，不同系统版本的差异信息，校验md5是否一样，同类型错误数量大于N条（可配置）不再上传。后续可只记录错误出现的次数，更新错误最后出现的时间。</p>\n<h5 id="%E9%87%87%E6%A0%B7%E7%8E%87">采样率<a class="anchor" href="#%E9%87%87%E6%A0%B7%E7%8E%87">§</a></h5>\n<p>在初始化SDK时，设置采样率，在上传时按采样率<code>const randomIgnore = Math.random() &gt;= (config.rate || 1)</code>采样入库。</p>\n<h3 id="%E4%B8%8A%E6%8A%A5%E5%B7%A5%E7%A8%8B">上报工程<a class="anchor" href="#%E4%B8%8A%E6%8A%A5%E5%B7%A5%E7%A8%8B">§</a></h3>\n<h4 id="nginx%E9%85%8D%E7%BD%AE">nginx配置<a class="anchor" href="#nginx%E9%85%8D%E7%BD%AE">§</a></h4>\n<p>修改nginx配置文件http块中的log_format为json格式，日志中记录ip/time/referer/UA等。</p>\n<pre class="language-shell"><code class="language-shell"> <span class="token comment"># 对日志格式化成json</span>\n    log_format json <span class="token string">\'{"@timestamp":"<span class="token variable">$time_iso8601</span>",\'</span>\n                    <span class="token string">\'"@version":1,\'</span>\n                    <span class="token string">\'"host":"<span class="token variable">$server_addr</span>",\'</span>\n                    <span class="token string">\'"client":"<span class="token variable">$remote_addr</span>",\'</span>\n                    <span class="token string">\'"size":<span class="token variable">$body_bytes_sent</span>,\'</span>\n                    <span class="token string">\'"responsetime":<span class="token variable">$request_time</span>,\'</span>\n                    <span class="token string">\'"domain":"<span class="token variable">$host</span>",\'</span>\n                    <span class="token string">\'"url":"<span class="token variable">$uri</span>",\'</span>\n                    <span class="token string">\'"status":"<span class="token variable">$status</span>"}\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E8%AF%BB%E5%8F%96nginx%E6%97%A5%E5%BF%97%E5%85%A5%E5%BA%93">读取nginx日志入库<a class="anchor" href="#%E8%AF%BB%E5%8F%96nginx%E6%97%A5%E5%BF%97%E5%85%A5%E5%BA%93">§</a></h4>\n<h4 id="filebeat">Filebeat<a class="anchor" href="#filebeat">§</a></h4>\n<p>Filebeat是本地文件的日志数据采集器，可监控日志目录或特定日志文件（tail file），并将它们转发给Elasticsearch、Logstatsh或kafka等，Filebeat可以一次读取某个文件夹下的所有后缀名为log的文件，也可以读取指定的某一个后缀名为log的文件。</p>\n<p>filebeat.yml文件配置，<code>paths：</code>指定要监控的日志，filebeat收集日志后发往Logstatsh，配置如下：</p>\n<pre class="language-shell"><code class="language-shell">filebeat:\n  prospectors:\n    - input_type: log\n      paths:  <span class="token comment"># 这里是容器内的path  和nginx的log挂载同一目录</span>\n          - /tmp/access.log\n      tags: <span class="token punctuation">[</span><span class="token string">"nginx-access"</span><span class="token punctuation">]</span>\n  registry_file: /usr/share/filebeat/data/registry/registry  <span class="token comment"># 这个文件记录日志读取的位置，如果容器重启，可以从记录的位置开始取日志</span>\n\noutput:\n  logstash:  \n    hosts: <span class="token punctuation">[</span><span class="token string">"logstash:5044"</span><span class="token punctuation">]</span> \n</code></pre>\n<p>如果是海量数据，可以选择推到Kafka，而不是直接推到Logstatsh。</p>\n<h4 id="logstatsh">Logstatsh<a class="anchor" href="#logstatsh">§</a></h4>\n<p>可以设置对日志进行过滤，指定输出到Elasticsearch。</p>\n<pre class="language-shell"><code class="language-shell">input <span class="token punctuation">{</span>\n  beats <span class="token punctuation">{</span>\n    port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5044</span>\n    codec <span class="token operator">=</span><span class="token operator">></span> json\n    client_inactivity_timeout <span class="token operator">=</span><span class="token operator">></span> <span class="token number">36000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nfilter <span class="token punctuation">{</span>\n<span class="token keyword">if</span> <span class="token string">\'nginx-access\'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">{</span>\n  grok <span class="token punctuation">{</span>\n        match <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> \n          <span class="token string">"message"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"^%{IPV4:remote_addr} \[%{HTTPDATE:timestamp}\] <span class="token entity" title="\&quot;">\"</span>%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}<span class="token entity" title="\&quot;">\"</span> %{INT:status} %{INT:body_bytes_sent} <span class="token entity" title="\&quot;">\"</span>%{NOTSPACE:http_referer}<span class="token entity" title="\&quot;">\"</span> %{NUMBER:request_time} <span class="token entity" title="\&quot;">\"</span>%{IPV4:upstream_addr}:%{POSINT:upstream_port}<span class="token entity" title="\&quot;">\"</span> %{NUMBER:upstream_response_time} <span class="token entity" title="\&quot;">\"</span>%{DATA:http_user_agent}<span class="token entity" title="\&quot;">\"</span> <span class="token entity" title="\&quot;">\"</span>%{NOTSPACE:http_x_forwarded_for}<span class="token entity" title="\&quot;">\"</span>"</span>\n          <span class="token punctuation">}</span>\n        remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>   \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>    \n<span class="token punctuation">}</span>\noutput <span class="token punctuation">{</span>\n  elasticsearch <span class="token punctuation">{</span>\n    hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"elasticsearch:9200"</span><span class="token punctuation">]</span> <span class="token comment">#  elasticsearch docker</span>\n    index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"wwfmac-nginx"</span> <span class="token comment"># 索引</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="elasticsearch">ElasticSearch<a class="anchor" href="#elasticsearch">§</a></h5>\n<p>将Logstash消费的数据推送到ElasticSearch</p>\n<pre class="language-javascript"><code class="language-javascript">\n</code></pre>\n<h2 id="egg">Egg<a class="anchor" href="#egg">§</a></h2>\n<p>后台服务使用egg开发，首先定时从ElasticSearch获取原始日志数据，存储到MySQL数据库。再利用定时任务，按照不同的时间周期，对入库的数据进行计算存储。</p>\n<p>egg读取ElasticSearch，安装 <code>egg-es</code> 依赖</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// config.js 配置</span>\n exports<span class="token punctuation">.</span><span class="token property-access">elasticsearch</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    host<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://118.190.245.148:9200">http://118.190.245.148:9200</a>\'</span><span class="token punctuation">,</span>\n    apiVersion<span class="token operator">:</span> <span class="token string">\'7.x\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// pulgin.js 中配置</span>\nexports<span class="token punctuation">.</span><span class="token property-access">elasticsearch</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">\'egg-es\'</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 查询数据</span>\n<span class="token keyword">async</span> <span class="token function">queryES</span><span class="token punctuation">(</span><span class="token parameter">query <span class="token operator">=</span> <span class="token punctuation">{</span> match_all<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 相关文档：<a class="token url-link" href="https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/7.x/search_examples.html">https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/7.x/search_examples.html</a></span>\n    <span class="token comment">// const ctx = this.ctx</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">app</span><span class="token punctuation">.</span><span class="token property-access">elasticsearch</span><span class="token punctuation">.</span><span class="token method function property-access">search</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      index<span class="token operator">:</span> <span class="token constant">ES_INDEX</span><span class="token punctuation">,</span> <span class="token comment">// es索引</span>\n      size<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n      sort<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@timestamp:asc\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//按时间戳降序排序 </span>\n      body<span class="token operator">:</span> <span class="token punctuation">{</span>\n        query<span class="token operator">:</span> query\n        <span class="token comment">//   match: {</span>\n        <span class="token comment">//   }</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> arr <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token property-access">hits</span><span class="token punctuation">.</span><span class="token property-access">hits</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> arr<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E7%9B%91%E6%8E%A7%E6%8E%A7%E5%88%B6%E5%8F%B0">监控控制台<a class="anchor" href="#%E7%9B%91%E6%8E%A7%E6%8E%A7%E5%88%B6%E5%8F%B0">§</a></h2>\n<h3 id="%E6%95%B0%E6%8D%AE%E6%9F%A5%E7%9C%8B">数据查看<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E6%9F%A5%E7%9C%8B">§</a></h3>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>功能点</th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户数据</td>\n<td>按月、日、年统计新增用户，使用折线图呈现</td>\n<td></td>\n</tr>\n<tr>\n<td>设备、系统、浏览器数据</td>\n<td>按月统计数据分布，使用饼图呈现</td>\n<td></td>\n</tr>\n<tr>\n<td>性能数据数据</td>\n<td>按分钟、日、月计算平均值，使用区间条形图呈现</td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>错误列表</th>\n<th>可检索</th>\n<th>可拍续</th>\n<th>错误信息</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误详情</td>\n<td>错误堆栈</td>\n<td>用户行为</td>\n<td>特征信息</td>\n<td>可检索</td>\n</tr>\n<tr>\n<td>趋势</td>\n<td>错误趋势</td>\n<td>事件趋势</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<p>页面规划</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>错误列表页</th>\n<th>错误趋势</th>\n<th>检索区域 （多条件检索）</th>\n<th>错误列表（各维度拍续：错误数，错误用户数，时间排序，24小时内新增错误按时间排序）</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误详情页</td>\n<td>检索区域（时间 版本等简单的检索条件）</td>\n<td>事件趋势</td>\n<td>事件信息</td>\n<td>特征信息</td>\n<td>事件列表 聚合错误后错误的每一个具体错误事件</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id=""><a class="anchor" href="#">§</a></h3>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86sdk" }, "\u6570\u636E\u91C7\u96C6SDK"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%BC%82%E5%B8%B8%E9%87%87%E9%9B%86" }, "\u5F02\u5E38\u91C7\u96C6"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%80%A7%E8%83%BD%E9%87%87%E9%9B%86" }, "\u6027\u80FD\u91C7\u96C6"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86" }, "\u73AF\u5883\u4FE1\u606F\u91C7\u96C6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%A1%8C%E4%B8%BA%E9%87%87%E9%9B%86" }, "\u884C\u4E3A\u91C7\u96C6"),
                        React.createElement("ol", null)))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5" }, "\u65E5\u5FD7\u4E0A\u62A5"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%B8%8A%E6%8A%A5%E6%96%B9%E5%BC%8F" }, "\u4E0A\u62A5\u65B9\u5F0F"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%B8%8A%E6%8A%A5%E5%B7%A5%E7%A8%8B" }, "\u4E0A\u62A5\u5DE5\u7A0B"),
                        React.createElement("ol", null)))),
            React.createElement("li", null,
                React.createElement("a", { href: "#egg" }, "Egg")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E7%9B%91%E6%8E%A7%E6%8E%A7%E5%88%B6%E5%8F%B0" }, "\u76D1\u63A7\u63A7\u5236\u53F0"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%95%B0%E6%8D%AE%E6%9F%A5%E7%9C%8B" }, "\u6570\u636E\u67E5\u770B")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#" })))))),
    'author': "dingtt",
    'contributors': [
        "dingtt"
    ],
    'date': "2021-03-13T08:06:27.000Z",
    'updated': "2021-03-20T14:34:58.000Z",
    'excerpt': "在看一些前端监控相关的文章时，经常看到评论中提到业界成熟的方案，没有必要自己造轮子。我这里做前端监控相关的研究，主要就是为了熟悉整个流程，本文记录了一些关键技术点，从异常采集、到上报、存储、查看的方案，内容较为...",
    'cover': "/Users/apsp/Library/Application Support/typora-user-images/image-20210314150012105.png",
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
