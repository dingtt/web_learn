import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "执行上下文",
        "link": "js/context.html"
    },
    'next': {
        "text": "正则",
        "link": "js/regex.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'gh-pages' },
    'pagePath': "js/closure.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "js/closure.html",
    'title': "闭包和面向对象",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>闭包和面向对象</h1>\n<h2 id="01-%E9%97%AD%E5%8C%85">01-闭包<a class="anchor" href="#01-%E9%97%AD%E5%8C%85">§</a></h2>\n<h3 id="1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85">1. 什么是闭包?<a class="anchor" href="#1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85">§</a></h3>\n<ul>\n<li>闭包实际上是一种函数，所以闭包技术也是函数技术的一种；闭包能做的事情函数几乎都能做。</li>\n<li>闭包技术花式比较多，用法也比较灵活，一般开发人员在学习闭包的时候都会遇到瓶颈，主要是因为闭包技术的分界线并不明显。几乎无法用一个特点去区分。</li>\n<li>当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包</li>\n</ul>\n<h3 id="2-%E4%BA%A7%E7%94%9F%E9%97%AD%E5%8C%85%E7%9A%84%E6%9D%A1%E4%BB%B6">2. 产生闭包的条件?<a class="anchor" href="#2-%E4%BA%A7%E7%94%9F%E9%97%AD%E5%8C%85%E7%9A%84%E6%9D%A1%E4%BB%B6">§</a></h3>\n<ul>\n<li>函数嵌套</li>\n<li>内部函数引用了外部函数的数据(变量/函数)</li>\n</ul>\n<h3 id="3-%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E5%BD%A2%E5%BC%8F">3. 常见的闭包使用形式?<a class="anchor" href="#3-%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E5%BD%A2%E5%BC%8F">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>将函数作为另一个函数的返回值</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>将函数的形参作为实参传递给另一个函数调用</li>\n</ol>\n</li>\n</ul>\n<h3 id="4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E9%97%AD%E5%8C%85">4. 为什么要用闭包?<a class="anchor" href="#4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E9%97%AD%E5%8C%85">§</a></h3>\n<ul>\n<li>\n<p>局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。</p>\n</li>\n<li>\n<ol>\n<li>使函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>让函数外部可以操作(读写)到函数内部的数据(变量/函数)</li>\n</ol>\n</li>\n<li>\n<p>思考?</p>\n<ul>\n<li>\n<ol>\n<li>函数执行完后, 函数内部声明的局部变量是否还存在?</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>在函数外部能直接访问函数内部的局部变量吗?</li>\n</ol>\n</li>\n<li>\n<p>回顾</p>\n<ul>\n<li>\n<p>垃圾回收</p>\n<ul>\n<li>\n<p>定义</p>\n<ul>\n<li>\n<p>现实</p>\n<ul>\n<li>\n<ol>\n<li>房间几天不打扫, 有很多垃圾</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>经常不学习, 肚子里有很多垃圾</li>\n</ol>\n</li>\n<li>.......</li>\n</ul>\n</li>\n<li>\n<p>编程</p>\n<ul>\n<li>程序运行过程中也会产生垃圾</li>\n<li>垃圾积攒过多以后，会导致程序运行的速度过慢，所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用</p>\n<ul>\n<li>\n<ol>\n<li>当一个对象没有任何的变量或属性对它进行引用，我们无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理;</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作;</li>\n</ol>\n</li>\n<li>\n<ol start="3">\n<li>我们需要做的是将不再使用的对象设置null</li>\n</ol>\n</li>\n<li>var obj = new Object();\n// 各种对象操作逻辑\nobj = null;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>图示?</p>\n</li>\n</ul>\n<h3 id="5-%E9%97%AD%E5%8C%85%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">5. 闭包的生命周期?<a class="anchor" href="#5-%E9%97%AD%E5%8C%85%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">§</a></h3>\n<ul>\n<li>产生:  在嵌套内部函数定义执行完时就产生了(不是在调用)</li>\n<li>死亡:  在嵌套的内部函数成为垃圾对象时</li>\n<li>图示?</li>\n</ul>\n<h3 id="6-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5">6. 闭包应用-同步和异步<a class="anchor" href="#6-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5">§</a></h3>\n<ul>\n<li>借助小闭包, 把每次循环的i值都封闭起来; 当在事件函数中顺着作用域链中从内到外查找变量i, 会先找到被封闭在闭包环境中的i, 如果有3个按钮, 这里的i的值分别为0, 1, 2</li>\n</ul>\n<h3 id="7-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">7. 闭包应用-封装全局变量<a class="anchor" href="#7-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">§</a></h3>\n<ul>\n<li>\n<p>作用域链条</p>\n<ul>\n<li>JS中有很多作用域, 比如: 全局作用域 和  局部作用域</li>\n<li>\n<ol>\n<li>凡是存在作用域的地方一定有作用域链条, 变量的查找都是沿着这条链条自内而外的;</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>寻找变量都是递归遍历寻找, 当前作用域找不到, 就跳到上一个作用域遍历寻找, 直至顶层;</li>\n</ol>\n</li>\n<li>\n<ol start="3">\n<li>作用域链条太长, 会影响程序运行效率</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>把一些不需要暴露在全局的变量封装成&quot;私有变量&quot;</p>\n</li>\n</ul>\n<h3 id="8-%E9%97%AD%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8-%E5%AE%9A%E4%B9%89js%E6%A8%A1%E5%9D%97">8. 闭包的应用-定义JS模块<a class="anchor" href="#8-%E9%97%AD%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8-%E5%AE%9A%E4%B9%89js%E6%A8%A1%E5%9D%97">§</a></h3>\n<ul>\n<li>将所有的数据和功能都封装在一个函数内部(私有的)</li>\n<li>只向外暴露一个包含多个方法的对象或函数</li>\n<li>模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</li>\n</ul>\n<h3 id="9-%E9%97%AD%E5%8C%85%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BA%86%E8%A7%A3">9. 闭包和内存管理(了解)<a class="anchor" href="#9-%E9%97%AD%E5%8C%85%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BA%86%E8%A7%A3">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>误解</li>\n</ol>\n<ul>\n<li>\n<p>闭包是非常强大的特性, 但行业内有种说法</p>\n<ul>\n<li>闭包会造成内存泄漏, 所以尽量减少闭包的使用!</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<ol start="2">\n<li>误解产生的原因</li>\n</ol>\n<ul>\n<li>\n<p>局部变量本应该在函数退出时被解除引用, 但如果局部变量被封闭在闭包形成的环境中, 那么这个局部变量就能一直生存下去</p>\n<ul>\n<li>闭包会造成一些局部变量无法被及时销毁</li>\n</ul>\n</li>\n<li>\n<p>但</p>\n<ul>\n<li>\n<p>因为可能在其它的场景中需要经常使用这些变量, 所以我们主动把一些变量放入闭包中</p>\n<ul>\n<li>此时, 这些变量无论放在闭包中或者放在全局, 对内存的影响是一致的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>所以</p>\n<ul>\n<li>不能说闭包会造成内存泄漏</li>\n<li>我们可以在需要回收这些变量时, 手动把这些变量设为null;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<ol start="3">\n<li>存在的问题</li>\n</ol>\n<ul>\n<li>使用闭包的同时容易形成循环引用</li>\n<li>如果闭包的作用域中保存的是DOM节点, 这时就可能造成内存泄漏</li>\n<li>但这不是闭包的问题, 也不是js的问题; 而是垃圾回收机制采用的是引用计数策略</li>\n</ul>\n</li>\n<li>\n<ol start="4">\n<li>解决方案</li>\n</ol>\n<ul>\n<li>把造成循环引用的变量设为null</li>\n<li>不用的变量及时释放</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">§</a></h2>\n<h3 id="1-%E5%8E%9F%E5%9E%8B%E9%93%BE">1. 原型链<a class="anchor" href="#1-%E5%8E%9F%E5%9E%8B%E9%93%BE">§</a></h3>\n<p>JavaScript并不真的去复制一个原型对象，而是使得新对象持有一个原型的引用；</p>\n<ul>\n<li>\n<p>如果所有对象都有私有字段[[prototype]]，就是对象的原型；</p>\n</li>\n<li>\n<p>读一个属性，如果对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止。</p>\n</li>\n</ul>\n<p>ES6</p>\n<ul>\n<li>Object.create 根据指定的原型创建新对象，原型可以是null； （手写）</li>\n<li>Object.getPrototypeOf 获得一个对象的原型；</li>\n<li>Object.setPrototypeOf 设置一个对象的原型。</li>\n</ul>\n<p><strong>早期版本中的类与原型</strong></p>\n<p>在早期版本的JavaScript中，“类”的定义是一个私有属性 [[class]]，语言标准为内置类型诸如Number、 String、Date等指定了[[class]]属性，以表示它们的类。语言使用者唯一可以访问[[class]]属性的方式是 Object.prototype.toString。</p>\n<p>在ES5开始，[[class]] 私有属性被 Symbol.toStringTag 代替。Symbol.toStringTag来自定义 Object.prototype.toString 的行为：</p>\n<pre class="language-autoit"><code class="language-autoit">var o <span class="token operator">=</span> { <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"MyObject"</span> }\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">; // [object MyObject]</span>\n</code></pre>\n<p>new 运算接受一个构造器和一组调用参数，实际上做了几件事：  new T()   手写new</p>\n<ol>\n<li>以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；</li>\n<li>将 this 和调用参数传给构造器，执行；</li>\n<li>如果构造器返回的是对象，则返回，否则返回第一步创建的对象。</li>\n</ol>\n<p>用构造器模拟类的两种方法:****</p>\n<ol>\n<li>\n<p>直接在构造器中修改this，给this添加属性。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\nthis<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">;</span>\nthis<span class="token punctuation">.</span>p2 <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token comment">;</span>\n}\n}\nvar o1 <span class="token operator">=</span> new c1<span class="token comment">;</span>\no1<span class="token punctuation">.</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n</li>\n<li>\n<p>是修改构造器的prototype属性指向的对象，它是从这个构造器构造出来的所有对象的原型</p>\n</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n}\nc2<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">;</span>\nc2<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>p2 <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token comment">;</span>\n}\nvar o2 <span class="token operator">=</span> new c2<span class="token comment">;</span>\no2<span class="token punctuation">.</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<p>没有Object.create、Object.setPrototypeOf 的早期版本中，new 运算是唯一一个可以指定[[prototype]]的方法</p>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8">面向对象-构造函数使用<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8">§</a></h2>\n<h3 id="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">构造函数设置属性和方法<a class="anchor" href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">§</a></h3>\n<ul>\n<li>\n<p>实例属性/实例方法</p>\n<ul>\n<li>\n<p>都是绑定在使用构造函数创建出来的对象p上; 最终使用的时候也是使用对象p来进行访问;</p>\n</li>\n<li>\n<p>案例</p>\n<ul>\n<li>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> doFunc<span class="token punctuation">)</span> {\n  this<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token comment">;</span>\n  this<span class="token punctuation">.</span>doFunc <span class="token operator">=</span> doFunc<span class="token comment">;</span>\n    }}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>静态属性/静态方法</p>\n<ul>\n<li>\n<p>绑定在函数身上的属性和方法</p>\n</li>\n<li>\n<p>注意:</p>\n<ul>\n<li>函数本质也是一个对象, 既然是个对象, 那么就可以动态的添加属性和方法</li>\n<li>只要函数存在, 那么绑定在它身上的属性和方法, 也会一直存在</li>\n</ul>\n</li>\n<li>\n<p>应用场景</p>\n<ul>\n<li>\n<p>记录总共创建了多少个人对象</p>\n<ul>\n<li>\n<p>方案1</p>\n<ul>\n<li>全局变量</li>\n</ul>\n</li>\n<li>\n<p>方案2</p>\n<ul>\n<li>实例属性❌</li>\n</ul>\n</li>\n<li>\n<p>方案3</p>\n<ul>\n<li>静态属性/静态方法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>概念补充</p>\n<ul>\n<li>\n<p>实例化</p>\n<ul>\n<li>通过构造函数, 构造出对象这个过程</li>\n</ul>\n</li>\n<li>\n<p>实例</p>\n<ul>\n<li>被构造出来的对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E8%8E%B7%E5%8F%96">创建出来的对象类型获取<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E8%8E%B7%E5%8F%96">§</a></h3>\n<ul>\n<li>\n<p>01 获得内置对象的类型</p>\n<ul>\n<li>{}</li>\n<li>[1,2,3]</li>\n</ul>\n</li>\n<li>\n<p>02 获取根据自己声明的构造函数创建的对象</p>\n<ul>\n<li>\n<p><a href="http://p.constructor.name">p.constructor.name</a></p>\n</li>\n<li>\n<p>constructor</p>\n<ul>\n<li>对象的构造器</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E9%AA%8C%E8%AF%81">创建出来的对象类型验证<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E9%AA%8C%E8%AF%81">§</a></h3>\n<ul>\n<li>instanceof</li>\n</ul>\n<h3 id="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8">构造函数的调用<a class="anchor" href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8">§</a></h3>\n<ul>\n<li>\n<p>标准调用</p>\n<ul>\n<li>\n<p>var p = new Person();</p>\n</li>\n<li>\n<p>var p = new Person</p>\n<ul>\n<li>针对无参数的情况</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>错误调用</p>\n<ul>\n<li>\n<p>var p = Person();</p>\n<ul>\n<li>this会变</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8">实例方法的调用<a class="anchor" href="#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8">§</a></h3>\n<ul>\n<li>\n<p>p.run();</p>\n</li>\n<li>\n<p>var tmp = p.run;</p>\n<ul>\n<li>tmp();</li>\n<li>❌</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E6%80%BB%E7%BB%93">总结:<a class="anchor" href="#%E6%80%BB%E7%BB%93">§</a></h3>\n<ul>\n<li>\n<p>针对于函数内部的this</p>\n</li>\n<li>\n<p>如果这个函数当做一般函数来调用</p>\n<ul>\n<li>this则代表这个函数的调用者</li>\n</ul>\n</li>\n<li>\n<p>如果这个函数, 被当做构造函数来使用</p>\n<ul>\n<li>this, 代表构造出来的对象</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F">面向对象-访问函数原型对象的方式<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F">§</a></h2>\n<h3 id="1-%E9%80%9A%E8%BF%87--%E5%87%BD%E6%95%B0%E5%90%8Dprototype">1. 通过  函数名.prototype<a class="anchor" href="#1-%E9%80%9A%E8%BF%87--%E5%87%BD%E6%95%B0%E5%90%8Dprototype">§</a></h3>\n<h3 id="2-%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84__proto%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE">2. 通过对象中的__proto属性访问<a class="anchor" href="#2-%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84__proto%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE">§</a></h3>\n<h3 id="%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AF%B4%E6%98%8E">注意点说明<a class="anchor" href="#%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AF%B4%E6%98%8E">§</a></h3>\n<ul>\n<li>\n<pre><code>__proto__是一个非标准属性\n</code></pre>\n</li>\n<li>\n<pre><code>即ECMAScript中并不包含该属性,这只是某些浏览器为了方便开发人员开发和调试而提供的一个属性,不具备通用性\n</code></pre>\n</li>\n<li>\n<pre><code>建议:在调试的时候可以使用该属性,但不能出现在正式的代码中\n</code></pre>\n</li>\n</ul>\n<h2 id="hasownproperty%E5%92%8Cin%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C">hasOwnProperty和in属性操作<a class="anchor" href="#hasownproperty%E5%92%8Cin%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C">§</a></h2>\n<h3 id="in-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%A6%82%E6%9E%9C%E5%AF%B9%E8%B1%A1%E8%BA%AB%E4%B8%8A%E6%B2%A1%E6%9C%89-%E4%BC%9A%E5%88%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE">in 判断一个对象, 是否拥有某个属性(如果对象身上没有, 会到原型对象里面查找)<a class="anchor" href="#in-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%A6%82%E6%9E%9C%E5%AF%B9%E8%B1%A1%E8%BA%AB%E4%B8%8A%E6%B2%A1%E6%9C%89-%E4%BC%9A%E5%88%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE">§</a></h3>\n<h3 id="hasownproperty-%E5%8F%AA%E5%88%B0%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB%E6%9F%A5%E6%89%BE">hasOwnProperty: 只到对象自身查找<a class="anchor" href="#hasownproperty-%E5%8F%AA%E5%88%B0%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB%E6%9F%A5%E6%89%BE">§</a></h3>\n<h3 id="%E6%80%9D%E8%80%83">思考<a class="anchor" href="#%E6%80%9D%E8%80%83">§</a></h3>\n<ul>\n<li>怎样判断一个属性仅仅是原型对象属性</li>\n</ul>\n<h2 id="-isprototypeof%E5%92%8Cinstanceof">-isPrototypeOf和instanceOf<a class="anchor" href="#-isprototypeof%E5%92%8Cinstanceof">§</a></h2>\n<h3 id="isprototypeof-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1">isPrototypeOf: 判断一个对象, 是否是某个实例的原型对象<a class="anchor" href="#isprototypeof-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1">§</a></h3>\n<ul>\n<li>Person.prototype.isPrototypeOf(p)</li>\n</ul>\n<h3 id="instanceof--%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8A">instanceOf : 判断一个对象, 是否是某个构造函数的原型链上<a class="anchor" href="#instanceof--%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8A">§</a></h3>\n<h2 id="%E5%8E%9F%E5%9E%8B%E5%AE%8C%E5%96%84-constructor">原型完善-constructor<a class="anchor" href="#%E5%8E%9F%E5%9E%8B%E5%AE%8C%E5%96%84-constructor">§</a></h2>\n<h3 id="%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%B1%BB%E5%9E%8B">用于获取一个对象的真实类型<a class="anchor" href="#%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="es6%E4%B8%AD%E7%9A%84%E7%B1%BB">ES6中的类<a class="anchor" href="#es6%E4%B8%AD%E7%9A%84%E7%B1%BB">§</a></h4>\n<p>们通过get/set关键字来创建getter，通过括号和大括号来创建方法，数据型成员最好写在构造器里面。</p>\n<h2 id="%E6%8F%90%E9%97%AE">提问<a class="anchor" href="#%E6%8F%90%E9%97%AE">§</a></h2>\n<h3 id="%E7%94%BB%E5%87%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">画出构造函数, 实例, 原型对象之间的关系<a class="anchor" href="#%E7%94%BB%E5%87%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">§</a></h3>\n<h3 id="%E6%80%8E%E6%A0%B7%E7%BB%99%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">怎样给原型对象扩展属性和方法?<a class="anchor" href="#%E6%80%8E%E6%A0%B7%E7%BB%99%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>直接借助对象的动态特性</li>\n</ol>\n<ul>\n<li>拿到原型对象</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E7%A7%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95">函数的宿主可以有哪些?根据不同的宿主可以称为什么方法?<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E7%A7%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95">§</a></h3>\n<h3 id="%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB">对象分类<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB">§</a></h3>\n<ul>\n<li>\n<p>宿主对象（host  Objects）：由JavaScript宿主环境提供的对象，它们的行为完全由宿主环境决定。</p>\n</li>\n<li>\n<p>内置对象（Built-in  Objects）：由JavaScript语言提供的对象。</p>\n<ul>\n<li>固有对象（Intrinsic  Objects  ）：由标准规定，随着JavaScript运行时创建而自动创建的对象实例。</li>\n<li>原生对象（Native  Objects）：可以由用户通过Array、RegExp等内置构造器或者特殊语法创建的对 象。</li>\n<li>普通对象（Ordinary  Objects）：由{}语法、Object构造器或者class关键字定义类创建的对象，它能够 被原型继承。</li>\n</ul>\n</li>\n</ul>\n<h4 id="%E5%AE%BF%E4%B8%BB%E5%AF%B9%E8%B1%A1">宿主对象<a class="anchor" href="#%E5%AE%BF%E4%B8%BB%E5%AF%B9%E8%B1%A1">§</a></h4>\n<p>浏览器环境中的全局对象window，属性一部分雷子JavaScript，一部分来自浏览器环境。也分区固有和用户可创建两种。</p>\n<h4 id="%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1">内置对象<a class="anchor" href="#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1">§</a></h4>\n<h5 id="%E5%9B%BA%E6%9C%89%E5%AF%B9%E8%B1%A1">固有对象<a class="anchor" href="#%E5%9B%BA%E6%9C%89%E5%AF%B9%E8%B1%A1">§</a></h5>\n<p>固有对象是由标准规定，随着JavaScript运行时创建而自动创建的对象实例。固有对象在JS代码执行前就已经存在。</p>\n<h6 id="%E4%B8%89%E4%B8%AA%E5%80%BC">三个值<a class="anchor" href="#%E4%B8%89%E4%B8%AA%E5%80%BC">§</a></h6>\n<p>Infinity、NaN、undefined</p>\n<h6 id="%E4%B9%9D%E4%B8%AA%E5%87%BD%E6%95%B0"><strong>九个函数</strong><a class="anchor" href="#%E4%B9%9D%E4%B8%AA%E5%87%BD%E6%95%B0">§</a></h6>\n<p>eval\nisFinite\nisNaN\nparseFloat\nparseInt\ndecodeURI\ndecodeURIComponent\nencodeURI\nencodeURIComponen</p>\n<h6 id="%E6%9E%84%E9%80%A0%E5%99%A8"><strong>构造器</strong><a class="anchor" href="#%E6%9E%84%E9%80%A0%E5%99%A8">§</a></h6>\n<p>Array、Date、RegExp、Promise、Proxy、Map、WeakMap、Set、WeapSet、Function、Boolean、 String、Number、Symbol、Object、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError URIError、ArrayBuffer、SharedArrayBuffer、DataView、Typed  Array、Float32Array、Float64Array、 Int8Array、Int16Array、Int32Array、UInt8Array、UInt16Array、UInt32Array、UInt8ClampedArray</p>\n<h6 id="%E5%9B%9B%E4%B8%AA%E7%94%A8%E4%BA%8E%E5%BD%93%E4%BD%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%AF%B9%E8%B1%A1">四个用于当作命名空间的对象<a class="anchor" href="#%E5%9B%9B%E4%B8%AA%E7%94%A8%E4%BA%8E%E5%BD%93%E4%BD%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%AF%B9%E8%B1%A1">§</a></h6>\n<p>Atomics\nJSON\nMath\nReflect</p>\n<h5 id="%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1">原生对象<a class="anchor" href="#%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1">§</a></h5>\n<p>能够通过语言本身的构造器创建的对象称为原生对象，在JavaScript标准中，提供了30 多个构造器</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>基础功能和数据结构</th>\n<th>错误类型</th>\n<th>二进制操作</th>\n<th>带类型的数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Boolean</td>\n<td>Array</td>\n<td>Error</td>\n<td>ArrayBuffer</td>\n<td>Float32Array</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Date</td>\n<td>EvalError</td>\n<td>SharedArrayBuffer</td>\n<td>Float64Array</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>RegExp</td>\n<td>RangeError</td>\n<td>DataView</td>\n<td>Int8Array</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>Promise</td>\n<td>ReferenceError</td>\n<td></td>\n<td>Int16Array</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>Proxy</td>\n<td>SyntaxError</td>\n<td></td>\n<td>Int32Array</td>\n</tr>\n<tr>\n<td></td>\n<td>Map</td>\n<td>TypeError</td>\n<td></td>\n<td>UInt8Array</td>\n</tr>\n<tr>\n<td></td>\n<td>WeakMap</td>\n<td>URLError</td>\n<td></td>\n<td>UInt16Array</td>\n</tr>\n<tr>\n<td></td>\n<td>Set</td>\n<td></td>\n<td></td>\n<td>UInt32Array</td>\n</tr>\n<tr>\n<td></td>\n<td>WeakSet</td>\n<td></td>\n<td></td>\n<td>UInt8ClampedArray</td>\n</tr>\n<tr>\n<td></td>\n<td>Function</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<h5 id="%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%99%A8%E5%AF%B9%E8%B1%A1">函数对象和构造器对象<a class="anchor" href="#%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%99%A8%E5%AF%B9%E8%B1%A1">§</a></h5>\n<p>用对象来模拟函数和构造器</p>\n<p>函数对象的定义是：具有[[call]]私有字段的对象，构造器对象的定义是：具有私有字段[[construct]]的对 象。</p>\n<p>任何对象只需要实现[[call]]，它就是一个函数对象，可以去作为函数被调用。而如果它能 实现[[construct]]，它就是一个构造器对象，可以作为构造器被调用。</p>\n<blockquote>\n<p>[[call]]私有字段必须是一个引擎中定义的函数，需要接受this值和调用参数，并且会产生域的 切换</p>\n</blockquote>\n<p>对于宿主和内置对象来说，它们实现[[call]]（作为函数被调用）和[[construct]]（作为构造器被调用）不总 是一致的。比如内置对象  Date  在作为构造器调用时产生新的对象，作为函数时，则产生字符串。</p>\n<p>而浏览器宿主环境中，提供的Image构造器，则根本不允许被作为函数调用。</p>\n<p>基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p>\n<p>如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">new</span><span class="token punctuation">(</span> a <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> error\n</code></pre>\n<p>如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p>\n<p>对于用户使用  function  语法或者Function构造器创建的对象来说，[[call]]和[[construct]]行为总是相似的。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n  return <span class="token number">1</span>\n}\nvar v1 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nvar v2 <span class="token operator">=</span> new <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>构造器实例化，[[contruct]]的执行过程</p>\n<ol>\n<li>以Object.protope为原型创建一个对象</li>\n<li>以新对象为this，执行函数的[[call]]</li>\n<li>如果[[call]]的返回值是对象，那么返回这个对象，否则返回第一步的对象</li>\n</ol>\n<h4 id="%E7%89%B9%E6%AE%8A%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%AF%B9%E8%B1%A1">特殊行为的对象<a class="anchor" href="#%E7%89%B9%E6%AE%8A%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%AF%B9%E8%B1%A1">§</a></h4>\n<p>Array：Array的length属性根据最大的下标自动发生变化。\nObject.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。\nString：为了支持下标运算，String的正整数属性访问会去字符串里查找。\nArguments：arguments的非负整数型下标属性跟对应的变量联动。</p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u95ED\u5305\u548C\u9762\u5411\u5BF9\u8C61"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="01-%E9%97%AD%E5%8C%85">01-闭包<a class="anchor" href="#01-%E9%97%AD%E5%8C%85">§</a></h2>\n<h3 id="1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85">1. 什么是闭包?<a class="anchor" href="#1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85">§</a></h3>\n<ul>\n<li>闭包实际上是一种函数，所以闭包技术也是函数技术的一种；闭包能做的事情函数几乎都能做。</li>\n<li>闭包技术花式比较多，用法也比较灵活，一般开发人员在学习闭包的时候都会遇到瓶颈，主要是因为闭包技术的分界线并不明显。几乎无法用一个特点去区分。</li>\n<li>当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包</li>\n</ul>\n<h3 id="2-%E4%BA%A7%E7%94%9F%E9%97%AD%E5%8C%85%E7%9A%84%E6%9D%A1%E4%BB%B6">2. 产生闭包的条件?<a class="anchor" href="#2-%E4%BA%A7%E7%94%9F%E9%97%AD%E5%8C%85%E7%9A%84%E6%9D%A1%E4%BB%B6">§</a></h3>\n<ul>\n<li>函数嵌套</li>\n<li>内部函数引用了外部函数的数据(变量/函数)</li>\n</ul>\n<h3 id="3-%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E5%BD%A2%E5%BC%8F">3. 常见的闭包使用形式?<a class="anchor" href="#3-%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E5%BD%A2%E5%BC%8F">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>将函数作为另一个函数的返回值</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>将函数的形参作为实参传递给另一个函数调用</li>\n</ol>\n</li>\n</ul>\n<h3 id="4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E9%97%AD%E5%8C%85">4. 为什么要用闭包?<a class="anchor" href="#4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E9%97%AD%E5%8C%85">§</a></h3>\n<ul>\n<li>\n<p>局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。</p>\n</li>\n<li>\n<ol>\n<li>使函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>让函数外部可以操作(读写)到函数内部的数据(变量/函数)</li>\n</ol>\n</li>\n<li>\n<p>思考?</p>\n<ul>\n<li>\n<ol>\n<li>函数执行完后, 函数内部声明的局部变量是否还存在?</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>在函数外部能直接访问函数内部的局部变量吗?</li>\n</ol>\n</li>\n<li>\n<p>回顾</p>\n<ul>\n<li>\n<p>垃圾回收</p>\n<ul>\n<li>\n<p>定义</p>\n<ul>\n<li>\n<p>现实</p>\n<ul>\n<li>\n<ol>\n<li>房间几天不打扫, 有很多垃圾</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>经常不学习, 肚子里有很多垃圾</li>\n</ol>\n</li>\n<li>.......</li>\n</ul>\n</li>\n<li>\n<p>编程</p>\n<ul>\n<li>程序运行过程中也会产生垃圾</li>\n<li>垃圾积攒过多以后，会导致程序运行的速度过慢，所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用</p>\n<ul>\n<li>\n<ol>\n<li>当一个对象没有任何的变量或属性对它进行引用，我们无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理;</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作;</li>\n</ol>\n</li>\n<li>\n<ol start="3">\n<li>我们需要做的是将不再使用的对象设置null</li>\n</ol>\n</li>\n<li>var obj = new Object();\n// 各种对象操作逻辑\nobj = null;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>图示?</p>\n</li>\n</ul>\n<h3 id="5-%E9%97%AD%E5%8C%85%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">5. 闭包的生命周期?<a class="anchor" href="#5-%E9%97%AD%E5%8C%85%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">§</a></h3>\n<ul>\n<li>产生:  在嵌套内部函数定义执行完时就产生了(不是在调用)</li>\n<li>死亡:  在嵌套的内部函数成为垃圾对象时</li>\n<li>图示?</li>\n</ul>\n<h3 id="6-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5">6. 闭包应用-同步和异步<a class="anchor" href="#6-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5">§</a></h3>\n<ul>\n<li>借助小闭包, 把每次循环的i值都封闭起来; 当在事件函数中顺着作用域链中从内到外查找变量i, 会先找到被封闭在闭包环境中的i, 如果有3个按钮, 这里的i的值分别为0, 1, 2</li>\n</ul>\n<h3 id="7-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">7. 闭包应用-封装全局变量<a class="anchor" href="#7-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">§</a></h3>\n<ul>\n<li>\n<p>作用域链条</p>\n<ul>\n<li>JS中有很多作用域, 比如: 全局作用域 和  局部作用域</li>\n<li>\n<ol>\n<li>凡是存在作用域的地方一定有作用域链条, 变量的查找都是沿着这条链条自内而外的;</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>寻找变量都是递归遍历寻找, 当前作用域找不到, 就跳到上一个作用域遍历寻找, 直至顶层;</li>\n</ol>\n</li>\n<li>\n<ol start="3">\n<li>作用域链条太长, 会影响程序运行效率</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>把一些不需要暴露在全局的变量封装成&quot;私有变量&quot;</p>\n</li>\n</ul>\n<h3 id="8-%E9%97%AD%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8-%E5%AE%9A%E4%B9%89js%E6%A8%A1%E5%9D%97">8. 闭包的应用-定义JS模块<a class="anchor" href="#8-%E9%97%AD%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8-%E5%AE%9A%E4%B9%89js%E6%A8%A1%E5%9D%97">§</a></h3>\n<ul>\n<li>将所有的数据和功能都封装在一个函数内部(私有的)</li>\n<li>只向外暴露一个包含多个方法的对象或函数</li>\n<li>模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</li>\n</ul>\n<h3 id="9-%E9%97%AD%E5%8C%85%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BA%86%E8%A7%A3">9. 闭包和内存管理(了解)<a class="anchor" href="#9-%E9%97%AD%E5%8C%85%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BA%86%E8%A7%A3">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>误解</li>\n</ol>\n<ul>\n<li>\n<p>闭包是非常强大的特性, 但行业内有种说法</p>\n<ul>\n<li>闭包会造成内存泄漏, 所以尽量减少闭包的使用!</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<ol start="2">\n<li>误解产生的原因</li>\n</ol>\n<ul>\n<li>\n<p>局部变量本应该在函数退出时被解除引用, 但如果局部变量被封闭在闭包形成的环境中, 那么这个局部变量就能一直生存下去</p>\n<ul>\n<li>闭包会造成一些局部变量无法被及时销毁</li>\n</ul>\n</li>\n<li>\n<p>但</p>\n<ul>\n<li>\n<p>因为可能在其它的场景中需要经常使用这些变量, 所以我们主动把一些变量放入闭包中</p>\n<ul>\n<li>此时, 这些变量无论放在闭包中或者放在全局, 对内存的影响是一致的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>所以</p>\n<ul>\n<li>不能说闭包会造成内存泄漏</li>\n<li>我们可以在需要回收这些变量时, 手动把这些变量设为null;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<ol start="3">\n<li>存在的问题</li>\n</ol>\n<ul>\n<li>使用闭包的同时容易形成循环引用</li>\n<li>如果闭包的作用域中保存的是DOM节点, 这时就可能造成内存泄漏</li>\n<li>但这不是闭包的问题, 也不是js的问题; 而是垃圾回收机制采用的是引用计数策略</li>\n</ul>\n</li>\n<li>\n<ol start="4">\n<li>解决方案</li>\n</ol>\n<ul>\n<li>把造成循环引用的变量设为null</li>\n<li>不用的变量及时释放</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">§</a></h2>\n<h3 id="1-%E5%8E%9F%E5%9E%8B%E9%93%BE">1. 原型链<a class="anchor" href="#1-%E5%8E%9F%E5%9E%8B%E9%93%BE">§</a></h3>\n<p>JavaScript并不真的去复制一个原型对象，而是使得新对象持有一个原型的引用；</p>\n<ul>\n<li>\n<p>如果所有对象都有私有字段[[prototype]]，就是对象的原型；</p>\n</li>\n<li>\n<p>读一个属性，如果对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止。</p>\n</li>\n</ul>\n<p>ES6</p>\n<ul>\n<li>Object.create 根据指定的原型创建新对象，原型可以是null； （手写）</li>\n<li>Object.getPrototypeOf 获得一个对象的原型；</li>\n<li>Object.setPrototypeOf 设置一个对象的原型。</li>\n</ul>\n<p><strong>早期版本中的类与原型</strong></p>\n<p>在早期版本的JavaScript中，“类”的定义是一个私有属性 [[class]]，语言标准为内置类型诸如Number、 String、Date等指定了[[class]]属性，以表示它们的类。语言使用者唯一可以访问[[class]]属性的方式是 Object.prototype.toString。</p>\n<p>在ES5开始，[[class]] 私有属性被 Symbol.toStringTag 代替。Symbol.toStringTag来自定义 Object.prototype.toString 的行为：</p>\n<pre class="language-autoit"><code class="language-autoit">var o <span class="token operator">=</span> { <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"MyObject"</span> }\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">; // [object MyObject]</span>\n</code></pre>\n<p>new 运算接受一个构造器和一组调用参数，实际上做了几件事：  new T()   手写new</p>\n<ol>\n<li>以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；</li>\n<li>将 this 和调用参数传给构造器，执行；</li>\n<li>如果构造器返回的是对象，则返回，否则返回第一步创建的对象。</li>\n</ol>\n<p>用构造器模拟类的两种方法:****</p>\n<ol>\n<li>\n<p>直接在构造器中修改this，给this添加属性。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\nthis<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">;</span>\nthis<span class="token punctuation">.</span>p2 <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token comment">;</span>\n}\n}\nvar o1 <span class="token operator">=</span> new c1<span class="token comment">;</span>\no1<span class="token punctuation">.</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n</li>\n<li>\n<p>是修改构造器的prototype属性指向的对象，它是从这个构造器构造出来的所有对象的原型</p>\n</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n}\nc2<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">;</span>\nc2<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>p2 <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token comment">;</span>\n}\nvar o2 <span class="token operator">=</span> new c2<span class="token comment">;</span>\no2<span class="token punctuation">.</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<p>没有Object.create、Object.setPrototypeOf 的早期版本中，new 运算是唯一一个可以指定[[prototype]]的方法</p>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8">面向对象-构造函数使用<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8">§</a></h2>\n<h3 id="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">构造函数设置属性和方法<a class="anchor" href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">§</a></h3>\n<ul>\n<li>\n<p>实例属性/实例方法</p>\n<ul>\n<li>\n<p>都是绑定在使用构造函数创建出来的对象p上; 最终使用的时候也是使用对象p来进行访问;</p>\n</li>\n<li>\n<p>案例</p>\n<ul>\n<li>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> doFunc<span class="token punctuation">)</span> {\n  this<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token comment">;</span>\n  this<span class="token punctuation">.</span>doFunc <span class="token operator">=</span> doFunc<span class="token comment">;</span>\n    }}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>静态属性/静态方法</p>\n<ul>\n<li>\n<p>绑定在函数身上的属性和方法</p>\n</li>\n<li>\n<p>注意:</p>\n<ul>\n<li>函数本质也是一个对象, 既然是个对象, 那么就可以动态的添加属性和方法</li>\n<li>只要函数存在, 那么绑定在它身上的属性和方法, 也会一直存在</li>\n</ul>\n</li>\n<li>\n<p>应用场景</p>\n<ul>\n<li>\n<p>记录总共创建了多少个人对象</p>\n<ul>\n<li>\n<p>方案1</p>\n<ul>\n<li>全局变量</li>\n</ul>\n</li>\n<li>\n<p>方案2</p>\n<ul>\n<li>实例属性❌</li>\n</ul>\n</li>\n<li>\n<p>方案3</p>\n<ul>\n<li>静态属性/静态方法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>概念补充</p>\n<ul>\n<li>\n<p>实例化</p>\n<ul>\n<li>通过构造函数, 构造出对象这个过程</li>\n</ul>\n</li>\n<li>\n<p>实例</p>\n<ul>\n<li>被构造出来的对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E8%8E%B7%E5%8F%96">创建出来的对象类型获取<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E8%8E%B7%E5%8F%96">§</a></h3>\n<ul>\n<li>\n<p>01 获得内置对象的类型</p>\n<ul>\n<li>{}</li>\n<li>[1,2,3]</li>\n</ul>\n</li>\n<li>\n<p>02 获取根据自己声明的构造函数创建的对象</p>\n<ul>\n<li>\n<p><a href="http://p.constructor.name">p.constructor.name</a></p>\n</li>\n<li>\n<p>constructor</p>\n<ul>\n<li>对象的构造器</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E9%AA%8C%E8%AF%81">创建出来的对象类型验证<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E9%AA%8C%E8%AF%81">§</a></h3>\n<ul>\n<li>instanceof</li>\n</ul>\n<h3 id="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8">构造函数的调用<a class="anchor" href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8">§</a></h3>\n<ul>\n<li>\n<p>标准调用</p>\n<ul>\n<li>\n<p>var p = new Person();</p>\n</li>\n<li>\n<p>var p = new Person</p>\n<ul>\n<li>针对无参数的情况</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>错误调用</p>\n<ul>\n<li>\n<p>var p = Person();</p>\n<ul>\n<li>this会变</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8">实例方法的调用<a class="anchor" href="#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8">§</a></h3>\n<ul>\n<li>\n<p>p.run();</p>\n</li>\n<li>\n<p>var tmp = p.run;</p>\n<ul>\n<li>tmp();</li>\n<li>❌</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E6%80%BB%E7%BB%93">总结:<a class="anchor" href="#%E6%80%BB%E7%BB%93">§</a></h3>\n<ul>\n<li>\n<p>针对于函数内部的this</p>\n</li>\n<li>\n<p>如果这个函数当做一般函数来调用</p>\n<ul>\n<li>this则代表这个函数的调用者</li>\n</ul>\n</li>\n<li>\n<p>如果这个函数, 被当做构造函数来使用</p>\n<ul>\n<li>this, 代表构造出来的对象</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F">面向对象-访问函数原型对象的方式<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F">§</a></h2>\n<h3 id="1-%E9%80%9A%E8%BF%87--%E5%87%BD%E6%95%B0%E5%90%8Dprototype">1. 通过  函数名.prototype<a class="anchor" href="#1-%E9%80%9A%E8%BF%87--%E5%87%BD%E6%95%B0%E5%90%8Dprototype">§</a></h3>\n<h3 id="2-%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84__proto%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE">2. 通过对象中的__proto属性访问<a class="anchor" href="#2-%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84__proto%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE">§</a></h3>\n<h3 id="%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AF%B4%E6%98%8E">注意点说明<a class="anchor" href="#%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AF%B4%E6%98%8E">§</a></h3>\n<ul>\n<li>\n<pre><code>__proto__是一个非标准属性\n</code></pre>\n</li>\n<li>\n<pre><code>即ECMAScript中并不包含该属性,这只是某些浏览器为了方便开发人员开发和调试而提供的一个属性,不具备通用性\n</code></pre>\n</li>\n<li>\n<pre><code>建议:在调试的时候可以使用该属性,但不能出现在正式的代码中\n</code></pre>\n</li>\n</ul>\n<h2 id="hasownproperty%E5%92%8Cin%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C">hasOwnProperty和in属性操作<a class="anchor" href="#hasownproperty%E5%92%8Cin%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C">§</a></h2>\n<h3 id="in-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%A6%82%E6%9E%9C%E5%AF%B9%E8%B1%A1%E8%BA%AB%E4%B8%8A%E6%B2%A1%E6%9C%89-%E4%BC%9A%E5%88%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE">in 判断一个对象, 是否拥有某个属性(如果对象身上没有, 会到原型对象里面查找)<a class="anchor" href="#in-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%A6%82%E6%9E%9C%E5%AF%B9%E8%B1%A1%E8%BA%AB%E4%B8%8A%E6%B2%A1%E6%9C%89-%E4%BC%9A%E5%88%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE">§</a></h3>\n<h3 id="hasownproperty-%E5%8F%AA%E5%88%B0%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB%E6%9F%A5%E6%89%BE">hasOwnProperty: 只到对象自身查找<a class="anchor" href="#hasownproperty-%E5%8F%AA%E5%88%B0%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB%E6%9F%A5%E6%89%BE">§</a></h3>\n<h3 id="%E6%80%9D%E8%80%83">思考<a class="anchor" href="#%E6%80%9D%E8%80%83">§</a></h3>\n<ul>\n<li>怎样判断一个属性仅仅是原型对象属性</li>\n</ul>\n<h2 id="-isprototypeof%E5%92%8Cinstanceof">-isPrototypeOf和instanceOf<a class="anchor" href="#-isprototypeof%E5%92%8Cinstanceof">§</a></h2>\n<h3 id="isprototypeof-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1">isPrototypeOf: 判断一个对象, 是否是某个实例的原型对象<a class="anchor" href="#isprototypeof-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1">§</a></h3>\n<ul>\n<li>Person.prototype.isPrototypeOf(p)</li>\n</ul>\n<h3 id="instanceof--%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8A">instanceOf : 判断一个对象, 是否是某个构造函数的原型链上<a class="anchor" href="#instanceof--%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8A">§</a></h3>\n<h2 id="%E5%8E%9F%E5%9E%8B%E5%AE%8C%E5%96%84-constructor">原型完善-constructor<a class="anchor" href="#%E5%8E%9F%E5%9E%8B%E5%AE%8C%E5%96%84-constructor">§</a></h2>\n<h3 id="%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%B1%BB%E5%9E%8B">用于获取一个对象的真实类型<a class="anchor" href="#%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="es6%E4%B8%AD%E7%9A%84%E7%B1%BB">ES6中的类<a class="anchor" href="#es6%E4%B8%AD%E7%9A%84%E7%B1%BB">§</a></h4>\n<p>们通过get/set关键字来创建getter，通过括号和大括号来创建方法，数据型成员最好写在构造器里面。</p>\n<h2 id="%E6%8F%90%E9%97%AE">提问<a class="anchor" href="#%E6%8F%90%E9%97%AE">§</a></h2>\n<h3 id="%E7%94%BB%E5%87%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">画出构造函数, 实例, 原型对象之间的关系<a class="anchor" href="#%E7%94%BB%E5%87%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">§</a></h3>\n<h3 id="%E6%80%8E%E6%A0%B7%E7%BB%99%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">怎样给原型对象扩展属性和方法?<a class="anchor" href="#%E6%80%8E%E6%A0%B7%E7%BB%99%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>直接借助对象的动态特性</li>\n</ol>\n<ul>\n<li>拿到原型对象</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E7%A7%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95">函数的宿主可以有哪些?根据不同的宿主可以称为什么方法?<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E7%A7%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95">§</a></h3>\n<h3 id="%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB">对象分类<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB">§</a></h3>\n<ul>\n<li>\n<p>宿主对象（host  Objects）：由JavaScript宿主环境提供的对象，它们的行为完全由宿主环境决定。</p>\n</li>\n<li>\n<p>内置对象（Built-in  Objects）：由JavaScript语言提供的对象。</p>\n<ul>\n<li>固有对象（Intrinsic  Objects  ）：由标准规定，随着JavaScript运行时创建而自动创建的对象实例。</li>\n<li>原生对象（Native  Objects）：可以由用户通过Array、RegExp等内置构造器或者特殊语法创建的对 象。</li>\n<li>普通对象（Ordinary  Objects）：由{}语法、Object构造器或者class关键字定义类创建的对象，它能够 被原型继承。</li>\n</ul>\n</li>\n</ul>\n<h4 id="%E5%AE%BF%E4%B8%BB%E5%AF%B9%E8%B1%A1">宿主对象<a class="anchor" href="#%E5%AE%BF%E4%B8%BB%E5%AF%B9%E8%B1%A1">§</a></h4>\n<p>浏览器环境中的全局对象window，属性一部分雷子JavaScript，一部分来自浏览器环境。也分区固有和用户可创建两种。</p>\n<h4 id="%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1">内置对象<a class="anchor" href="#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1">§</a></h4>\n<h5 id="%E5%9B%BA%E6%9C%89%E5%AF%B9%E8%B1%A1">固有对象<a class="anchor" href="#%E5%9B%BA%E6%9C%89%E5%AF%B9%E8%B1%A1">§</a></h5>\n<p>固有对象是由标准规定，随着JavaScript运行时创建而自动创建的对象实例。固有对象在JS代码执行前就已经存在。</p>\n<h6 id="%E4%B8%89%E4%B8%AA%E5%80%BC">三个值<a class="anchor" href="#%E4%B8%89%E4%B8%AA%E5%80%BC">§</a></h6>\n<p>Infinity、NaN、undefined</p>\n<h6 id="%E4%B9%9D%E4%B8%AA%E5%87%BD%E6%95%B0"><strong>九个函数</strong><a class="anchor" href="#%E4%B9%9D%E4%B8%AA%E5%87%BD%E6%95%B0">§</a></h6>\n<p>eval\nisFinite\nisNaN\nparseFloat\nparseInt\ndecodeURI\ndecodeURIComponent\nencodeURI\nencodeURIComponen</p>\n<h6 id="%E6%9E%84%E9%80%A0%E5%99%A8"><strong>构造器</strong><a class="anchor" href="#%E6%9E%84%E9%80%A0%E5%99%A8">§</a></h6>\n<p>Array、Date、RegExp、Promise、Proxy、Map、WeakMap、Set、WeapSet、Function、Boolean、 String、Number、Symbol、Object、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError URIError、ArrayBuffer、SharedArrayBuffer、DataView、Typed  Array、Float32Array、Float64Array、 Int8Array、Int16Array、Int32Array、UInt8Array、UInt16Array、UInt32Array、UInt8ClampedArray</p>\n<h6 id="%E5%9B%9B%E4%B8%AA%E7%94%A8%E4%BA%8E%E5%BD%93%E4%BD%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%AF%B9%E8%B1%A1">四个用于当作命名空间的对象<a class="anchor" href="#%E5%9B%9B%E4%B8%AA%E7%94%A8%E4%BA%8E%E5%BD%93%E4%BD%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%AF%B9%E8%B1%A1">§</a></h6>\n<p>Atomics\nJSON\nMath\nReflect</p>\n<h5 id="%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1">原生对象<a class="anchor" href="#%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1">§</a></h5>\n<p>能够通过语言本身的构造器创建的对象称为原生对象，在JavaScript标准中，提供了30 多个构造器</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>基础功能和数据结构</th>\n<th>错误类型</th>\n<th>二进制操作</th>\n<th>带类型的数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Boolean</td>\n<td>Array</td>\n<td>Error</td>\n<td>ArrayBuffer</td>\n<td>Float32Array</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Date</td>\n<td>EvalError</td>\n<td>SharedArrayBuffer</td>\n<td>Float64Array</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>RegExp</td>\n<td>RangeError</td>\n<td>DataView</td>\n<td>Int8Array</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>Promise</td>\n<td>ReferenceError</td>\n<td></td>\n<td>Int16Array</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>Proxy</td>\n<td>SyntaxError</td>\n<td></td>\n<td>Int32Array</td>\n</tr>\n<tr>\n<td></td>\n<td>Map</td>\n<td>TypeError</td>\n<td></td>\n<td>UInt8Array</td>\n</tr>\n<tr>\n<td></td>\n<td>WeakMap</td>\n<td>URLError</td>\n<td></td>\n<td>UInt16Array</td>\n</tr>\n<tr>\n<td></td>\n<td>Set</td>\n<td></td>\n<td></td>\n<td>UInt32Array</td>\n</tr>\n<tr>\n<td></td>\n<td>WeakSet</td>\n<td></td>\n<td></td>\n<td>UInt8ClampedArray</td>\n</tr>\n<tr>\n<td></td>\n<td>Function</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<h5 id="%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%99%A8%E5%AF%B9%E8%B1%A1">函数对象和构造器对象<a class="anchor" href="#%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%99%A8%E5%AF%B9%E8%B1%A1">§</a></h5>\n<p>用对象来模拟函数和构造器</p>\n<p>函数对象的定义是：具有[[call]]私有字段的对象，构造器对象的定义是：具有私有字段[[construct]]的对 象。</p>\n<p>任何对象只需要实现[[call]]，它就是一个函数对象，可以去作为函数被调用。而如果它能 实现[[construct]]，它就是一个构造器对象，可以作为构造器被调用。</p>\n<blockquote>\n<p>[[call]]私有字段必须是一个引擎中定义的函数，需要接受this值和调用参数，并且会产生域的 切换</p>\n</blockquote>\n<p>对于宿主和内置对象来说，它们实现[[call]]（作为函数被调用）和[[construct]]（作为构造器被调用）不总 是一致的。比如内置对象  Date  在作为构造器调用时产生新的对象，作为函数时，则产生字符串。</p>\n<p>而浏览器宿主环境中，提供的Image构造器，则根本不允许被作为函数调用。</p>\n<p>基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p>\n<p>如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">new</span><span class="token punctuation">(</span> a <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> error\n</code></pre>\n<p>如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p>\n<p>对于用户使用  function  语法或者Function构造器创建的对象来说，[[call]]和[[construct]]行为总是相似的。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n  return <span class="token number">1</span>\n}\nvar v1 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nvar v2 <span class="token operator">=</span> new <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>构造器实例化，[[contruct]]的执行过程</p>\n<ol>\n<li>以Object.protope为原型创建一个对象</li>\n<li>以新对象为this，执行函数的[[call]]</li>\n<li>如果[[call]]的返回值是对象，那么返回这个对象，否则返回第一步的对象</li>\n</ol>\n<h4 id="%E7%89%B9%E6%AE%8A%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%AF%B9%E8%B1%A1">特殊行为的对象<a class="anchor" href="#%E7%89%B9%E6%AE%8A%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%AF%B9%E8%B1%A1">§</a></h4>\n<p>Array：Array的length属性根据最大的下标自动发生变化。\nObject.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。\nString：为了支持下标运算，String的正整数属性访问会去字符串里查找。\nArguments：arguments的非负整数型下标属性跟对应的变量联动。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#01-%E9%97%AD%E5%8C%85" }, "01-\u95ED\u5305"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85" }, "1. \u4EC0\u4E48\u662F\u95ED\u5305?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#2-%E4%BA%A7%E7%94%9F%E9%97%AD%E5%8C%85%E7%9A%84%E6%9D%A1%E4%BB%B6" }, "2. \u4EA7\u751F\u95ED\u5305\u7684\u6761\u4EF6?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#3-%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E5%BD%A2%E5%BC%8F" }, "3. \u5E38\u89C1\u7684\u95ED\u5305\u4F7F\u7528\u5F62\u5F0F?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E9%97%AD%E5%8C%85" }, "4. \u4E3A\u4EC0\u4E48\u8981\u7528\u95ED\u5305?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#5-%E9%97%AD%E5%8C%85%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" }, "5. \u95ED\u5305\u7684\u751F\u547D\u5468\u671F?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#6-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5" }, "6. \u95ED\u5305\u5E94\u7528-\u540C\u6B65\u548C\u5F02\u6B65")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#7-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8-%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F" }, "7. \u95ED\u5305\u5E94\u7528-\u5C01\u88C5\u5168\u5C40\u53D8\u91CF")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#8-%E9%97%AD%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8-%E5%AE%9A%E4%B9%89js%E6%A8%A1%E5%9D%97" }, "8. \u95ED\u5305\u7684\u5E94\u7528-\u5B9A\u4E49JS\u6A21\u5757")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#9-%E9%97%AD%E5%8C%85%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BA%86%E8%A7%A3" }, "9. \u95ED\u5305\u548C\u5185\u5B58\u7BA1\u7406(\u4E86\u89E3)")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" }, "\u9762\u5411\u5BF9\u8C61"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1-%E5%8E%9F%E5%9E%8B%E9%93%BE" }, "1. \u539F\u578B\u94FE")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8" }, "\u9762\u5411\u5BF9\u8C61-\u6784\u9020\u51FD\u6570\u4F7F\u7528"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95" }, "\u6784\u9020\u51FD\u6570\u8BBE\u7F6E\u5C5E\u6027\u548C\u65B9\u6CD5")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E8%8E%B7%E5%8F%96" }, "\u521B\u5EFA\u51FA\u6765\u7684\u5BF9\u8C61\u7C7B\u578B\u83B7\u53D6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E9%AA%8C%E8%AF%81" }, "\u521B\u5EFA\u51FA\u6765\u7684\u5BF9\u8C61\u7C7B\u578B\u9A8C\u8BC1")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8" }, "\u6784\u9020\u51FD\u6570\u7684\u8C03\u7528")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8" }, "\u5B9E\u4F8B\u65B9\u6CD5\u7684\u8C03\u7528")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%80%BB%E7%BB%93" }, "\u603B\u7ED3:")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F" }, "\u9762\u5411\u5BF9\u8C61-\u8BBF\u95EE\u51FD\u6570\u539F\u578B\u5BF9\u8C61\u7684\u65B9\u5F0F"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1-%E9%80%9A%E8%BF%87--%E5%87%BD%E6%95%B0%E5%90%8Dprototype" }, "1. \u901A\u8FC7  \u51FD\u6570\u540D.prototype")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#2-%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84__proto%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE" }, "2. \u901A\u8FC7\u5BF9\u8C61\u4E2D\u7684__proto\u5C5E\u6027\u8BBF\u95EE")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AF%B4%E6%98%8E" }, "\u6CE8\u610F\u70B9\u8BF4\u660E")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#hasownproperty%E5%92%8Cin%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C" }, "hasOwnProperty\u548Cin\u5C5E\u6027\u64CD\u4F5C"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#in-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%A6%82%E6%9E%9C%E5%AF%B9%E8%B1%A1%E8%BA%AB%E4%B8%8A%E6%B2%A1%E6%9C%89-%E4%BC%9A%E5%88%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE" }, "in \u5224\u65AD\u4E00\u4E2A\u5BF9\u8C61, \u662F\u5426\u62E5\u6709\u67D0\u4E2A\u5C5E\u6027(\u5982\u679C\u5BF9\u8C61\u8EAB\u4E0A\u6CA1\u6709, \u4F1A\u5230\u539F\u578B\u5BF9\u8C61\u91CC\u9762\u67E5\u627E)")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#hasownproperty-%E5%8F%AA%E5%88%B0%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB%E6%9F%A5%E6%89%BE" }, "hasOwnProperty: \u53EA\u5230\u5BF9\u8C61\u81EA\u8EAB\u67E5\u627E")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%80%9D%E8%80%83" }, "\u601D\u8003")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#-isprototypeof%E5%92%8Cinstanceof" }, "-isPrototypeOf\u548CinstanceOf"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#isprototypeof-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1" }, "isPrototypeOf: \u5224\u65AD\u4E00\u4E2A\u5BF9\u8C61, \u662F\u5426\u662F\u67D0\u4E2A\u5B9E\u4F8B\u7684\u539F\u578B\u5BF9\u8C61")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#instanceof--%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-%E6%98%AF%E5%90%A6%E6%98%AF%E6%9F%90%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8A" }, "instanceOf : \u5224\u65AD\u4E00\u4E2A\u5BF9\u8C61, \u662F\u5426\u662F\u67D0\u4E2A\u6784\u9020\u51FD\u6570\u7684\u539F\u578B\u94FE\u4E0A")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%8E%9F%E5%9E%8B%E5%AE%8C%E5%96%84-constructor" }, "\u539F\u578B\u5B8C\u5584-constructor"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%B1%BB%E5%9E%8B" }, "\u7528\u4E8E\u83B7\u53D6\u4E00\u4E2A\u5BF9\u8C61\u7684\u771F\u5B9E\u7C7B\u578B"),
                        React.createElement("ol", null)))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%8F%90%E9%97%AE" }, "\u63D0\u95EE"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%94%BB%E5%87%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB" }, "\u753B\u51FA\u6784\u9020\u51FD\u6570, \u5B9E\u4F8B, \u539F\u578B\u5BF9\u8C61\u4E4B\u95F4\u7684\u5173\u7CFB")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%80%8E%E6%A0%B7%E7%BB%99%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95" }, "\u600E\u6837\u7ED9\u539F\u578B\u5BF9\u8C61\u6269\u5C55\u5C5E\u6027\u548C\u65B9\u6CD5?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AE%BF%E4%B8%BB%E5%8F%AF%E4%BB%A5%E7%A7%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95" }, "\u51FD\u6570\u7684\u5BBF\u4E3B\u53EF\u4EE5\u6709\u54EA\u4E9B?\u6839\u636E\u4E0D\u540C\u7684\u5BBF\u4E3B\u53EF\u4EE5\u79F0\u4E3A\u4EC0\u4E48\u65B9\u6CD5?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB" }, "\u5BF9\u8C61\u5206\u7C7B"),
                        React.createElement("ol", null)))))),
    'author': "dingdtt",
    'contributors': [
        "dingdtt"
    ],
    'date': "2020-09-09T09:00:54.000Z",
    'updated': "2020-10-16T08:42:52.000Z",
    'excerpt': "01-闭包 1. 什么是闭包? - 闭包实际上是一种函数，所以闭包技术也是函数技术的一种；闭包能做的事情函数几乎都能做。 - 闭包技术花式比较多，用法也比较灵活，一般开发人员在学习闭包的时候都会遇到瓶颈，主要是因为闭包技术的...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
