import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "Vue开发技巧",
        "link": "vue/vue-skills.html"
    },
    'next': {
        "text": "Vue路由",
        "link": "vue/vue-router/vue-router.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'gh-pages' },
    'pagePath': "vue/vue-communication.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "vue/vue-communication.html",
    'title': "Vue组件通信",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Vue组件通信</h1>\n<h2 id="%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F">几种通信方式<a class="anchor" href="#%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F">§</a></h2>\n<h3 id="ref">$ref<a class="anchor" href="#ref">§</a></h3>\n<p>给元素或组件注册引用信息，使用时 this.$refs.refName，直接得到组件实例，可以调用组件的方法或访问数据。</p>\n<p>缺点：无法跨级和兄弟间通信</p>\n<h3 id="children"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">parent/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">/</span></span></span></span>children<a class="anchor" href="#children">§</a></h3>\n<p>基于当前上下文访问父组件或全部子组件</p>\n<p>缺点：无法跨级和兄弟间通信</p>\n<h3 id="emit"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>n</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">on/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord">/</span></span></span></span>emit<a class="anchor" href="#emit">§</a></h3>\n<p>emit在当前组件上触发自定义事件，$on在父组件上进行监听。（当前组件上也能监听的到）</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> child<span class="token punctuation">.</span>vue\nexport <span class="token keyword">default</span> {\n  methods<span class="token punctuation">:</span> {\n    handleEmitEvent <span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      this<span class="token punctuation">.</span>$<span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token string">\'来自子组件的数据\'</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n  }<span class="token punctuation">,</span>\n  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> {\n   <span class="token operator">/</span><span class="token operator">/</span> 监听自定义事件 test\n    this<span class="token punctuation">.</span>$<span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n      window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment">;</span>\n    }<span class="token punctuation">)</span><span class="token comment">;</span>\n   }\n}\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> parent<span class="token punctuation">.</span>vue\n<span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>child<span class="token operator">-</span>component <span class="token variable">@test</span><span class="token operator">=</span><span class="token string">"handleEvent"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n  export <span class="token keyword">default</span> {\n    methods<span class="token punctuation">:</span> {\n      handleEvent <span class="token punctuation">(</span>text<span class="token punctuation">)</span> {\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment">;  </span>\n      }\n    }\n  }\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h3 id="event-bus">event bus<a class="anchor" href="#event-bus">§</a></h3>\n<h3 id="provide--inject-%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8A%E7%BA%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81">provide / inject 主要用于子组件获取上级组件的状态<a class="anchor" href="#provide--inject-%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8A%E7%BA%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81">§</a></h3>\n<blockquote>\n<p>允许一个祖先组件向其所有后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的事件里始终生效。主要为高阶组件/组件库提供用例。</p>\n</blockquote>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// parent</span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  provide<span class="token operator">:</span><span class="token punctuation">{</span>\n    version<span class="token operator">:</span> <span class="token string">\'0.0.1\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// children</span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  inject<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'version\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">version</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>provide / inject绑定不是响应式的，但是如果传入的是一个可监听的对象，对象里的属性还是可响应式的。</p>\n<p>奇技淫巧</p>\n<p>在app.vue中provide，这样便可以在子组件中通过this.app 使用app.vue 里的属性和方法</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// App.vue</span>\n<span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n      app<span class="token operator">:</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p><strong>待记录 mixins</strong> 将不同的逻辑写到不同的js里</p>\n<p><strong>遍历寻找name</strong></p>\n<h3 id="dispatch-broadcast-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%B4%BE%E5%8F%91%E4%B8%8E%E5%B9%BF%E6%92%AD">dispatch broadcast 自定义实现派发与广播<a class="anchor" href="#dispatch-broadcast-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%B4%BE%E5%8F%91%E4%B8%8E%E5%B9%BF%E6%92%AD">§</a></h3>\n<p>解决父子组件（含跨级）间的通信问题</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">boardcast</span><span class="token punctuation">(</span><span class="token parameter">comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> comName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      child<span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      boardcast<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">[</span>comName<span class="token punctuation">,</span> eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>params<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$parent</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$root</span>\n            <span class="token keyword">let</span> name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n            <span class="token keyword control-flow">while</span><span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> name <span class="token operator">!==</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                parent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n                <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                parent<span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token parameter">comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            broadcast<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="findcomponents">findComponents<a class="anchor" href="#findcomponents">§</a></h3>\n<p>上下找最近目标，上下找全部目标，找某组件个的兄弟（要在父级的children里找）</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 向上找到指定的组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentUpward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> name <span class="token operator">!==</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    parent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n    name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> parent\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 向上找到所有同名的组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentsUpward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> parent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">===</span> comName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n       parents<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword control-flow">return</span> parents<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token function">findComponentsUpward</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n     <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 向下找到最近指定组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentDownward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> childrens <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$children</span>\n    <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>childrens<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> childrens<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> name <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>name <span class="token operator">===</span> comName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                children <span class="token operator">=</span> child\n                <span class="token keyword control-flow">break</span>\n            <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n                children <span class="token operator">=</span> <span class="token function">findComponentDownward</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> comName<span class="token punctuation">)</span>\n                <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token keyword control-flow">break</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> children\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 向下找到所有指定组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> childrens <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$children</span>\n    <span class="token keyword">let</span> namedChildrens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>childrens<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> childrens<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> name <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>name <span class="token operator">===</span> comName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                namedChildrens<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n                namedChildrens<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> namedChildrens\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> context<span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">components<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">===</span> comName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            components<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> foundChilds <span class="token operator">=</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> comName<span class="token punctuation">)</span>\n        <span class="token keyword control-flow">return</span> components<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>foundChilds<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 找到指定的兄弟组件</span>\n<span class="token keyword">function</span> <span class="token function">findBrothersComponents</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName<span class="token punctuation">,</span> exceptSelf <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$parent</span><span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> item<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> comName\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token method function property-access">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> item<span class="token punctuation">.</span><span class="token property-access">_uid</span> <span class="token operator">===</span> context<span class="token punctuation">.</span><span class="token property-access">_uid</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>exceptSelf<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        ref<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> res\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "Vue\u7EC4\u4EF6\u901A\u4FE1"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F">几种通信方式<a class="anchor" href="#%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F">§</a></h2>\n<h3 id="ref">$ref<a class="anchor" href="#ref">§</a></h3>\n<p>给元素或组件注册引用信息，使用时 this.$refs.refName，直接得到组件实例，可以调用组件的方法或访问数据。</p>\n<p>缺点：无法跨级和兄弟间通信</p>\n<h3 id="children"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">parent/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">/</span></span></span></span>children<a class="anchor" href="#children">§</a></h3>\n<p>基于当前上下文访问父组件或全部子组件</p>\n<p>缺点：无法跨级和兄弟间通信</p>\n<h3 id="emit"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>n</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">on/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord">/</span></span></span></span>emit<a class="anchor" href="#emit">§</a></h3>\n<p>emit在当前组件上触发自定义事件，$on在父组件上进行监听。（当前组件上也能监听的到）</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> child<span class="token punctuation">.</span>vue\nexport <span class="token keyword">default</span> {\n  methods<span class="token punctuation">:</span> {\n    handleEmitEvent <span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      this<span class="token punctuation">.</span>$<span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token string">\'来自子组件的数据\'</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n  }<span class="token punctuation">,</span>\n  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> {\n   <span class="token operator">/</span><span class="token operator">/</span> 监听自定义事件 test\n    this<span class="token punctuation">.</span>$<span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n      window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment">;</span>\n    }<span class="token punctuation">)</span><span class="token comment">;</span>\n   }\n}\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> parent<span class="token punctuation">.</span>vue\n<span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>child<span class="token operator">-</span>component <span class="token variable">@test</span><span class="token operator">=</span><span class="token string">"handleEvent"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n  export <span class="token keyword">default</span> {\n    methods<span class="token punctuation">:</span> {\n      handleEvent <span class="token punctuation">(</span>text<span class="token punctuation">)</span> {\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment">;  </span>\n      }\n    }\n  }\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h3 id="event-bus">event bus<a class="anchor" href="#event-bus">§</a></h3>\n<h3 id="provide--inject-%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8A%E7%BA%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81">provide / inject 主要用于子组件获取上级组件的状态<a class="anchor" href="#provide--inject-%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8A%E7%BA%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81">§</a></h3>\n<blockquote>\n<p>允许一个祖先组件向其所有后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的事件里始终生效。主要为高阶组件/组件库提供用例。</p>\n</blockquote>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// parent</span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  provide<span class="token operator">:</span><span class="token punctuation">{</span>\n    version<span class="token operator">:</span> <span class="token string">\'0.0.1\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// children</span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  inject<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'version\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">version</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>provide / inject绑定不是响应式的，但是如果传入的是一个可监听的对象，对象里的属性还是可响应式的。</p>\n<p>奇技淫巧</p>\n<p>在app.vue中provide，这样便可以在子组件中通过this.app 使用app.vue 里的属性和方法</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// App.vue</span>\n<span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n      app<span class="token operator">:</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p><strong>待记录 mixins</strong> 将不同的逻辑写到不同的js里</p>\n<p><strong>遍历寻找name</strong></p>\n<h3 id="dispatch-broadcast-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%B4%BE%E5%8F%91%E4%B8%8E%E5%B9%BF%E6%92%AD">dispatch broadcast 自定义实现派发与广播<a class="anchor" href="#dispatch-broadcast-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%B4%BE%E5%8F%91%E4%B8%8E%E5%B9%BF%E6%92%AD">§</a></h3>\n<p>解决父子组件（含跨级）间的通信问题</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">boardcast</span><span class="token punctuation">(</span><span class="token parameter">comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> comName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      child<span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      boardcast<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">[</span>comName<span class="token punctuation">,</span> eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>params<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$parent</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$root</span>\n            <span class="token keyword">let</span> name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n            <span class="token keyword control-flow">while</span><span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> name <span class="token operator">!==</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                parent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n                <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                parent<span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token parameter">comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            broadcast<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> comName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="findcomponents">findComponents<a class="anchor" href="#findcomponents">§</a></h3>\n<p>上下找最近目标，上下找全部目标，找某组件个的兄弟（要在父级的children里找）</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 向上找到指定的组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentUpward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> name <span class="token operator">!==</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    parent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n    name <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> parent\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 向上找到所有同名的组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentsUpward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> parent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$parent</span>\n <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">===</span> comName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n       parents<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword control-flow">return</span> parents<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token function">findComponentsUpward</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n     <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 向下找到最近指定组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentDownward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> childrens <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$children</span>\n    <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>childrens<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> childrens<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> name <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>name <span class="token operator">===</span> comName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                children <span class="token operator">=</span> child\n                <span class="token keyword control-flow">break</span>\n            <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n                children <span class="token operator">=</span> <span class="token function">findComponentDownward</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> comName<span class="token punctuation">)</span>\n                <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token keyword control-flow">break</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> children\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 向下找到所有指定组件</span>\n<span class="token keyword">function</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> childrens <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$children</span>\n    <span class="token keyword">let</span> namedChildrens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>childrens<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> childrens<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> name <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n            <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>name <span class="token operator">===</span> comName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                namedChildrens<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n                namedChildrens<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> comName<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> namedChildrens\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> context<span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">components<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">===</span> comName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            components<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> foundChilds <span class="token operator">=</span> <span class="token function">findComponentsDownward</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> comName<span class="token punctuation">)</span>\n        <span class="token keyword control-flow">return</span> components<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>foundChilds<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 找到指定的兄弟组件</span>\n<span class="token keyword">function</span> <span class="token function">findBrothersComponents</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> comName<span class="token punctuation">,</span> exceptSelf <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$parent</span><span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> item<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> comName\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token method function property-access">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> item<span class="token punctuation">.</span><span class="token property-access">_uid</span> <span class="token operator">===</span> context<span class="token punctuation">.</span><span class="token property-access">_uid</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>exceptSelf<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        ref<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> res\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F" }, "\u51E0\u79CD\u901A\u4FE1\u65B9\u5F0F"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#ref" }, "$ref")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#children" }, "children")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#emit" }, "emit")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#event-bus" }, "event bus")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#provide--inject-%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8A%E7%BA%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81" }, "provide / inject \u4E3B\u8981\u7528\u4E8E\u5B50\u7EC4\u4EF6\u83B7\u53D6\u4E0A\u7EA7\u7EC4\u4EF6\u7684\u72B6\u6001")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#dispatch-broadcast-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%B4%BE%E5%8F%91%E4%B8%8E%E5%B9%BF%E6%92%AD" }, "dispatch broadcast \u81EA\u5B9A\u4E49\u5B9E\u73B0\u6D3E\u53D1\u4E0E\u5E7F\u64AD")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#findcomponents" }, "findComponents")))))),
    'author': "dingdtt",
    'contributors': [
        "dingdtt",
        "dingtt"
    ],
    'date': "2020-07-27T10:04:19.000Z",
    'updated': "2020-10-16T08:42:52.000Z",
    'excerpt': "几种通信方式 $ref 给元素或组件注册引用信息，使用时 this.$refs.refName，直接得到组件实例，可以调用组件的方法或访问数据。 缺点：无法跨级和兄弟间通信 parent/parent/parent/children 基于当前上下文访问父组件或全部子组...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
