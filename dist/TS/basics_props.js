import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "link": "TS/index.html",
        "text": "TS"
    },
    'next': {
        "text": "TS枚举 类型 接口 泛型",
        "link": "TS/enum.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'gh-pages' },
    'pagePath': "TS/basics.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "TS/basics.html",
    'title': "TS基础",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>TS基础</h1>\n<h2 id="%E5%9F%BA%E7%A1%80">基础<a class="anchor" href="#%E5%9F%BA%E7%A1%80">§</a></h2>\n<p><a href="https://ts.xcatliu.com/basics/type-assertion.html">https://ts.xcatliu.com/basics/type-assertion.html</a></p>\n<h3 id="ts%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">TS的原始数据类型<a class="anchor" href="#ts%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>boolean、number、string、null、undefined、symbol 、void、bigint</p>\n<h4 id="number">number<a class="anchor" href="#number">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> decLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token keyword">const</span> hexLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">0xf00d</span>\n<span class="token keyword">const</span> binaryLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> 0b1010\n<span class="token keyword">const</span> octalLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> 0o744\n</code></pre>\n<h4 id="%E7%A9%BA%E5%80%BC-void">空值 void<a class="anchor" href="#%E7%A9%BA%E5%80%BC-void">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let unusable<span class="token punctuation">:</span> void <span class="token operator">=</span> undefined<span class="token comment">;</span>\n</code></pre>\n<h4 id="null-%E5%92%8C-undefined">Null 和 Undefined<a class="anchor" href="#null-%E5%92%8C-undefined">§</a></h4>\n<p><code>undefined</code> 和 <code>null</code> 是所有类型的子类型。 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token comment">// 这样不会报错</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token comment">// 这样也不会报错</span>\n<span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n</code></pre>\n<p><code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量</p>\n<p>开启 <code>--strictNullChecks</code> 检测，则null 和 undefined 只能赋值给 any 和它们各自(例外是 undefined 是也可以分配给void)。</p>\n<h4 id="symbol">Symbol<a class="anchor" href="#symbol">§</a></h4>\n<p>使用 <code>Symbol</code> 必须添加 <code>es6</code> 的编译辅助库</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">\'key1\'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">\'key1\'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token boolean">false</span>\n</code></pre>\n<h4 id="bigint">BigInt<a class="anchor" href="#bigint">§</a></h4>\n<p>使用 <code>BigInt</code> 的时候，必须添加 <code>ESNext</code> 的编译辅助库</p>\n<h3 id="typescript-%E4%B8%AD%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B">Typescript 中其他常见类型<a class="anchor" href="#typescript-%E4%B8%AD%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="%E4%BB%BB%E6%84%8F%E5%80%BCany">任意值any<a class="anchor" href="#%E4%BB%BB%E6%84%8F%E5%80%BCany">§</a></h4>\n<p><code>any</code> 类型，允许被赋值为任意类型。</p>\n<p>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</p>\n<h5 id="%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F">未声明类型的变量<a class="anchor" href="#%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F">§</a></h5>\n<p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。</p>\n<h4 id="void">void<a class="anchor" href="#void">§</a></h4>\n<p>void 类型像是与 any 类型相反，它表示没有任何类型。</p>\n<h4 id="unknow">unknow<a class="anchor" href="#unknow">§</a></h4>\n<p>当 <code>unknown</code> 类型被确定是某个类型之前,它不能被进行任何操作比如实例化、getter、函数执行等等。</p>\n<p>所有类型也都可以赋值给 unknown  。</p>\n<p>unknown 类型只能被赋值给 any 类型和 unknown 类型本身。直观地说：只有能够保\n存任意类型值的容器才能保存 unknown 类型的值。</p>\n<pre class="language-autoit"><code class="language-autoit">let value<span class="token punctuation">:</span> unknown<span class="token comment">;</span>\nlet value1<span class="token punctuation">:</span> unknown <span class="token operator">=</span> value<span class="token comment">; // OK</span>\nlet value2<span class="token punctuation">:</span> any <span class="token operator">=</span> value<span class="token comment">; // OK</span>\nlet value3<span class="token punctuation">:</span> boolean <span class="token operator">=</span> value<span class="token comment">; // Error</span>\nlet value4<span class="token punctuation">:</span> number <span class="token operator">=</span> value<span class="token comment">; // Error</span>\n</code></pre>\n<h4 id="never">never<a class="anchor" href="#never">§</a></h4>\n<p>never 类型表示的是那些永不存在的值的类型，never 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 never 的子类型或可以赋值给 never 类型（除了never本身之外）。即使是any也不可以赋值给never。</p>\n<pre class="language-ts"><code class="language-ts"><span class="token operator">/</span> 抛出异常的函数永远不会有返回值\n<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 空数组，而且永远是空的</span>\n<span class="token keyword">const</span> empty<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// 使⽤ never 避免出现新增了联合类型没有对应的实现</span>\n<span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">controlFlowAnalysisWithNever</span><span class="token punctuation">(</span>foo<span class="token operator">:</span> Foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// 这⾥ foo 被收窄为 string 类型</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// 这⾥ foo 被收窄为 number 类型</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n<span class="token comment">// foo 在这⾥是 never</span>\n<span class="token keyword">const</span> check<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// type Foo = string | number | boolean;</span>\n</code></pre>\n<h4 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h4>\n<h4 id="%E5%85%83%E7%BB%84">元组<a class="anchor" href="#%E5%85%83%E7%BB%84">§</a></h4>\n<p>表示一个已知元素数量和类型的数组，各元素的类型不必相同。但是各元素的类型，必须严格与事先声明的类型一致。元素数量不能多不能少，顺序也不能错乱。</p>\n<pre class="language-autoit"><code class="language-autoit">let x<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token comment">;</span>\nx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'hello\'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token comment">; // OK</span>\nx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">\'hello\'</span><span class="token punctuation">]</span><span class="token comment">; // Error</span>\n</code></pre>\n<p>元组越界问题</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">;</span>\ntuple<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">; // ok</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token comment">; // ["a", 1, 2] -> 正常打印出来</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">; // 访问新加入的元素时，会报错</span>\n</code></pre>\n<h4 id="object--object--">object  Object  {}<a class="anchor" href="#object--object--">§</a></h4>\n<p>普通对象、枚举、数组、元组通通都是 <code>object</code> 类型。</p>\n<p>object 类型是： TypeScript 2.2 引⼊的新类型，它⽤于表示⾮原始类型。</p>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n<p>Object 类型</p>\n<p>Object 类型：它是所有 Object 类的实例的类型，它由以下两个接⼝来定义：</p>\n<p>Object 接⼝定义了 Object.prototype 原型对象上的属性；</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> node_modules<span class="token operator">/</span>typescript<span class="token operator">/</span>lib<span class="token operator">/</span>lib<span class="token punctuation">.</span>es5<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts\ninterface Object {\nconstructor<span class="token punctuation">:</span> Function<span class="token comment">;</span>\n<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token comment">;</span>\n<span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token comment">;</span>\n<span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Object<span class="token comment">;</span>\n<span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> PropertyKey<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token comment">;</span>\n<span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token comment">;</span>\n<span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> PropertyKey<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token comment">;</span>\n}\n</code></pre>\n<p>ObjectConstructor 接⼝定义了 Object 类的属性。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> node_modules<span class="token operator">/</span>typescript<span class="token operator">/</span>lib<span class="token operator">/</span>lib<span class="token punctuation">.</span>es5<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts\ninterface ObjectConstructor {\n<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span> Invocation via `new` <span class="token operator">*</span><span class="token operator">/</span>\n<span class="token function">new</span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> Object<span class="token comment">;</span>\n<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span> Invocation via function calls <span class="token operator">*</span><span class="token operator">/</span>\n<span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any<span class="token comment">;</span>\nreadonly prototype<span class="token punctuation">:</span> Object<span class="token comment">;</span>\n<span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any<span class="token comment">;</span>\n<span class="token operator">/</span><span class="token operator">/</span> ···\n}\ndeclare var Object<span class="token punctuation">:</span> ObjectConstructor<span class="token comment">;</span>\n</code></pre>\n<p>Object 类的所有实例都继承了 Object 接⼝中的所有属性。</p>\n<h4 id="">{}<a class="anchor" href="#">§</a></h4>\n<p>{} 类型描述了⼀个没有成员的对象。  可以使⽤在 Object 类型上定义的所有属性和⽅法</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Type {}</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// Error: Property \'prop\' does not exist on type \'{}\'.</span>\nobj<span class="token punctuation">.</span><span class="token property-access">prop</span> <span class="token operator">=</span> <span class="token string">"semlinker"</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC">类型推导<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC">§</a></h3>\n<p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p>\n<p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查。</p>\n<h3 id="%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B">联合类型<a class="anchor" href="#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>联合类型（Union Types）表示取值可以为多种类型中的一种</p>\n<h4 id="%E8%AE%BF%E9%97%AE%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E6%96%B9%E6%B3%95">访问联合类型的属性或方法<a class="anchor" href="#%E8%AE%BF%E9%97%AE%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E6%96%B9%E6%B3%95">§</a></h4>\n<p>只能访问此联合类型的所有类型里共有的属性或方法。</p>\n<p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型。</p>\n<h3 id="%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3">对象的类型——接口<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3">§</a></h3>\n<p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p>\n<p>它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。</p>\n<p>除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</p>\n<p><strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong></p>\n<h4 id="%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7">可选属性<a class="anchor" href="#%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'Tom\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">25</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>仍然不允许添加未定义的属性</p>\n<h4 id="%E4%BB%BB%E6%84%8F%E5%B1%9E%E6%80%A7">任意属性<a class="anchor" href="#%E4%BB%BB%E6%84%8F%E5%B1%9E%E6%80%A7">§</a></h4>\n<p>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集。</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">// [propName: string]: string | number;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'Tom\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token comment">// 这里报错 ，可以修改为联合类型</span>\n    gender<span class="token operator">:</span> <span class="token string">\'male\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型。</p>\n<h4 id="%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7">只读属性<a class="anchor" href="#%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7">§</a></h4>\n<p>只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</p>\n<pre class="language-autoit"><code class="language-autoit">readonly \n</code></pre>\n<h4 id="%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B">函数类型<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n<h3 id="%E6%95%B0%E7%BB%84%E7%9A%84%E7%B1%BB%E5%9E%8B">数组的类型<a class="anchor" href="#%E6%95%B0%E7%BB%84%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%B3%95">类型+方括号表示法<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%B3%95">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nfibonacci<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Argument of type \'"8"\' is not assignable to parameter of type \'number\'.</span>\n</code></pre>\n<h4 id="%E6%95%B0%E7%BB%84%E6%B3%9B%E5%9E%8B">数组泛型<a class="anchor" href="#%E6%95%B0%E7%BB%84%E6%B3%9B%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let fibonacci<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%A1%A8%E7%A4%BA%E6%95%B0%E7%BB%84">用接口表示数组<a class="anchor" href="#%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%A1%A8%E7%A4%BA%E6%95%B0%E7%BB%84">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// NumberArray 表示：只要索引的类型是数字时，那么值的类型必须是数字。</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> fibonacci<span class="token operator">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E7%B1%BB%E6%95%B0%E7%BB%84">类数组<a class="anchor" href="#%E7%B1%BB%E6%95%B0%E7%BB%84">§</a></h4>\n<p>类数组，不能用普通的数组的方式来描述，而应该用接口</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n        length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n        callee<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>常用的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    let args<span class="token punctuation">:</span> IArguments <span class="token operator">=</span> arguments<span class="token comment">;</span>\n}\n</code></pre>\n<h4 id="any-%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">any 在数组中的应用<a class="anchor" href="#any-%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let list<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'xcatliu\'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> { website<span class="token punctuation">:</span> <span class="token string">\'<a class="token url-link" href="http://xcatliu.com">http://xcatliu.com</a>\'</span> }<span class="token punctuation">]</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B">函数的类型<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">函数声明<a class="anchor" href="#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number {\n    return x <span class="token operator">+</span> y<span class="token comment">;</span>\n}\n</code></pre>\n<h4 id="%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">函数表达式<a class="anchor" href="#%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let mySum<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number <span class="token operator">=</span> function <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number {\n    return x <span class="token operator">+</span> y<span class="token comment">;</span>\n}<span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E7%8A%B6">用接口定义函数的形状<a class="anchor" href="#%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E7%8A%B6">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span>\n<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0">可选参数<a class="anchor" href="#%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0">§</a></h4>\n<p>可选参数后面不允许再出现必需参数</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">,</span> <span class="token string">\'Cat\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC">参数默认值<a class="anchor" href="#%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC">§</a></h4>\n<p>TypeScript 会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">\'Cat\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">,</span> <span class="token string">\'Cat\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0">剩余参数<a class="anchor" href="#%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>items<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E9%87%8D%E8%BD%BD">重载<a class="anchor" href="#%E9%87%8D%E8%BD%BD">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80">类型断言<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80">§</a></h3>\n<p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p>\n<p><code>值 as 类型</code> 或 <code>&lt;类型&gt;值</code>， tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者</p>\n<h4 id="%E5%B0%86%E4%B8%80%E4%B8%AA%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B">将一个联合类型断言为其中一个类型<a class="anchor" href="#%E5%B0%86%E4%B8%80%E4%B8%AA%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">swim</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'Tom\'</span><span class="token punctuation">,</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'run\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">swim</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Uncaught TypeError: animal.swim is not a function`</span>\n</code></pre>\n<p>使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。</p>\n<h4 id="%E5%B0%86%E4%B8%80%E4%B8%AA%E7%88%B6%E7%B1%BB%E6%96%AD%E8%A8%80%E4%B8%BA%E6%9B%B4%E5%8A%A0%E5%85%B7%E4%BD%93%E7%9A%84%E5%AD%90%E7%B1%BB">将一个父类断言为更加具体的子类<a class="anchor" href="#%E5%B0%86%E4%B8%80%E4%B8%AA%E7%88%B6%E7%B1%BB%E6%96%AD%E8%A8%80%E4%B8%BA%E6%9B%B4%E5%8A%A0%E5%85%B7%E4%BD%93%E7%9A%84%E5%AD%90%E7%B1%BB">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>\n    code<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>\n    statusCode<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>error <span class="token keyword">as</span> ApiError<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n     <span class="token comment">//if (error instanceof ApiError) {</span>\n     <span class="token comment">//   return true;</span>\n     <span class="token comment">//}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>当<code>ApiError</code> 和 <code>HttpError</code> 不是一个真正的类，而只是一个 TypeScript 的接口（<code>interface</code>），接口是一个类型，此时就只能用类型断言。</p>\n<h4 id="%E5%B0%86%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA-any">将任何一个类型断言为 <code>any</code><a class="anchor" href="#%E5%B0%86%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA-any">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token punctuation">(</span>window as any<span class="token punctuation">)</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">;</span>\n</code></pre>\n<p>有可能掩盖了真正的类型错误，所以如果不是非常确定，就不要使用 <code>as any</code>。</p>\n<h4 id="%E5%B0%86-any-%E6%96%AD%E8%A8%80%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B">将 <code>any</code> 断言为一个具体的类型<a class="anchor" href="#%E5%B0%86-any-%E6%96%AD%E8%A8%80%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">\'tom\'</span><span class="token punctuation">)</span> as Cat<span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E9%99%90%E5%88%B6">类型断言的限制<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E9%99%90%E5%88%B6">§</a></h4>\n<ul>\n<li>联合类型可以被断言为其中一个类型</li>\n<li>父类可以被断言为子类</li>\n<li>任何类型都可以被断言为 any</li>\n<li>any 可以被断言为任何类型</li>\n<li>要使得 <code>A</code> 能够被断言为 <code>B</code>，只需要 <code>A</code> 兼容 <code>B</code> 或 <code>B</code> 兼容 <code>A</code> 即可\n<ul>\n<li>允许 <code>animal as Cat</code> 是因为「父类可以被断言为子类」，这个前面已经学习过了</li>\n<li>允许 <code>cat as Animal</code> 是因为既然子类拥有父类的属性和方法，那么被断言为父类，获取父类的属性、调用父类的方法，就不会有任何问题，故「子类可以被断言为父类」</li>\n</ul>\n</li>\n</ul>\n<h4 id="%E5%8F%8C%E9%87%8D%E6%96%AD%E8%A8%80">双重断言<a class="anchor" href="#%E5%8F%8C%E9%87%8D%E6%96%AD%E8%A8%80">§</a></h4>\n<p>双重断言 <code>as any as Foo</code>，可能会导致运行时错误。</p>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">类型断言 vs 类型转换<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">§</a></h4>\n<p>类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除。</p>\n<p>所以类型断言不是类型转换，它不会真的影响到变量的类型。</p>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E">类型断言 vs 类型声明<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> animal<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'tom\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tom <span class="token operator">=</span> animal <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>\n\n<span class="token comment">// let tom: Cat = animal;</span>\n\n<span class="token comment">// index.ts:12:5 - error TS2741: Property \'run\' is missing in type \'Animal\' but required in type \'Cat\'.</span>\n</code></pre>\n<ul>\n<li><code>animal</code> 断言为 <code>Cat</code>，只需要满足 <code>Animal</code> 兼容 <code>Cat</code> 或 <code>Cat</code> 兼容 <code>Animal</code> 即可</li>\n<li><code>animal</code> 赋值给 <code>tom</code>，需要满足 <code>Cat</code> 兼容 <code>Animal</code> 才行，但是 <code>Cat</code> 并不兼容 <code>Animal</code>。</li>\n</ul>\n<p>类型声明是比类型断言更加严格。不能通过声明，直接把父类声明为子类。<strong>只能子类声明为父类。</strong></p>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E6%B3%9B%E5%9E%8B">类型断言 vs 泛型<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E6%B3%9B%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">function getCacheData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> T {\n    return <span class="token punctuation">(</span>window as any<span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">;</span>\n}\n\ninterface Cat {\n    name<span class="token punctuation">:</span> string<span class="token comment">;</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token comment">;</span>\n}\n\n<span class="token keyword">const</span> tom <span class="token operator">=</span> getCacheData<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'tom\'</span><span class="token punctuation">)</span><span class="token comment">;</span>\ntom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">声明文件<a class="anchor" href="#%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">§</a></h3>\n<h4 id="%E6%96%B0%E8%AF%AD%E6%B3%95%E7%B4%A2%E5%BC%95">新语法索引<a class="anchor" href="#%E6%96%B0%E8%AF%AD%E6%B3%95%E7%B4%A2%E5%BC%95">§</a></h4>\n<h4 id="%E4%BB%80%E4%B9%88%E6%98%AF%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">什么是声明文件<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">§</a></h4>\n<p>通常我们会把声明语句放到一个单独的文件（<code>jQuery.d.ts</code>）中，声明文件必需以 <code>.d.ts</code> 为后缀。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> src<span class="token operator">/</span>jQuery<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts\n\ndeclare var jQuery<span class="token punctuation">:</span> <span class="token punctuation">(</span>selector<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> any<span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">第三方声明文件<a class="anchor" href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">§</a></h4>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "TS\u57FA\u7840"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E5%9F%BA%E7%A1%80">基础<a class="anchor" href="#%E5%9F%BA%E7%A1%80">§</a></h2>\n<p><a href="https://ts.xcatliu.com/basics/type-assertion.html">https://ts.xcatliu.com/basics/type-assertion.html</a></p>\n<h3 id="ts%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">TS的原始数据类型<a class="anchor" href="#ts%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>boolean、number、string、null、undefined、symbol 、void、bigint</p>\n<h4 id="number">number<a class="anchor" href="#number">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> decLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token keyword">const</span> hexLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">0xf00d</span>\n<span class="token keyword">const</span> binaryLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> 0b1010\n<span class="token keyword">const</span> octalLiteral<span class="token punctuation">:</span> number <span class="token operator">=</span> 0o744\n</code></pre>\n<h4 id="%E7%A9%BA%E5%80%BC-void">空值 void<a class="anchor" href="#%E7%A9%BA%E5%80%BC-void">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let unusable<span class="token punctuation">:</span> void <span class="token operator">=</span> undefined<span class="token comment">;</span>\n</code></pre>\n<h4 id="null-%E5%92%8C-undefined">Null 和 Undefined<a class="anchor" href="#null-%E5%92%8C-undefined">§</a></h4>\n<p><code>undefined</code> 和 <code>null</code> 是所有类型的子类型。 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token comment">// 这样不会报错</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token comment">// 这样也不会报错</span>\n<span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n</code></pre>\n<p><code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量</p>\n<p>开启 <code>--strictNullChecks</code> 检测，则null 和 undefined 只能赋值给 any 和它们各自(例外是 undefined 是也可以分配给void)。</p>\n<h4 id="symbol">Symbol<a class="anchor" href="#symbol">§</a></h4>\n<p>使用 <code>Symbol</code> 必须添加 <code>es6</code> 的编译辅助库</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">\'key1\'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">\'key1\'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token boolean">false</span>\n</code></pre>\n<h4 id="bigint">BigInt<a class="anchor" href="#bigint">§</a></h4>\n<p>使用 <code>BigInt</code> 的时候，必须添加 <code>ESNext</code> 的编译辅助库</p>\n<h3 id="typescript-%E4%B8%AD%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B">Typescript 中其他常见类型<a class="anchor" href="#typescript-%E4%B8%AD%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="%E4%BB%BB%E6%84%8F%E5%80%BCany">任意值any<a class="anchor" href="#%E4%BB%BB%E6%84%8F%E5%80%BCany">§</a></h4>\n<p><code>any</code> 类型，允许被赋值为任意类型。</p>\n<p>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</p>\n<h5 id="%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F">未声明类型的变量<a class="anchor" href="#%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F">§</a></h5>\n<p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。</p>\n<h4 id="void">void<a class="anchor" href="#void">§</a></h4>\n<p>void 类型像是与 any 类型相反，它表示没有任何类型。</p>\n<h4 id="unknow">unknow<a class="anchor" href="#unknow">§</a></h4>\n<p>当 <code>unknown</code> 类型被确定是某个类型之前,它不能被进行任何操作比如实例化、getter、函数执行等等。</p>\n<p>所有类型也都可以赋值给 unknown  。</p>\n<p>unknown 类型只能被赋值给 any 类型和 unknown 类型本身。直观地说：只有能够保\n存任意类型值的容器才能保存 unknown 类型的值。</p>\n<pre class="language-autoit"><code class="language-autoit">let value<span class="token punctuation">:</span> unknown<span class="token comment">;</span>\nlet value1<span class="token punctuation">:</span> unknown <span class="token operator">=</span> value<span class="token comment">; // OK</span>\nlet value2<span class="token punctuation">:</span> any <span class="token operator">=</span> value<span class="token comment">; // OK</span>\nlet value3<span class="token punctuation">:</span> boolean <span class="token operator">=</span> value<span class="token comment">; // Error</span>\nlet value4<span class="token punctuation">:</span> number <span class="token operator">=</span> value<span class="token comment">; // Error</span>\n</code></pre>\n<h4 id="never">never<a class="anchor" href="#never">§</a></h4>\n<p>never 类型表示的是那些永不存在的值的类型，never 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 never 的子类型或可以赋值给 never 类型（除了never本身之外）。即使是any也不可以赋值给never。</p>\n<pre class="language-ts"><code class="language-ts"><span class="token operator">/</span> 抛出异常的函数永远不会有返回值\n<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 空数组，而且永远是空的</span>\n<span class="token keyword">const</span> empty<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// 使⽤ never 避免出现新增了联合类型没有对应的实现</span>\n<span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">controlFlowAnalysisWithNever</span><span class="token punctuation">(</span>foo<span class="token operator">:</span> Foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// 这⾥ foo 被收窄为 string 类型</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// 这⾥ foo 被收窄为 number 类型</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n<span class="token comment">// foo 在这⾥是 never</span>\n<span class="token keyword">const</span> check<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// type Foo = string | number | boolean;</span>\n</code></pre>\n<h4 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h4>\n<h4 id="%E5%85%83%E7%BB%84">元组<a class="anchor" href="#%E5%85%83%E7%BB%84">§</a></h4>\n<p>表示一个已知元素数量和类型的数组，各元素的类型不必相同。但是各元素的类型，必须严格与事先声明的类型一致。元素数量不能多不能少，顺序也不能错乱。</p>\n<pre class="language-autoit"><code class="language-autoit">let x<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token comment">;</span>\nx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'hello\'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token comment">; // OK</span>\nx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">\'hello\'</span><span class="token punctuation">]</span><span class="token comment">; // Error</span>\n</code></pre>\n<p>元组越界问题</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">;</span>\ntuple<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">; // ok</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token comment">; // ["a", 1, 2] -> 正常打印出来</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">; // 访问新加入的元素时，会报错</span>\n</code></pre>\n<h4 id="object--object--">object  Object  {}<a class="anchor" href="#object--object--">§</a></h4>\n<p>普通对象、枚举、数组、元组通通都是 <code>object</code> 类型。</p>\n<p>object 类型是： TypeScript 2.2 引⼊的新类型，它⽤于表示⾮原始类型。</p>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n<p>Object 类型</p>\n<p>Object 类型：它是所有 Object 类的实例的类型，它由以下两个接⼝来定义：</p>\n<p>Object 接⼝定义了 Object.prototype 原型对象上的属性；</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> node_modules<span class="token operator">/</span>typescript<span class="token operator">/</span>lib<span class="token operator">/</span>lib<span class="token punctuation">.</span>es5<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts\ninterface Object {\nconstructor<span class="token punctuation">:</span> Function<span class="token comment">;</span>\n<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token comment">;</span>\n<span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token comment">;</span>\n<span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Object<span class="token comment">;</span>\n<span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> PropertyKey<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token comment">;</span>\n<span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token comment">;</span>\n<span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> PropertyKey<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token comment">;</span>\n}\n</code></pre>\n<p>ObjectConstructor 接⼝定义了 Object 类的属性。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> node_modules<span class="token operator">/</span>typescript<span class="token operator">/</span>lib<span class="token operator">/</span>lib<span class="token punctuation">.</span>es5<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts\ninterface ObjectConstructor {\n<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span> Invocation via `new` <span class="token operator">*</span><span class="token operator">/</span>\n<span class="token function">new</span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> Object<span class="token comment">;</span>\n<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span> Invocation via function calls <span class="token operator">*</span><span class="token operator">/</span>\n<span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any<span class="token comment">;</span>\nreadonly prototype<span class="token punctuation">:</span> Object<span class="token comment">;</span>\n<span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any<span class="token comment">;</span>\n<span class="token operator">/</span><span class="token operator">/</span> ···\n}\ndeclare var Object<span class="token punctuation">:</span> ObjectConstructor<span class="token comment">;</span>\n</code></pre>\n<p>Object 类的所有实例都继承了 Object 接⼝中的所有属性。</p>\n<h4 id="">{}<a class="anchor" href="#">§</a></h4>\n<p>{} 类型描述了⼀个没有成员的对象。  可以使⽤在 Object 类型上定义的所有属性和⽅法</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Type {}</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// Error: Property \'prop\' does not exist on type \'{}\'.</span>\nobj<span class="token punctuation">.</span><span class="token property-access">prop</span> <span class="token operator">=</span> <span class="token string">"semlinker"</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC">类型推导<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC">§</a></h3>\n<p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p>\n<p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查。</p>\n<h3 id="%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B">联合类型<a class="anchor" href="#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>联合类型（Union Types）表示取值可以为多种类型中的一种</p>\n<h4 id="%E8%AE%BF%E9%97%AE%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E6%96%B9%E6%B3%95">访问联合类型的属性或方法<a class="anchor" href="#%E8%AE%BF%E9%97%AE%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E6%96%B9%E6%B3%95">§</a></h4>\n<p>只能访问此联合类型的所有类型里共有的属性或方法。</p>\n<p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型。</p>\n<h3 id="%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3">对象的类型——接口<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3">§</a></h3>\n<p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p>\n<p>它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。</p>\n<p>除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</p>\n<p><strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong></p>\n<h4 id="%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7">可选属性<a class="anchor" href="#%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'Tom\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">25</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>仍然不允许添加未定义的属性</p>\n<h4 id="%E4%BB%BB%E6%84%8F%E5%B1%9E%E6%80%A7">任意属性<a class="anchor" href="#%E4%BB%BB%E6%84%8F%E5%B1%9E%E6%80%A7">§</a></h4>\n<p>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集。</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">// [propName: string]: string | number;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'Tom\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token comment">// 这里报错 ，可以修改为联合类型</span>\n    gender<span class="token operator">:</span> <span class="token string">\'male\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型。</p>\n<h4 id="%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7">只读属性<a class="anchor" href="#%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7">§</a></h4>\n<p>只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</p>\n<pre class="language-autoit"><code class="language-autoit">readonly \n</code></pre>\n<h4 id="%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B">函数类型<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">\n</code></pre>\n<h3 id="%E6%95%B0%E7%BB%84%E7%9A%84%E7%B1%BB%E5%9E%8B">数组的类型<a class="anchor" href="#%E6%95%B0%E7%BB%84%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%B3%95">类型+方括号表示法<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%B3%95">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nfibonacci<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Argument of type \'"8"\' is not assignable to parameter of type \'number\'.</span>\n</code></pre>\n<h4 id="%E6%95%B0%E7%BB%84%E6%B3%9B%E5%9E%8B">数组泛型<a class="anchor" href="#%E6%95%B0%E7%BB%84%E6%B3%9B%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let fibonacci<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%A1%A8%E7%A4%BA%E6%95%B0%E7%BB%84">用接口表示数组<a class="anchor" href="#%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%A1%A8%E7%A4%BA%E6%95%B0%E7%BB%84">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// NumberArray 表示：只要索引的类型是数字时，那么值的类型必须是数字。</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> fibonacci<span class="token operator">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E7%B1%BB%E6%95%B0%E7%BB%84">类数组<a class="anchor" href="#%E7%B1%BB%E6%95%B0%E7%BB%84">§</a></h4>\n<p>类数组，不能用普通的数组的方式来描述，而应该用接口</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n        length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n        callee<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>常用的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    let args<span class="token punctuation">:</span> IArguments <span class="token operator">=</span> arguments<span class="token comment">;</span>\n}\n</code></pre>\n<h4 id="any-%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">any 在数组中的应用<a class="anchor" href="#any-%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let list<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'xcatliu\'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> { website<span class="token punctuation">:</span> <span class="token string">\'<a class="token url-link" href="http://xcatliu.com">http://xcatliu.com</a>\'</span> }<span class="token punctuation">]</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B">函数的类型<a class="anchor" href="#%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h3>\n<h4 id="%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">函数声明<a class="anchor" href="#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number {\n    return x <span class="token operator">+</span> y<span class="token comment">;</span>\n}\n</code></pre>\n<h4 id="%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">函数表达式<a class="anchor" href="#%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">let mySum<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number <span class="token operator">=</span> function <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number {\n    return x <span class="token operator">+</span> y<span class="token comment">;</span>\n}<span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E7%8A%B6">用接口定义函数的形状<a class="anchor" href="#%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E7%8A%B6">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span>\n<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0">可选参数<a class="anchor" href="#%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0">§</a></h4>\n<p>可选参数后面不允许再出现必需参数</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">,</span> <span class="token string">\'Cat\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC">参数默认值<a class="anchor" href="#%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC">§</a></h4>\n<p>TypeScript 会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">\'Cat\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">,</span> <span class="token string">\'Cat\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">\'Tom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0">剩余参数<a class="anchor" href="#%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>items<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E9%87%8D%E8%BD%BD">重载<a class="anchor" href="#%E9%87%8D%E8%BD%BD">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80">类型断言<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80">§</a></h3>\n<p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p>\n<p><code>值 as 类型</code> 或 <code>&lt;类型&gt;值</code>， tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者</p>\n<h4 id="%E5%B0%86%E4%B8%80%E4%B8%AA%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B">将一个联合类型断言为其中一个类型<a class="anchor" href="#%E5%B0%86%E4%B8%80%E4%B8%AA%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">swim</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'Tom\'</span><span class="token punctuation">,</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'run\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">swim</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Uncaught TypeError: animal.swim is not a function`</span>\n</code></pre>\n<p>使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。</p>\n<h4 id="%E5%B0%86%E4%B8%80%E4%B8%AA%E7%88%B6%E7%B1%BB%E6%96%AD%E8%A8%80%E4%B8%BA%E6%9B%B4%E5%8A%A0%E5%85%B7%E4%BD%93%E7%9A%84%E5%AD%90%E7%B1%BB">将一个父类断言为更加具体的子类<a class="anchor" href="#%E5%B0%86%E4%B8%80%E4%B8%AA%E7%88%B6%E7%B1%BB%E6%96%AD%E8%A8%80%E4%B8%BA%E6%9B%B4%E5%8A%A0%E5%85%B7%E4%BD%93%E7%9A%84%E5%AD%90%E7%B1%BB">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>\n    code<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>\n    statusCode<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>error <span class="token keyword">as</span> ApiError<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n     <span class="token comment">//if (error instanceof ApiError) {</span>\n     <span class="token comment">//   return true;</span>\n     <span class="token comment">//}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>当<code>ApiError</code> 和 <code>HttpError</code> 不是一个真正的类，而只是一个 TypeScript 的接口（<code>interface</code>），接口是一个类型，此时就只能用类型断言。</p>\n<h4 id="%E5%B0%86%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA-any">将任何一个类型断言为 <code>any</code><a class="anchor" href="#%E5%B0%86%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E4%B8%BA-any">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token punctuation">(</span>window as any<span class="token punctuation">)</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">;</span>\n</code></pre>\n<p>有可能掩盖了真正的类型错误，所以如果不是非常确定，就不要使用 <code>as any</code>。</p>\n<h4 id="%E5%B0%86-any-%E6%96%AD%E8%A8%80%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B">将 <code>any</code> 断言为一个具体的类型<a class="anchor" href="#%E5%B0%86-any-%E6%96%AD%E8%A8%80%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">\'tom\'</span><span class="token punctuation">)</span> as Cat<span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E9%99%90%E5%88%B6">类型断言的限制<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E9%99%90%E5%88%B6">§</a></h4>\n<ul>\n<li>联合类型可以被断言为其中一个类型</li>\n<li>父类可以被断言为子类</li>\n<li>任何类型都可以被断言为 any</li>\n<li>any 可以被断言为任何类型</li>\n<li>要使得 <code>A</code> 能够被断言为 <code>B</code>，只需要 <code>A</code> 兼容 <code>B</code> 或 <code>B</code> 兼容 <code>A</code> 即可\n<ul>\n<li>允许 <code>animal as Cat</code> 是因为「父类可以被断言为子类」，这个前面已经学习过了</li>\n<li>允许 <code>cat as Animal</code> 是因为既然子类拥有父类的属性和方法，那么被断言为父类，获取父类的属性、调用父类的方法，就不会有任何问题，故「子类可以被断言为父类」</li>\n</ul>\n</li>\n</ul>\n<h4 id="%E5%8F%8C%E9%87%8D%E6%96%AD%E8%A8%80">双重断言<a class="anchor" href="#%E5%8F%8C%E9%87%8D%E6%96%AD%E8%A8%80">§</a></h4>\n<p>双重断言 <code>as any as Foo</code>，可能会导致运行时错误。</p>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">类型断言 vs 类型转换<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">§</a></h4>\n<p>类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除。</p>\n<p>所以类型断言不是类型转换，它不会真的影响到变量的类型。</p>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E">类型断言 vs 类型声明<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E">§</a></h4>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> animal<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'tom\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tom <span class="token operator">=</span> animal <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>\n\n<span class="token comment">// let tom: Cat = animal;</span>\n\n<span class="token comment">// index.ts:12:5 - error TS2741: Property \'run\' is missing in type \'Animal\' but required in type \'Cat\'.</span>\n</code></pre>\n<ul>\n<li><code>animal</code> 断言为 <code>Cat</code>，只需要满足 <code>Animal</code> 兼容 <code>Cat</code> 或 <code>Cat</code> 兼容 <code>Animal</code> 即可</li>\n<li><code>animal</code> 赋值给 <code>tom</code>，需要满足 <code>Cat</code> 兼容 <code>Animal</code> 才行，但是 <code>Cat</code> 并不兼容 <code>Animal</code>。</li>\n</ul>\n<p>类型声明是比类型断言更加严格。不能通过声明，直接把父类声明为子类。<strong>只能子类声明为父类。</strong></p>\n<h4 id="%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E6%B3%9B%E5%9E%8B">类型断言 vs 泛型<a class="anchor" href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-vs-%E6%B3%9B%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">function getCacheData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> T {\n    return <span class="token punctuation">(</span>window as any<span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">;</span>\n}\n\ninterface Cat {\n    name<span class="token punctuation">:</span> string<span class="token comment">;</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token comment">;</span>\n}\n\n<span class="token keyword">const</span> tom <span class="token operator">=</span> getCacheData<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'tom\'</span><span class="token punctuation">)</span><span class="token comment">;</span>\ntom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">声明文件<a class="anchor" href="#%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">§</a></h3>\n<h4 id="%E6%96%B0%E8%AF%AD%E6%B3%95%E7%B4%A2%E5%BC%95">新语法索引<a class="anchor" href="#%E6%96%B0%E8%AF%AD%E6%B3%95%E7%B4%A2%E5%BC%95">§</a></h4>\n<h4 id="%E4%BB%80%E4%B9%88%E6%98%AF%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">什么是声明文件<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">§</a></h4>\n<p>通常我们会把声明语句放到一个单独的文件（<code>jQuery.d.ts</code>）中，声明文件必需以 <code>.d.ts</code> 为后缀。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> src<span class="token operator">/</span>jQuery<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts\n\ndeclare var jQuery<span class="token punctuation">:</span> <span class="token punctuation">(</span>selector<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> any<span class="token comment">;</span>\n</code></pre>\n<h4 id="%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">第三方声明文件<a class="anchor" href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">§</a></h4>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%9F%BA%E7%A1%80" }, "\u57FA\u7840"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#ts%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" }, "TS\u7684\u539F\u59CB\u6570\u636E\u7C7B\u578B"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#typescript-%E4%B8%AD%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B" }, "Typescript \u4E2D\u5176\u4ED6\u5E38\u89C1\u7C7B\u578B"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC" }, "\u7C7B\u578B\u63A8\u5BFC")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B" }, "\u8054\u5408\u7C7B\u578B"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3" }, "\u5BF9\u8C61\u7684\u7C7B\u578B\u2014\u2014\u63A5\u53E3"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%95%B0%E7%BB%84%E7%9A%84%E7%B1%BB%E5%9E%8B" }, "\u6570\u7EC4\u7684\u7C7B\u578B"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B" }, "\u51FD\u6570\u7684\u7C7B\u578B"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80" }, "\u7C7B\u578B\u65AD\u8A00"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6" }, "\u58F0\u660E\u6587\u4EF6"),
                        React.createElement("ol", null)))))),
    'author': "dingdtt",
    'contributors': [
        "dingdtt",
        "dingtt"
    ],
    'date': "2020-07-31T11:30:14.000Z",
    'updated': "2020-11-01T13:30:44.000Z",
    'excerpt': "基础 https://ts.xcatliu.com/basics/type-assertion.html TS的原始数据类型 boolean、number、string、null、undefined、symbol 、void、bigint number const decLiteral: number = 6 const hexLiteral: number = 0xf00d cons...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
