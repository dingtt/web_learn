import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "正则",
        "link": "js/regex.html"
    },
    'next': {
        "text": "JS设计模式",
        "link": "js/design-patterns.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'gh-pages' },
    'pagePath': "js/algo.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "js/algo.html",
    'title': "算法",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>算法</h1>\n<h3 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h3>\n<h4 id="%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96--%E5%8E%BB%E9%87%8D--%E6%8E%92%E5%BA%8F">数组扁平化 + 去重 + 排序<a class="anchor" href="#%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96--%E5%8E%BB%E9%87%8D--%E6%8E%92%E5%BA%8F">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>new <span class="token function">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span>Infinity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{ return a<span class="token operator">-</span>b}<span class="token punctuation">)</span>\n</code></pre>\n<p>给定一个数组，就满足两数之和的下标，可以假定最多只有一组满足条件的</p>\n<pre class="language-javascript"><code class="language-javascript">\n</code></pre>\n<h3 id="%E6%8E%92%E5%BA%8F">排序<a class="anchor" href="#%E6%8E%92%E5%BA%8F">§</a></h3>\n<p><code>avaScript</code> 的 <code>sort</code> 方法的实现原理，当数组长度小于等于 10 的时候，采用插入排序，大于 10 的时候，采用快排，快排的平均时间复杂度是 O(nlogn)O(nlogn)O(nlogn)。</p>\n<h4 id="%E6%A1%B6%E6%8E%92%E5%BA%8F">桶排序<a class="anchor" href="#%E6%A1%B6%E6%8E%92%E5%BA%8F">§</a></h4>\n<h4 id="%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序<a class="anchor" href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">§</a></h4>\n<h4 id="%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序<a class="anchor" href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">popSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token comment">// 需要重复len-1次</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 干活的部分</span>\n     <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n         <span class="token comment">// const temp = arr[j]</span>\n         <span class="token comment">// arr[j] = arr[j+1]</span>\n         <span class="token comment">// arr[j + 1] = temp</span>\n            <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>\n       <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">popSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%B7%A6%E5%8F%B3%E5%BF%AB%E6%8E%92">快速排序——左右快排<a class="anchor" href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%B7%A6%E5%8F%B3%E5%BF%AB%E6%8E%92">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> arr\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> current <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> current<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            left<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> current<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            right<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8E%9F%E5%9C%B0%E5%BF%AB%E6%8E%92"><strong>快速排序——原地快排</strong><a class="anchor" href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8E%9F%E5%9C%B0%E5%BF%AB%E6%8E%92">§</a></h4>\n<p>事件复杂度  O(n * log n)</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序<a class="anchor" href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">§</a></h4>\n<h3 id="%E9%98%B6%E4%B9%98%E4%B8%8E%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88">阶乘与排列组合<a class="anchor" href="#%E9%98%B6%E4%B9%98%E4%B8%8E%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88">§</a></h3>\n<p><strong>阶乘</strong></p>\n<p>n * (n-1) * (n-2) * ... * 2 * 1</p>\n<p><strong>排列组合</strong> Amn C mn*</p>\n<p>n * (n-1) * (n-2) * (n-3) * (n -m + 1)</p>\n<p>n * (n-1) * (n-2) * (n-3) * (n -m + 1) / m * (m- 1) * (m-2)* ... * 1</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// let res = 1</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> end\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">-</span> m <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">-</span>m <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">factorial</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// // A42 12</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// // C42 6</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划<a class="anchor" href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">§</a></h3>\n<h4 id="%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91">暴力递归斐波那契<a class="anchor" href="#%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91">§</a></h4>\n<p>每个n需要计算两次，时间复杂度O(2^n)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 递归出口</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E4%B8%AD%E9%97%B4%E5%AD%98%E5%82%A8fib">中间存储fib<a class="anchor" href="#%E4%B8%AD%E9%97%B4%E5%AD%98%E5%82%A8fib">§</a></h4>\n<p>每个n都只计算一次，时间复杂度O(n)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">storefib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">help</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span><span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> store<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n  store<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">help</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">help</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> store<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> timer1 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">storefib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> timer2 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'store\'</span><span class="token punctuation">,</span>timer2 <span class="token operator">-</span> timer1<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'fib\'</span><span class="token punctuation">,</span><span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timer2<span class="token punctuation">)</span>\n</code></pre>\n<p><strong>动态规划fib</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">dpfib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 循环迭代 从底开始</span>\n  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>动态规划找零</strong>   ???</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Change</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">types</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span> <span class="token operator">=</span> types\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">makeChange</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 求和问题转为求差</span>\n        <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> leftAmount <span class="token operator">=</span> amount <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// </span>\n            <span class="token keyword">let</span> newMin\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>leftAmount <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// </span>\n                newMin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span>leftAmount<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 如果存在更小的数</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>leftAmount <span class="token operator">>=</span> <span class="token number">0</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newMin<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;</span> min<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span><span class="token operator">!</span>min<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>newMin<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">=</span> min\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> change <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Change</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">二分查找<a class="anchor" href="#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">§</a></h4>\n<p>二分查找的输入是一个有序的元素列表</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 确定中间元素  while</span>\n   <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>\n   <span class="token keyword">let</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span>\n   <span class="token keyword control-flow">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//  3 4</span>\n    <span class="token keyword">let</span> m <span class="token operator">=</span>  <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>\n     <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n       high <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>\n     <span class="token punctuation">}</span><span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        low <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>\n     <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n       <span class="token keyword control-flow">return</span> m\n       <span class="token keyword control-flow">break</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>  \n   <span class="token keyword control-flow">return</span> <span class="token operator">-</span><span class="token number">1</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">贪心算法<a class="anchor" href="#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">§</a></h4>\n<p>还是继续找零</p>\n<h4 id="%E6%B1%82%E5%92%8C%E6%B1%82%E5%B7%AE">求和求差<a class="anchor" href="#%E6%B1%82%E5%92%8C%E6%B1%82%E5%B7%AE">§</a></h4>\n<p>几乎所有的求和问题，都可以转化为<strong>求差问题</strong></p>\n<h5 id="%E4%B8%A4%E6%95%B0%E6%B1%82%E5%92%8C">两数求和<a class="anchor" href="#%E4%B8%A4%E6%95%B0%E6%B1%82%E5%92%8C">§</a></h5>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 数组中满足和的两项</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token number">12</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">TwoSum2</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 新值</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> val<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 目标值与新值的差出现过</span>\n      <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> val<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    map<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> i \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 空间复杂度</span>\n<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token number">2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 12 -2 = 10</span>\n  <span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 12 -5 = 7</span>\n  <span class="token number">7</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 12 -7 = 5</span>\n<span class="token punctuation">}</span>\n<span class="token function"><span class="token maybe-class-name">TwoSum2</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>\n<span class="token comment">// {3: 0}  6</span>\n<span class="token comment">// {3:0,4:1} 5</span>\n<span class="token comment">// {3:0,4:1,5:2} 4</span>\n<span class="token comment">// lastindexOf</span>\n</code></pre>\n<h3 id="%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95">双指针算法<a class="anchor" href="#%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"> <span class="token comment">// 合并两个有序整数组成一个整数数组  双指针算法</span>\n <span class="token comment">// 合并两个有序整数组成一个整数数组  双指针算法</span>\n<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> k <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n      j<span class="token operator">--</span>\n      k<span class="token operator">--</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      i<span class="token operator">--</span>\n      k<span class="token operator">--</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n    j<span class="token operator">--</span>\n    k<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  m <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token keyword">var</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  n <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token function">merge</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%B8%89%E6%95%B0%E6%B1%82%E5%92%8C">三数求和<a class="anchor" href="#%E4%B8%89%E6%95%B0%E6%B1%82%E5%92%8C">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 三数求和</span>\n<span class="token keyword">function</span> <span class="token function">findThree</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> a <span class="token operator">-</span> b\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [-4,-1,-1,0,1,2]</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// let sum = target - arr[i]</span>\n    <span class="token comment">//   let j = i === 0 ? 1 : 0</span>\n    <span class="token comment">//   let k = i === (len -1) ? (len -2 ) : (len -1) // 因为有循环，只考虑i的一边就行了</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">continue</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">let</span> k <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>\n        j<span class="token operator">++</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          j<span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>\n        k<span class="token operator">--</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          k<span class="token operator">--</span>\n        <span class="token punctuation">}</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        j<span class="token operator">++</span>\n        k<span class="token operator">--</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          j<span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 若右指针元素重复，跳过</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          k<span class="token operator">--</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> threeArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token function">findThree</span><span class="token punctuation">(</span>threeArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n</code></pre>\n<h4 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8">字符串应用<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8">§</a></h4>\n<p>最大公共前缀</p>\n<p>最大公共路径</p>\n<h4 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC">字符串反转<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript">\n<span class="token string">"str"</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\n\n\n</code></pre>\n<h4 id="%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2">回文字符串<a class="anchor" href="#%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h4>\n<ul>\n<li>\n<p>正序倒序一样</p>\n</li>\n<li>\n<p>中间避开，两头对称</p>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 判断是否是回文字符串\n<span class="token string">"str"</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\nfunction <span class="token function">isPalindrome</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> {\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\n  let len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">; i &lt; len / 2; i++) {</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> !<span class="token operator">==</span> arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> {\n      return <span class="token boolean">false</span>\n    }\n  }\n}\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 最多可删除一个字符 判断是否是回文字符串*</span>\n<span class="token keyword">function</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// \'abcddcbay\'  \'yabcddcba\' \'abcddcyba\' \'abcdydcba\'</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token comment">// 先处理两端一致的 向中间前进</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    i <span class="token operator">++</span>\n    j <span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 到这说明不一致了  左边 + 1</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 右边</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        start<span class="token operator">++</span>\n        end<span class="token operator">--</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcddcbay"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"yabcddcba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcddcyba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcdydcba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcdycdcba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F8">字符串匹配问题——正则表达式8<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F8">§</a></h3>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u7B97\u6CD5"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h3 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h3>\n<h4 id="%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96--%E5%8E%BB%E9%87%8D--%E6%8E%92%E5%BA%8F">数组扁平化 + 去重 + 排序<a class="anchor" href="#%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96--%E5%8E%BB%E9%87%8D--%E6%8E%92%E5%BA%8F">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>new <span class="token function">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span>Infinity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{ return a<span class="token operator">-</span>b}<span class="token punctuation">)</span>\n</code></pre>\n<p>给定一个数组，就满足两数之和的下标，可以假定最多只有一组满足条件的</p>\n<pre class="language-javascript"><code class="language-javascript">\n</code></pre>\n<h3 id="%E6%8E%92%E5%BA%8F">排序<a class="anchor" href="#%E6%8E%92%E5%BA%8F">§</a></h3>\n<p><code>avaScript</code> 的 <code>sort</code> 方法的实现原理，当数组长度小于等于 10 的时候，采用插入排序，大于 10 的时候，采用快排，快排的平均时间复杂度是 O(nlogn)O(nlogn)O(nlogn)。</p>\n<h4 id="%E6%A1%B6%E6%8E%92%E5%BA%8F">桶排序<a class="anchor" href="#%E6%A1%B6%E6%8E%92%E5%BA%8F">§</a></h4>\n<h4 id="%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序<a class="anchor" href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">§</a></h4>\n<h4 id="%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序<a class="anchor" href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">popSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token comment">// 需要重复len-1次</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 干活的部分</span>\n     <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n         <span class="token comment">// const temp = arr[j]</span>\n         <span class="token comment">// arr[j] = arr[j+1]</span>\n         <span class="token comment">// arr[j + 1] = temp</span>\n            <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>\n       <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">popSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%B7%A6%E5%8F%B3%E5%BF%AB%E6%8E%92">快速排序——左右快排<a class="anchor" href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%B7%A6%E5%8F%B3%E5%BF%AB%E6%8E%92">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> arr\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> current <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> current<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            left<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> current<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            right<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8E%9F%E5%9C%B0%E5%BF%AB%E6%8E%92"><strong>快速排序——原地快排</strong><a class="anchor" href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8E%9F%E5%9C%B0%E5%BF%AB%E6%8E%92">§</a></h4>\n<p>事件复杂度  O(n * log n)</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序<a class="anchor" href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">§</a></h4>\n<h3 id="%E9%98%B6%E4%B9%98%E4%B8%8E%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88">阶乘与排列组合<a class="anchor" href="#%E9%98%B6%E4%B9%98%E4%B8%8E%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88">§</a></h3>\n<p><strong>阶乘</strong></p>\n<p>n * (n-1) * (n-2) * ... * 2 * 1</p>\n<p><strong>排列组合</strong> Amn C mn*</p>\n<p>n * (n-1) * (n-2) * (n-3) * (n -m + 1)</p>\n<p>n * (n-1) * (n-2) * (n-3) * (n -m + 1) / m * (m- 1) * (m-2)* ... * 1</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// let res = 1</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> end\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">-</span> m <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">-</span>m <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">factorial</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// // A42 12</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// // C42 6</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划<a class="anchor" href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">§</a></h3>\n<h4 id="%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91">暴力递归斐波那契<a class="anchor" href="#%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91">§</a></h4>\n<p>每个n需要计算两次，时间复杂度O(2^n)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 递归出口</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E4%B8%AD%E9%97%B4%E5%AD%98%E5%82%A8fib">中间存储fib<a class="anchor" href="#%E4%B8%AD%E9%97%B4%E5%AD%98%E5%82%A8fib">§</a></h4>\n<p>每个n都只计算一次，时间复杂度O(n)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">storefib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">help</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span><span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> store<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n  store<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">help</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">help</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> store<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> timer1 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">storefib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> timer2 <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'store\'</span><span class="token punctuation">,</span>timer2 <span class="token operator">-</span> timer1<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'fib\'</span><span class="token punctuation">,</span><span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timer2<span class="token punctuation">)</span>\n</code></pre>\n<p><strong>动态规划fib</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">dpfib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 循环迭代 从底开始</span>\n  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>动态规划找零</strong>   ???</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Change</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">types</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span> <span class="token operator">=</span> types\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">makeChange</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 求和问题转为求差</span>\n        <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> leftAmount <span class="token operator">=</span> amount <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// </span>\n            <span class="token keyword">let</span> newMin\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>leftAmount <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// </span>\n                newMin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span>leftAmount<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 如果存在更小的数</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>leftAmount <span class="token operator">>=</span> <span class="token number">0</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newMin<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;</span> min<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span><span class="token operator">!</span>min<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">types</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>newMin<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">cache</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">=</span> min\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> change <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Change</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span><span class="token method function property-access">makeChange</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h4 id="%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">二分查找<a class="anchor" href="#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">§</a></h4>\n<p>二分查找的输入是一个有序的元素列表</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 确定中间元素  while</span>\n   <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>\n   <span class="token keyword">let</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span>\n   <span class="token keyword control-flow">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//  3 4</span>\n    <span class="token keyword">let</span> m <span class="token operator">=</span>  <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>\n     <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n       high <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>\n     <span class="token punctuation">}</span><span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        low <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>\n     <span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>\n       <span class="token keyword control-flow">return</span> m\n       <span class="token keyword control-flow">break</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>  \n   <span class="token keyword control-flow">return</span> <span class="token operator">-</span><span class="token number">1</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">贪心算法<a class="anchor" href="#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">§</a></h4>\n<p>还是继续找零</p>\n<h4 id="%E6%B1%82%E5%92%8C%E6%B1%82%E5%B7%AE">求和求差<a class="anchor" href="#%E6%B1%82%E5%92%8C%E6%B1%82%E5%B7%AE">§</a></h4>\n<p>几乎所有的求和问题，都可以转化为<strong>求差问题</strong></p>\n<h5 id="%E4%B8%A4%E6%95%B0%E6%B1%82%E5%92%8C">两数求和<a class="anchor" href="#%E4%B8%A4%E6%95%B0%E6%B1%82%E5%92%8C">§</a></h5>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 数组中满足和的两项</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token number">12</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">TwoSum2</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 新值</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> val<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 目标值与新值的差出现过</span>\n      <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> val<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    map<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> i \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 空间复杂度</span>\n<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token number">2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 12 -2 = 10</span>\n  <span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 12 -5 = 7</span>\n  <span class="token number">7</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 12 -7 = 5</span>\n<span class="token punctuation">}</span>\n<span class="token function"><span class="token maybe-class-name">TwoSum2</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>\n<span class="token comment">// {3: 0}  6</span>\n<span class="token comment">// {3:0,4:1} 5</span>\n<span class="token comment">// {3:0,4:1,5:2} 4</span>\n<span class="token comment">// lastindexOf</span>\n</code></pre>\n<h3 id="%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95">双指针算法<a class="anchor" href="#%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"> <span class="token comment">// 合并两个有序整数组成一个整数数组  双指针算法</span>\n <span class="token comment">// 合并两个有序整数组成一个整数数组  双指针算法</span>\n<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> k <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n      j<span class="token operator">--</span>\n      k<span class="token operator">--</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      i<span class="token operator">--</span>\n      k<span class="token operator">--</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n    j<span class="token operator">--</span>\n    k<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  m <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token keyword">var</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  n <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token function">merge</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%B8%89%E6%95%B0%E6%B1%82%E5%92%8C">三数求和<a class="anchor" href="#%E4%B8%89%E6%95%B0%E6%B1%82%E5%92%8C">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 三数求和</span>\n<span class="token keyword">function</span> <span class="token function">findThree</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> a <span class="token operator">-</span> b\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [-4,-1,-1,0,1,2]</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// let sum = target - arr[i]</span>\n    <span class="token comment">//   let j = i === 0 ? 1 : 0</span>\n    <span class="token comment">//   let k = i === (len -1) ? (len -2 ) : (len -1) // 因为有循环，只考虑i的一边就行了</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">continue</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">let</span> k <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>\n        j<span class="token operator">++</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          j<span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>\n        k<span class="token operator">--</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          k<span class="token operator">--</span>\n        <span class="token punctuation">}</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        j<span class="token operator">++</span>\n        k<span class="token operator">--</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          j<span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 若右指针元素重复，跳过</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          k<span class="token operator">--</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> threeArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token function">findThree</span><span class="token punctuation">(</span>threeArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n</code></pre>\n<h4 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8">字符串应用<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8">§</a></h4>\n<p>最大公共前缀</p>\n<p>最大公共路径</p>\n<h4 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC">字符串反转<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC">§</a></h4>\n<pre class="language-javascript"><code class="language-javascript">\n<span class="token string">"str"</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\n\n\n</code></pre>\n<h4 id="%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2">回文字符串<a class="anchor" href="#%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2">§</a></h4>\n<ul>\n<li>\n<p>正序倒序一样</p>\n</li>\n<li>\n<p>中间避开，两头对称</p>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> 判断是否是回文字符串\n<span class="token string">"str"</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\nfunction <span class="token function">isPalindrome</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> {\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\n  let len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">; i &lt; len / 2; i++) {</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> !<span class="token operator">==</span> arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> {\n      return <span class="token boolean">false</span>\n    }\n  }\n}\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 最多可删除一个字符 判断是否是回文字符串*</span>\n<span class="token keyword">function</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// \'abcddcbay\'  \'yabcddcba\' \'abcddcyba\' \'abcdydcba\'</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token comment">// 先处理两端一致的 向中间前进</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    i <span class="token operator">++</span>\n    j <span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 到这说明不一致了  左边 + 1</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 右边</span>\n  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        start<span class="token operator">++</span>\n        end<span class="token operator">--</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcddcbay"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"yabcddcba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcddcyba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcdydcba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token string">"abcdycdcba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F8">字符串匹配问题——正则表达式8<a class="anchor" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F8">§</a></h3>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%95%B0%E7%BB%84" }, "\u6570\u7EC4"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%8E%92%E5%BA%8F" }, "\u6392\u5E8F"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%98%B6%E4%B9%98%E4%B8%8E%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88" }, "\u9636\u4E58\u4E0E\u6392\u5217\u7EC4\u5408")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92" }, "\u52A8\u6001\u89C4\u5212"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95" }, "\u53CC\u6307\u9488\u7B97\u6CD5")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%B8%89%E6%95%B0%E6%B1%82%E5%92%8C" }, "\u4E09\u6570\u6C42\u548C"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F8" }, "\u5B57\u7B26\u4E32\u5339\u914D\u95EE\u9898\u2014\u2014\u6B63\u5219\u8868\u8FBE\u5F0F8")))),
    'author': "dingdtt",
    'contributors': [
        "dingdtt",
        "dingtt"
    ],
    'date': "2020-06-28T09:53:51.000Z",
    'updated': "2021-04-13T07:02:02.000Z",
    'excerpt': "数组 数组扁平化 + 去重 + 排序 Array.from(new Set(arr.flat(Infinity))).sort((a,b)=>{ return a-b}) 给定一个数组，就满足两数之和的下标，可以假定最多只有一组满足条件的 排序 avaScript 的 sort 方法的实现原理，当数组长...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
