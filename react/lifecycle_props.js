import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "Vue路由",
        "link": "vue/vue-router/vue-router.html"
    },
    'next': {
        "link": "webpack/index.html",
        "text": "Webpack"
    },
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "react/lifecycle.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "react/lifecycle.html",
    'title': "React的生命周期",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>React的生命周期</h1>\n<h2 id="react-v160%E5%89%8D%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">React v16.0前的生命周期<a class="anchor" href="#react-v160%E5%89%8D%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">§</a></h2>\n<h3 id="%E5%88%9D%E5%A7%8B%E5%8C%96initialization%E9%98%B6%E6%AE%B5">初始化（initialization）阶段<a class="anchor" href="#%E5%88%9D%E5%A7%8B%E5%8C%96initialization%E9%98%B6%E6%AE%B5">§</a></h3>\n<p>代码中类的构造方法 （ <code>constructor()</code>）,类继承了react COmponent 这个基类，才能有render()，生命周期等方法， 函数组件不能使用这些方法</p>\n<p><code>super(props)</code>用来调用基类的构造方法 <code>constructor()</code>，也将父组件的props注入给子组件，供子组件读取，子组件中的props只读不可变，state可变。 类的<code>constructor()</code>用来做一些组件的初始化工作，如定义 this.state的初始内容</p>\n<h3 id="%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8C%82%E8%BD%BDmount%E9%98%B6%E6%AE%B5">组件的挂载Mount阶段<a class="anchor" href="#%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8C%82%E8%BD%BDmount%E9%98%B6%E6%AE%B5">§</a></h3>\n<ul>\n<li>\n<h5 id="componentwillmount">componentWillMount<a class="anchor" href="#componentwillmount">§</a></h5>\n</li>\n</ul>\n<p>组件挂载前，只会调用一次，在此中调用this.state 不会引起组件重新渲染</p>\n<ul>\n<li>\n<h5 id="render">render<a class="anchor" href="#render">§</a></h5>\n</li>\n</ul>\n<p>根据组件的props和state，return一个React元素（描述组件，既UI），不负责组件的实际渲染工作，之后由React自身根据此元素取渲染出页面DOM，render是串函数，（Pure function 函数的返回结果只依赖于它的参数，函数的执行过程没有副作用，不能在里面执行this.setState，会有改变组件状态的副作用）</p>\n<ul>\n<li>\n<h5 id="componentdidmount">componentDidMount<a class="anchor" href="#componentdidmount">§</a></h5>\n</li>\n</ul>\n<p>组件挂载到DOM后调用，并且只调用一次</p>\n<h3 id="%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5">组件的更新阶段<a class="anchor" href="#%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5">§</a></h3>\n<p>setState引起的state更新或父组件重新render引起的props更新，更新后的state和props之前的相比无论是否变化，都将引起自组件的重新渲染。</p>\n<p>此阶段分为 componentWillReceiveProps , shouldComponentUpdate , componentWillUpdate，render ,componenDidUpdate</p>\n<ol>\n<li>\n<p>componentWillReceiveProps(nextProps)</p>\n<p>此方法只调用与props引起的组件更新过程中，可根据nextProps和this.props查明是否改变，以及如果改变了要执行啥，比如根据新的props调用this.setState 触发当前组件的更新</p>\n<p><em>优化在componentWillReceiveProps中将props转化为自己的state</em></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> props<span class="token punctuation">.</span><span class="token property-access">num</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//父组件重传props会调用这个方法</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            num <span class="token operator">:</span> nextProps<span class="token punctuation">.</span><span class="token property-access">num</span>   <span class="token comment">//如果nextProps变化了，会触发setState重新render,如此props不会再触发子组件更新</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n<li>\n<p>shouldComponentUpdate(nextProps/nextState)</p>\n<p>返回true当前组件继续执行更新过程，返回false则当前组件停止更新，减少不必要的渲染，优化性能。</p>\n<p>在render前，this.state依然指向更新前的state</p>\n<p><em>优化</em></p>\n<ol>\n<li>父组件render引起的，参数nextProps是父组件传的新props，子组件将直接重新渲染，无论props是否有变化，优化方案：</li>\n</ol>\n<p>父组件重新render</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> props<span class="token punctuation">.</span><span class="token property-access">num</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//无论props是否变化，都会触发</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span><span class="token property-access">num</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre>\n<ol>\n<li>\n<p>组件本身调用setState ，无论state有没有变化，可通过shouldComponentUpdate方法优化</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">COmpoonent</span><span class="token punctuation">{</span>\n    <span class="token function">consrtuctor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextState</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//应该使用这个方法，不然state是否有更新都将会导致数组的重新渲染</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nextState<span class="token punctuation">.</span><span class="token property-access">num</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">handldeClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">setState</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> num\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">handleClick</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="componentwillupdate">componentWillUpdate<a class="anchor" href="#componentwillupdate">§</a></h5>\n<p>可在render前执行一定的操作</p>\n<h5 id="render-1">render<a class="anchor" href="#render-1">§</a></h5>\n<h5 id="componentdidupdateprevpropsprestate">componentDidUpdate(prevProps,preState)<a class="anchor" href="#componentdidupdateprevpropsprestate">§</a></h5>\n<p>此方法在组件更新后被调用，可以操作组件更新的DOM，preProps和preState是组件更新前的props和state</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id="react-v164%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">React v16.4的生命周期<a class="anchor" href="#react-v164%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">§</a></h4>\n<h5 id="getderivedstatefromporops">getDerivedStateFromPorops<a class="anchor" href="#getderivedstatefromporops">§</a></h5>\n<p>v16.3只在创建更新时触发，v16.4之后无论什么引起的updating，都会调用</p>\n<p>static getDerivedStateFromProps(props,state) 在组件创建时和更新时的render方法之前，它应该返回一个对象来更新状态，或者返回null不更新任何内容</p>\n<h5 id="getsnapshotbeforeupdate">getSnapshotBeforeUpdate<a class="anchor" href="#getsnapshotbeforeupdate">§</a></h5>\n<p>getSnapshotBeforeUpdate 被调用与render之后，可以读取但无法使用DOM的时候，它使组件可以在更改之前从DOM捕获一些信息，(例如滚动位置)，此生命周期的任何值都讲作为参数传递给componentDidUpdate()</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ScrollingList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span> <span class="token operator">=</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token method function property-access">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">preProps<span class="token punctuation">,</span>preState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//是否需要添加新的 item 到列表</span>\n        <span class="token comment">//捕捉滚动位置，以便可以稍候调整滚动</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>preProps<span class="token punctuation">.</span><span class="token property-access">list</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span><span class="token punctuation">.</span><span class="token property-access">current</span>\n            <span class="token keyword control-flow">return</span> list<span class="token punctuation">.</span><span class="token property-access">scrollHeight</span> <span class="token operator">-</span> list<span class="token punctuation">.</span><span class="token property-access">scrollTop</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword null nil">null</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">preProps<span class="token punctuation">,</span>preState<span class="token punctuation">,</span>snapshot</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//如果有snapshot值，已经添加了新的 items</span>\n        <span class="token comment">//调整滚动以至于这些新的items 不会将旧的items推出视图</span>\n        <span class="token comment">//这里的 snapshotshi getSnapshotUpdate 方法的返回值</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>snapshot <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span><span class="token punctuation">.</span><span class="token property-access">current</span>\n            list<span class="token punctuation">.</span><span class="token property-access">scrollTop</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token property-access">scrollHeight</span> <span class="token operator">-</span> snapshot\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token comment">/* ... contents...*/</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "React\u7684\u751F\u547D\u5468\u671F"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="react-v160%E5%89%8D%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">React v16.0前的生命周期<a class="anchor" href="#react-v160%E5%89%8D%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">§</a></h2>\n<h3 id="%E5%88%9D%E5%A7%8B%E5%8C%96initialization%E9%98%B6%E6%AE%B5">初始化（initialization）阶段<a class="anchor" href="#%E5%88%9D%E5%A7%8B%E5%8C%96initialization%E9%98%B6%E6%AE%B5">§</a></h3>\n<p>代码中类的构造方法 （ <code>constructor()</code>）,类继承了react COmponent 这个基类，才能有render()，生命周期等方法， 函数组件不能使用这些方法</p>\n<p><code>super(props)</code>用来调用基类的构造方法 <code>constructor()</code>，也将父组件的props注入给子组件，供子组件读取，子组件中的props只读不可变，state可变。 类的<code>constructor()</code>用来做一些组件的初始化工作，如定义 this.state的初始内容</p>\n<h3 id="%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8C%82%E8%BD%BDmount%E9%98%B6%E6%AE%B5">组件的挂载Mount阶段<a class="anchor" href="#%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8C%82%E8%BD%BDmount%E9%98%B6%E6%AE%B5">§</a></h3>\n<ul>\n<li>\n<h5 id="componentwillmount">componentWillMount<a class="anchor" href="#componentwillmount">§</a></h5>\n</li>\n</ul>\n<p>组件挂载前，只会调用一次，在此中调用this.state 不会引起组件重新渲染</p>\n<ul>\n<li>\n<h5 id="render">render<a class="anchor" href="#render">§</a></h5>\n</li>\n</ul>\n<p>根据组件的props和state，return一个React元素（描述组件，既UI），不负责组件的实际渲染工作，之后由React自身根据此元素取渲染出页面DOM，render是串函数，（Pure function 函数的返回结果只依赖于它的参数，函数的执行过程没有副作用，不能在里面执行this.setState，会有改变组件状态的副作用）</p>\n<ul>\n<li>\n<h5 id="componentdidmount">componentDidMount<a class="anchor" href="#componentdidmount">§</a></h5>\n</li>\n</ul>\n<p>组件挂载到DOM后调用，并且只调用一次</p>\n<h3 id="%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5">组件的更新阶段<a class="anchor" href="#%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5">§</a></h3>\n<p>setState引起的state更新或父组件重新render引起的props更新，更新后的state和props之前的相比无论是否变化，都将引起自组件的重新渲染。</p>\n<p>此阶段分为 componentWillReceiveProps , shouldComponentUpdate , componentWillUpdate，render ,componenDidUpdate</p>\n<ol>\n<li>\n<p>componentWillReceiveProps(nextProps)</p>\n<p>此方法只调用与props引起的组件更新过程中，可根据nextProps和this.props查明是否改变，以及如果改变了要执行啥，比如根据新的props调用this.setState 触发当前组件的更新</p>\n<p><em>优化在componentWillReceiveProps中将props转化为自己的state</em></p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> props<span class="token punctuation">.</span><span class="token property-access">num</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//父组件重传props会调用这个方法</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            num <span class="token operator">:</span> nextProps<span class="token punctuation">.</span><span class="token property-access">num</span>   <span class="token comment">//如果nextProps变化了，会触发setState重新render,如此props不会再触发子组件更新</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n<li>\n<p>shouldComponentUpdate(nextProps/nextState)</p>\n<p>返回true当前组件继续执行更新过程，返回false则当前组件停止更新，减少不必要的渲染，优化性能。</p>\n<p>在render前，this.state依然指向更新前的state</p>\n<p><em>优化</em></p>\n<ol>\n<li>父组件render引起的，参数nextProps是父组件传的新props，子组件将直接重新渲染，无论props是否有变化，优化方案：</li>\n</ol>\n<p>父组件重新render</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> props<span class="token punctuation">.</span><span class="token property-access">num</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//无论props是否变化，都会触发</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span><span class="token property-access">num</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre>\n<ol>\n<li>\n<p>组件本身调用setState ，无论state有没有变化，可通过shouldComponentUpdate方法优化</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">COmpoonent</span><span class="token punctuation">{</span>\n    <span class="token function">consrtuctor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextState</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//应该使用这个方法，不然state是否有更新都将会导致数组的重新渲染</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>nextState<span class="token punctuation">.</span><span class="token property-access">num</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">handldeClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">setState</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            num <span class="token operator">:</span> num\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">handleClick</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">num</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="componentwillupdate">componentWillUpdate<a class="anchor" href="#componentwillupdate">§</a></h5>\n<p>可在render前执行一定的操作</p>\n<h5 id="render-1">render<a class="anchor" href="#render-1">§</a></h5>\n<h5 id="componentdidupdateprevpropsprestate">componentDidUpdate(prevProps,preState)<a class="anchor" href="#componentdidupdateprevpropsprestate">§</a></h5>\n<p>此方法在组件更新后被调用，可以操作组件更新的DOM，preProps和preState是组件更新前的props和state</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id="react-v164%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">React v16.4的生命周期<a class="anchor" href="#react-v164%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">§</a></h4>\n<h5 id="getderivedstatefromporops">getDerivedStateFromPorops<a class="anchor" href="#getderivedstatefromporops">§</a></h5>\n<p>v16.3只在创建更新时触发，v16.4之后无论什么引起的updating，都会调用</p>\n<p>static getDerivedStateFromProps(props,state) 在组件创建时和更新时的render方法之前，它应该返回一个对象来更新状态，或者返回null不更新任何内容</p>\n<h5 id="getsnapshotbeforeupdate">getSnapshotBeforeUpdate<a class="anchor" href="#getsnapshotbeforeupdate">§</a></h5>\n<p>getSnapshotBeforeUpdate 被调用与render之后，可以读取但无法使用DOM的时候，它使组件可以在更改之前从DOM捕获一些信息，(例如滚动位置)，此生命周期的任何值都讲作为参数传递给componentDidUpdate()</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ScrollingList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span> <span class="token operator">=</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token method function property-access">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">preProps<span class="token punctuation">,</span>preState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//是否需要添加新的 item 到列表</span>\n        <span class="token comment">//捕捉滚动位置，以便可以稍候调整滚动</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>preProps<span class="token punctuation">.</span><span class="token property-access">list</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span><span class="token punctuation">.</span><span class="token property-access">current</span>\n            <span class="token keyword control-flow">return</span> list<span class="token punctuation">.</span><span class="token property-access">scrollHeight</span> <span class="token operator">-</span> list<span class="token punctuation">.</span><span class="token property-access">scrollTop</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword null nil">null</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">preProps<span class="token punctuation">,</span>preState<span class="token punctuation">,</span>snapshot</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//如果有snapshot值，已经添加了新的 items</span>\n        <span class="token comment">//调整滚动以至于这些新的items 不会将旧的items推出视图</span>\n        <span class="token comment">//这里的 snapshotshi getSnapshotUpdate 方法的返回值</span>\n        <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>snapshot <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span><span class="token punctuation">.</span><span class="token property-access">current</span>\n            list<span class="token punctuation">.</span><span class="token property-access">scrollTop</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token property-access">scrollHeight</span> <span class="token operator">-</span> snapshot\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">listRef</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token comment">/* ... contents...*/</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#react-v160%E5%89%8D%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" }, "React v16.0\u524D\u7684\u751F\u547D\u5468\u671F"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%88%9D%E5%A7%8B%E5%8C%96initialization%E9%98%B6%E6%AE%B5" }, "\u521D\u59CB\u5316\uFF08initialization\uFF09\u9636\u6BB5")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8C%82%E8%BD%BDmount%E9%98%B6%E6%AE%B5" }, "\u7EC4\u4EF6\u7684\u6302\u8F7DMount\u9636\u6BB5"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5" }, "\u7EC4\u4EF6\u7684\u66F4\u65B0\u9636\u6BB5"),
                        React.createElement("ol", null)))))),
    'author': "dingtt",
    'contributors': [
        "dingtt"
    ],
    'date': "2021-05-02T08:22:31.000Z",
    'updated': null,
    'excerpt': "React v16.0前的生命周期 初始化（initialization）阶段 代码中类的构造方法 （ constructor()）,类继承了react COmponent 这个基类，才能有render()，生命周期等方法， 函数组件不能使用这些方法 super(props)用来调用基类的构...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "Hello world",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "link": "WebAPI/README.md",
            "children": [],
            "text": "WebAPI/README.md"
        },
        {
            "link": "HTTP/index.html",
            "children": [
                {
                    "text": "浏览器",
                    "link": "HTTP/browser.html",
                    "pagePath": "HTTP/browser.md"
                },
                {
                    "text": "HTTP协议请求方法和状态码",
                    "link": "HTTP/HTTP.html",
                    "pagePath": "HTTP/HTTP.md"
                },
                {
                    "text": "网络硬件",
                    "link": "HTTP/internet-hardware.html",
                    "pagePath": "HTTP/internet-hardware.md"
                }
            ],
            "pagePath": "HTTP/README.md",
            "text": "HTTP协议与浏览器"
        },
        {
            "link": "js/todo.md",
            "children": [
                {
                    "text": "JavaScript基础",
                    "link": "js/basics.html",
                    "pagePath": "js/basics.md"
                },
                {
                    "text": "基础",
                    "link": "js/Object.html",
                    "pagePath": "js/Object.md"
                },
                {
                    "text": "执行上下文",
                    "link": "js/context.html",
                    "pagePath": "js/context.md"
                },
                {
                    "text": "闭包和面向对象",
                    "link": "js/closure.html",
                    "pagePath": "js/closure.md"
                },
                {
                    "text": "正则",
                    "link": "js/regex.html",
                    "pagePath": "js/regex.md"
                },
                {
                    "text": "算法",
                    "link": "js/algo.html",
                    "pagePath": "js/algo.md"
                },
                {
                    "text": "JS设计模式",
                    "link": "js/design-patterns.html",
                    "pagePath": "js/design-patterns.md"
                }
            ],
            "text": "js/todo.md"
        },
        {
            "link": "TS/index.html",
            "children": [
                {
                    "text": "TS基础",
                    "link": "TS/basics.html",
                    "pagePath": "TS/basics.md"
                },
                {
                    "text": "TS枚举 类型 接口 泛型",
                    "link": "TS/enum.html",
                    "pagePath": "TS/enum.md"
                }
            ],
            "pagePath": "TS/README.md",
            "text": "TS"
        },
        {
            "link": "vue/index.html",
            "children": [
                {
                    "text": "Vue开发技巧",
                    "link": "vue/vue-skills.html",
                    "pagePath": "vue/vue-skills.md"
                },
                {
                    "text": "Vue组件通信",
                    "link": "vue/vue-communication.html",
                    "pagePath": "vue/vue-communication.md"
                },
                {
                    "text": "Vue路由",
                    "link": "vue/vue-router/vue-router.html",
                    "pagePath": "vue/vue-router/vue-router.md"
                }
            ],
            "pagePath": "vue/README.md",
            "text": "Vue"
        },
        {
            "text": "React的生命周期",
            "link": "react/lifecycle.html",
            "pagePath": "react/lifecycle.md"
        },
        {
            "link": "webpack/index.html",
            "children": [
                {
                    "text": "webpack的使用",
                    "link": "webpack/webpack-use.html",
                    "pagePath": "webpack/webpack-use.md"
                },
                {
                    "text": "Webpack打包原理解析",
                    "link": "webpack/webpack-principle.html",
                    "pagePath": "webpack/webpack-principle.md"
                },
                {
                    "text": "生产环境配置",
                    "link": "webpack/webpack-dev-config.html",
                    "pagePath": "webpack/webpack-dev-config.md"
                },
                {
                    "text": "实现自己的loader",
                    "link": "webpack/webpack-custom-loader.html",
                    "pagePath": "webpack/webpack-custom-loader.md"
                },
                {
                    "text": "实现自己的plugin",
                    "link": "webpack/webpack-custom-plugin.html",
                    "pagePath": "webpack/webpack-custom-plugin.md"
                },
                {
                    "text": "webpack代码分片",
                    "link": "webpack/webpack-split-chunks.html",
                    "pagePath": "webpack/webpack-split-chunks.md"
                },
                {
                    "text": "webpack-dev-server 与 HMR",
                    "link": "webpack/webpack-dev-server-hmr.html",
                    "pagePath": "webpack/webpack-dev-server-hmr.md"
                }
            ],
            "pagePath": "webpack/README.md",
            "text": "Webpack"
        },
        {
            "text": "前端监控简介",
            "link": "web-monitor/web-monitor.html",
            "pagePath": "web-monitor/web-monitor.md"
        },
        {
            "text": "Git使用",
            "link": "git/git.html",
            "pagePath": "git/git.md"
        }
    ]
};
